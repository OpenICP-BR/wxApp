# 1 "main-ui.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 353 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "main-ui.cpp" 2
# 1 "./main-ui.h" 1


# 1 "./common.h" 1


# 1 "/usr/local/include/wx-3.0/wx/wxprec.h" 1
# 12 "/usr/local/include/wx-3.0/wx/wxprec.h"
# 1 "/usr/local/include/wx-3.0/wx/defs.h" 1
# 27 "/usr/local/include/wx-3.0/wx/defs.h"
# 1 "/usr/local/include/wx-3.0/wx/platform.h" 1
# 173 "/usr/local/include/wx-3.0/wx/platform.h"
# 1 "/usr/local/include/wx-3.0/wx/compiler.h" 1
# 174 "/usr/local/include/wx-3.0/wx/platform.h" 2
# 529 "/usr/local/include/wx-3.0/wx/platform.h"
# 1 "/usr/include/TargetConditionals.h" 1 3 4
# 530 "/usr/local/include/wx-3.0/wx/platform.h" 2
# 547 "/usr/local/include/wx-3.0/wx/platform.h"
# 1 "/usr/include/AvailabilityMacros.h" 1 3 4
# 233 "/usr/include/AvailabilityMacros.h" 3 4
# 1 "/usr/include/Availability.h" 1 3 4
# 206 "/usr/include/Availability.h" 3 4
# 1 "/usr/include/AvailabilityInternal.h" 1 3 4
# 207 "/usr/include/Availability.h" 2 3 4
# 234 "/usr/include/AvailabilityMacros.h" 2 3 4
# 548 "/usr/local/include/wx-3.0/wx/platform.h" 2
# 596 "/usr/local/include/wx-3.0/wx/platform.h"
# 1 "/usr/local/include/wx-3.0/wx/chkconf.h" 1
# 1231 "/usr/local/include/wx-3.0/wx/chkconf.h"
# 1 "/usr/local/include/wx-3.0/wx/osx/chkconf.h" 1
# 85 "/usr/local/include/wx-3.0/wx/osx/chkconf.h"
# 1 "/usr/local/include/wx-3.0/wx/osx/cocoa/chkconf.h" 1
# 86 "/usr/local/include/wx-3.0/wx/osx/chkconf.h" 2
# 1232 "/usr/local/include/wx-3.0/wx/chkconf.h" 2
# 1249 "/usr/local/include/wx-3.0/wx/chkconf.h"
# 1 "/usr/local/include/wx-3.0/wx/unix/chkconf.h" 1
# 1250 "/usr/local/include/wx-3.0/wx/chkconf.h" 2
# 597 "/usr/local/include/wx-3.0/wx/platform.h" 2
# 28 "/usr/local/include/wx-3.0/wx/defs.h" 2
# 193 "/usr/local/include/wx-3.0/wx/defs.h"
# 1 "/usr/local/include/wx-3.0/wx/version.h" 1
# 16 "/usr/local/include/wx-3.0/wx/version.h"
# 1 "/usr/local/include/wx-3.0/wx/cpp.h" 1
# 17 "/usr/local/include/wx-3.0/wx/version.h" 2
# 194 "/usr/local/include/wx-3.0/wx/defs.h" 2
# 239 "/usr/local/include/wx-3.0/wx/defs.h"
typedef short int WXTYPE;
# 570 "/usr/local/include/wx-3.0/wx/defs.h"
# 1 "/usr/local/include/wx-3.0/wx/dlimpexp.h" 1
# 571 "/usr/local/include/wx-3.0/wx/defs.h" 2
# 728 "/usr/local/include/wx-3.0/wx/defs.h"
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stddef.h" 1 3
# 40 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stddef.h" 3
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__config" 1 3
# 22 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__config" 3
# 321 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__config" 3
typedef __char16_t char16_t;
typedef __char32_t char32_t;
# 443 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__config" 3
namespace std {
  inline namespace __1 {
  }
}
# 41 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stddef.h" 2 3
# 44 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stddef.h" 3


# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/include/stddef.h" 1 3 4
# 51 "/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 62 "/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 47 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stddef.h" 2 3



extern "C++" {

# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__nullptr" 1 3
# 18 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__nullptr" 3




namespace std {inline namespace __1 {

struct __attribute__ ((__type_visibility__("default"))) nullptr_t
{
    void* __lx;

    struct __nat {int __for_bool_;};

    __attribute__ ((__visibility__("hidden"), __always_inline__)) nullptr_t() : __lx(0) {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) nullptr_t(int __nat::*) : __lx(0) {}

    __attribute__ ((__visibility__("hidden"), __always_inline__)) operator int __nat::*() const {return 0;}

    template <class _Tp>
        __attribute__ ((__visibility__("hidden"), __always_inline__))
        operator _Tp* () const {return 0;}

    template <class _Tp, class _Up>
        __attribute__ ((__visibility__("hidden"), __always_inline__))
        operator _Tp _Up::* () const {return 0;}

    friend __attribute__ ((__visibility__("hidden"), __always_inline__)) bool operator==(nullptr_t, nullptr_t) {return true;}
    friend __attribute__ ((__visibility__("hidden"), __always_inline__)) bool operator!=(nullptr_t, nullptr_t) {return false;}
};

inline __attribute__ ((__visibility__("hidden"), __always_inline__)) nullptr_t __get_nullptr_t() {return nullptr_t(0);}



} }
# 52 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stddef.h" 2 3
using std::nullptr_t;
}




typedef long double max_align_t;
# 729 "/usr/local/include/wx-3.0/wx/defs.h" 2





# 1 "/usr/local/include/wx-3.0/wx/debug.h" 1
# 14 "/usr/local/include/wx-3.0/wx/debug.h"
# 1 "/usr/include/assert.h" 1 3 4
# 42 "/usr/include/assert.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 587 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/sys/_symbol_aliasing.h" 1 3 4
# 588 "/usr/include/sys/cdefs.h" 2 3 4
# 653 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/sys/_posix_availability.h" 1 3 4
# 654 "/usr/include/sys/cdefs.h" 2 3 4
# 43 "/usr/include/assert.h" 2 3 4

# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdlib.h" 1 3 4
# 92 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdlib.h" 3


# 1 "/usr/include/stdlib.h" 1 3 4
# 63 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/_types.h" 1 3 4
# 27 "/usr/include/_types.h" 3 4
# 1 "/usr/include/sys/_types.h" 1 3 4
# 33 "/usr/include/sys/_types.h" 3 4
# 1 "/usr/include/machine/_types.h" 1 3 4
# 32 "/usr/include/machine/_types.h" 3 4
# 1 "/usr/include/i386/_types.h" 1 3 4
# 37 "/usr/include/i386/_types.h" 3 4
typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
# 70 "/usr/include/i386/_types.h" 3 4
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;


typedef long int __darwin_ptrdiff_t;







typedef long unsigned int __darwin_size_t;





typedef __builtin_va_list __darwin_va_list;





typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
# 33 "/usr/include/machine/_types.h" 2 3 4
# 34 "/usr/include/sys/_types.h" 2 3 4
# 55 "/usr/include/sys/_types.h" 3 4
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;

typedef __darwin_ino64_t __darwin_ino_t;



typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];


# 1 "/usr/include/sys/_pthread/_pthread_types.h" 1 3 4
# 57 "/usr/include/sys/_pthread/_pthread_types.h" 3 4
struct __darwin_pthread_handler_rec {
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};

struct _opaque_pthread_attr_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_cond_t {
 long __sig;
 char __opaque[40];
};

struct _opaque_pthread_condattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_mutex_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_mutexattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_once_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_rwlock_t {
 long __sig;
 char __opaque[192];
};

struct _opaque_pthread_rwlockattr_t {
 long __sig;
 char __opaque[16];
};

struct _opaque_pthread_t {
 long __sig;
 struct __darwin_pthread_handler_rec *__cleanup_stack;
 char __opaque[8176];
};

typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t *__darwin_pthread_t;
# 81 "/usr/include/sys/_types.h" 2 3 4
# 28 "/usr/include/_types.h" 2 3 4
# 40 "/usr/include/_types.h" 3 4
typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;

typedef __uint32_t __darwin_wctype_t;
# 64 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/include/sys/wait.h" 1 3 4
# 79 "/usr/include/sys/wait.h" 3 4
typedef enum {
 P_ALL,
 P_PID,
 P_PGID
} idtype_t;






# 1 "/usr/include/sys/_types/_pid_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_pid_t.h" 3 4
typedef __darwin_pid_t pid_t;
# 90 "/usr/include/sys/wait.h" 2 3 4
# 1 "/usr/include/sys/_types/_id_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_id_t.h" 3 4
typedef __darwin_id_t id_t;
# 91 "/usr/include/sys/wait.h" 2 3 4
# 109 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/sys/signal.h" 1 3 4
# 73 "/usr/include/sys/signal.h" 3 4
# 1 "/usr/include/sys/appleapiopts.h" 1 3 4
# 74 "/usr/include/sys/signal.h" 2 3 4








# 1 "/usr/include/machine/signal.h" 1 3 4
# 32 "/usr/include/machine/signal.h" 3 4
# 1 "/usr/include/i386/signal.h" 1 3 4
# 39 "/usr/include/i386/signal.h" 3 4
typedef int sig_atomic_t;
# 33 "/usr/include/machine/signal.h" 2 3 4
# 83 "/usr/include/sys/signal.h" 2 3 4
# 146 "/usr/include/sys/signal.h" 3 4
# 1 "/usr/include/machine/_mcontext.h" 1 3 4
# 29 "/usr/include/machine/_mcontext.h" 3 4
# 1 "/usr/include/i386/_mcontext.h" 1 3 4
# 34 "/usr/include/i386/_mcontext.h" 3 4
# 1 "/usr/include/mach/machine/_structs.h" 1 3 4
# 33 "/usr/include/mach/machine/_structs.h" 3 4
# 1 "/usr/include/mach/i386/_structs.h" 1 3 4
# 36 "/usr/include/mach/i386/_structs.h" 3 4
# 1 "/usr/include/machine/types.h" 1 3 4
# 35 "/usr/include/machine/types.h" 3 4
# 1 "/usr/include/i386/types.h" 1 3 4
# 76 "/usr/include/i386/types.h" 3 4
# 1 "/usr/include/sys/_types/_int8_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int8_t.h" 3 4
typedef signed char int8_t;
# 77 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_int16_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int16_t.h" 3 4
typedef short int16_t;
# 78 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_int32_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int32_t.h" 3 4
typedef int int32_t;
# 79 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_int64_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_int64_t.h" 3 4
typedef long long int64_t;
# 80 "/usr/include/i386/types.h" 2 3 4

# 1 "/usr/include/sys/_types/_u_int8_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_int8_t.h" 3 4
typedef unsigned char u_int8_t;
# 82 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_u_int16_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_int16_t.h" 3 4
typedef unsigned short u_int16_t;
# 83 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_u_int32_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_int32_t.h" 3 4
typedef unsigned int u_int32_t;
# 84 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_u_int64_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_int64_t.h" 3 4
typedef unsigned long long u_int64_t;
# 85 "/usr/include/i386/types.h" 2 3 4


typedef int64_t register_t;





# 1 "/usr/include/sys/_types/_intptr_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_intptr_t.h" 3 4
# 1 "/usr/include/machine/types.h" 1 3 4
# 31 "/usr/include/sys/_types/_intptr_t.h" 2 3 4

typedef __darwin_intptr_t intptr_t;
# 93 "/usr/include/i386/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_uintptr_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_uintptr_t.h" 3 4
typedef unsigned long uintptr_t;
# 94 "/usr/include/i386/types.h" 2 3 4



typedef u_int64_t user_addr_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef int64_t user_long_t;
typedef u_int64_t user_ulong_t;
typedef int64_t user_time_t;
typedef int64_t user_off_t;







typedef u_int64_t syscall_arg_t;
# 36 "/usr/include/machine/types.h" 2 3 4
# 37 "/usr/include/mach/i386/_structs.h" 2 3 4
# 46 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_thread_state
{
    unsigned int __eax;
    unsigned int __ebx;
    unsigned int __ecx;
    unsigned int __edx;
    unsigned int __edi;
    unsigned int __esi;
    unsigned int __ebp;
    unsigned int __esp;
    unsigned int __ss;
    unsigned int __eflags;
    unsigned int __eip;
    unsigned int __cs;
    unsigned int __ds;
    unsigned int __es;
    unsigned int __fs;
    unsigned int __gs;
};
# 92 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_fp_control
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
      :2,
    __pc :2,





    __rc :2,






             :1,
      :3;
};
typedef struct __darwin_fp_control __darwin_fp_control_t;
# 150 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_fp_status
{
    unsigned short __invalid :1,
        __denorm :1,
    __zdiv :1,
    __ovrfl :1,
    __undfl :1,
    __precis :1,
    __stkflt :1,
    __errsumm :1,
    __c0 :1,
    __c1 :1,
    __c2 :1,
    __tos :3,
    __c3 :1,
    __busy :1;
};
typedef struct __darwin_fp_status __darwin_fp_status_t;
# 194 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_mmst_reg
{
 char __mmst_reg[10];
 char __mmst_rsrv[6];
};
# 213 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_xmm_reg
{
 char __xmm_reg[16];
};
# 229 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_ymm_reg
{
 char __ymm_reg[32];
};
# 245 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_zmm_reg
{
 char __zmm_reg[64];
};
# 259 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_opmask_reg
{
 char __opmask_reg[8];
};
# 281 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_float_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
};


struct __darwin_i386_avx_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
};


struct __darwin_i386_avx512_state
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;
 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;
 __uint16_t __fpu_rsrv2;
 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;
 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 char __fpu_rsrv4[14*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_opmask_reg __fpu_k0;
 struct __darwin_opmask_reg __fpu_k1;
 struct __darwin_opmask_reg __fpu_k2;
 struct __darwin_opmask_reg __fpu_k3;
 struct __darwin_opmask_reg __fpu_k4;
 struct __darwin_opmask_reg __fpu_k5;
 struct __darwin_opmask_reg __fpu_k6;
 struct __darwin_opmask_reg __fpu_k7;
 struct __darwin_ymm_reg __fpu_zmmh0;
 struct __darwin_ymm_reg __fpu_zmmh1;
 struct __darwin_ymm_reg __fpu_zmmh2;
 struct __darwin_ymm_reg __fpu_zmmh3;
 struct __darwin_ymm_reg __fpu_zmmh4;
 struct __darwin_ymm_reg __fpu_zmmh5;
 struct __darwin_ymm_reg __fpu_zmmh6;
 struct __darwin_ymm_reg __fpu_zmmh7;
};
# 575 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_i386_exception_state
{
 __uint16_t __trapno;
 __uint16_t __cpu;
 __uint32_t __err;
 __uint32_t __faultvaddr;
};
# 595 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_debug_state32
{
 unsigned int __dr0;
 unsigned int __dr1;
 unsigned int __dr2;
 unsigned int __dr3;
 unsigned int __dr4;
 unsigned int __dr5;
 unsigned int __dr6;
 unsigned int __dr7;
};
# 627 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_thread_state64
{
 __uint64_t __rax;
 __uint64_t __rbx;
 __uint64_t __rcx;
 __uint64_t __rdx;
 __uint64_t __rdi;
 __uint64_t __rsi;
 __uint64_t __rbp;
 __uint64_t __rsp;
 __uint64_t __r8;
 __uint64_t __r9;
 __uint64_t __r10;
 __uint64_t __r11;
 __uint64_t __r12;
 __uint64_t __r13;
 __uint64_t __r14;
 __uint64_t __r15;
 __uint64_t __rip;
 __uint64_t __rflags;
 __uint64_t __cs;
 __uint64_t __fs;
 __uint64_t __gs;
};
# 682 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_float_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
};


struct __darwin_x86_avx_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_xmm_reg __fpu_ymmh8;
 struct __darwin_xmm_reg __fpu_ymmh9;
 struct __darwin_xmm_reg __fpu_ymmh10;
 struct __darwin_xmm_reg __fpu_ymmh11;
 struct __darwin_xmm_reg __fpu_ymmh12;
 struct __darwin_xmm_reg __fpu_ymmh13;
 struct __darwin_xmm_reg __fpu_ymmh14;
 struct __darwin_xmm_reg __fpu_ymmh15;
};


struct __darwin_x86_avx512_state64
{
 int __fpu_reserved[2];
 struct __darwin_fp_control __fpu_fcw;
 struct __darwin_fp_status __fpu_fsw;
 __uint8_t __fpu_ftw;
 __uint8_t __fpu_rsrv1;
 __uint16_t __fpu_fop;


 __uint32_t __fpu_ip;
 __uint16_t __fpu_cs;

 __uint16_t __fpu_rsrv2;


 __uint32_t __fpu_dp;
 __uint16_t __fpu_ds;

 __uint16_t __fpu_rsrv3;
 __uint32_t __fpu_mxcsr;
 __uint32_t __fpu_mxcsrmask;
 struct __darwin_mmst_reg __fpu_stmm0;
 struct __darwin_mmst_reg __fpu_stmm1;
 struct __darwin_mmst_reg __fpu_stmm2;
 struct __darwin_mmst_reg __fpu_stmm3;
 struct __darwin_mmst_reg __fpu_stmm4;
 struct __darwin_mmst_reg __fpu_stmm5;
 struct __darwin_mmst_reg __fpu_stmm6;
 struct __darwin_mmst_reg __fpu_stmm7;
 struct __darwin_xmm_reg __fpu_xmm0;
 struct __darwin_xmm_reg __fpu_xmm1;
 struct __darwin_xmm_reg __fpu_xmm2;
 struct __darwin_xmm_reg __fpu_xmm3;
 struct __darwin_xmm_reg __fpu_xmm4;
 struct __darwin_xmm_reg __fpu_xmm5;
 struct __darwin_xmm_reg __fpu_xmm6;
 struct __darwin_xmm_reg __fpu_xmm7;
 struct __darwin_xmm_reg __fpu_xmm8;
 struct __darwin_xmm_reg __fpu_xmm9;
 struct __darwin_xmm_reg __fpu_xmm10;
 struct __darwin_xmm_reg __fpu_xmm11;
 struct __darwin_xmm_reg __fpu_xmm12;
 struct __darwin_xmm_reg __fpu_xmm13;
 struct __darwin_xmm_reg __fpu_xmm14;
 struct __darwin_xmm_reg __fpu_xmm15;
 char __fpu_rsrv4[6*16];
 int __fpu_reserved1;
 char __avx_reserved1[64];
 struct __darwin_xmm_reg __fpu_ymmh0;
 struct __darwin_xmm_reg __fpu_ymmh1;
 struct __darwin_xmm_reg __fpu_ymmh2;
 struct __darwin_xmm_reg __fpu_ymmh3;
 struct __darwin_xmm_reg __fpu_ymmh4;
 struct __darwin_xmm_reg __fpu_ymmh5;
 struct __darwin_xmm_reg __fpu_ymmh6;
 struct __darwin_xmm_reg __fpu_ymmh7;
 struct __darwin_xmm_reg __fpu_ymmh8;
 struct __darwin_xmm_reg __fpu_ymmh9;
 struct __darwin_xmm_reg __fpu_ymmh10;
 struct __darwin_xmm_reg __fpu_ymmh11;
 struct __darwin_xmm_reg __fpu_ymmh12;
 struct __darwin_xmm_reg __fpu_ymmh13;
 struct __darwin_xmm_reg __fpu_ymmh14;
 struct __darwin_xmm_reg __fpu_ymmh15;
 struct __darwin_opmask_reg __fpu_k0;
 struct __darwin_opmask_reg __fpu_k1;
 struct __darwin_opmask_reg __fpu_k2;
 struct __darwin_opmask_reg __fpu_k3;
 struct __darwin_opmask_reg __fpu_k4;
 struct __darwin_opmask_reg __fpu_k5;
 struct __darwin_opmask_reg __fpu_k6;
 struct __darwin_opmask_reg __fpu_k7;
 struct __darwin_ymm_reg __fpu_zmmh0;
 struct __darwin_ymm_reg __fpu_zmmh1;
 struct __darwin_ymm_reg __fpu_zmmh2;
 struct __darwin_ymm_reg __fpu_zmmh3;
 struct __darwin_ymm_reg __fpu_zmmh4;
 struct __darwin_ymm_reg __fpu_zmmh5;
 struct __darwin_ymm_reg __fpu_zmmh6;
 struct __darwin_ymm_reg __fpu_zmmh7;
 struct __darwin_ymm_reg __fpu_zmmh8;
 struct __darwin_ymm_reg __fpu_zmmh9;
 struct __darwin_ymm_reg __fpu_zmmh10;
 struct __darwin_ymm_reg __fpu_zmmh11;
 struct __darwin_ymm_reg __fpu_zmmh12;
 struct __darwin_ymm_reg __fpu_zmmh13;
 struct __darwin_ymm_reg __fpu_zmmh14;
 struct __darwin_ymm_reg __fpu_zmmh15;
 struct __darwin_zmm_reg __fpu_zmm16;
 struct __darwin_zmm_reg __fpu_zmm17;
 struct __darwin_zmm_reg __fpu_zmm18;
 struct __darwin_zmm_reg __fpu_zmm19;
 struct __darwin_zmm_reg __fpu_zmm20;
 struct __darwin_zmm_reg __fpu_zmm21;
 struct __darwin_zmm_reg __fpu_zmm22;
 struct __darwin_zmm_reg __fpu_zmm23;
 struct __darwin_zmm_reg __fpu_zmm24;
 struct __darwin_zmm_reg __fpu_zmm25;
 struct __darwin_zmm_reg __fpu_zmm26;
 struct __darwin_zmm_reg __fpu_zmm27;
 struct __darwin_zmm_reg __fpu_zmm28;
 struct __darwin_zmm_reg __fpu_zmm29;
 struct __darwin_zmm_reg __fpu_zmm30;
 struct __darwin_zmm_reg __fpu_zmm31;
};
# 1140 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_exception_state64
{
    __uint16_t __trapno;
    __uint16_t __cpu;
    __uint32_t __err;
    __uint64_t __faultvaddr;
};
# 1160 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_debug_state64
{
 __uint64_t __dr0;
 __uint64_t __dr1;
 __uint64_t __dr2;
 __uint64_t __dr3;
 __uint64_t __dr4;
 __uint64_t __dr5;
 __uint64_t __dr6;
 __uint64_t __dr7;
};
# 1188 "/usr/include/mach/i386/_structs.h" 3 4
struct __darwin_x86_cpmu_state64
{
 __uint64_t __ctrs[16];
};
# 34 "/usr/include/mach/machine/_structs.h" 2 3 4
# 35 "/usr/include/i386/_mcontext.h" 2 3 4




struct __darwin_mcontext32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_float_state __fs;
};


struct __darwin_mcontext_avx32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_avx_state __fs;
};



struct __darwin_mcontext_avx512_32
{
 struct __darwin_i386_exception_state __es;
 struct __darwin_i386_thread_state __ss;
 struct __darwin_i386_avx512_state __fs;
};
# 97 "/usr/include/i386/_mcontext.h" 3 4
struct __darwin_mcontext64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_float_state64 __fs;
};


struct __darwin_mcontext_avx64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_avx_state64 __fs;
};



struct __darwin_mcontext_avx512_64
{
 struct __darwin_x86_exception_state64 __es;
 struct __darwin_x86_thread_state64 __ss;
 struct __darwin_x86_avx512_state64 __fs;
};
# 156 "/usr/include/i386/_mcontext.h" 3 4
typedef struct __darwin_mcontext64 *mcontext_t;
# 30 "/usr/include/machine/_mcontext.h" 2 3 4
# 147 "/usr/include/sys/signal.h" 2 3 4

# 1 "/usr/include/sys/_pthread/_pthread_attr_t.h" 1 3 4
# 31 "/usr/include/sys/_pthread/_pthread_attr_t.h" 3 4
typedef __darwin_pthread_attr_t pthread_attr_t;
# 149 "/usr/include/sys/signal.h" 2 3 4

# 1 "/usr/include/sys/_types/_sigaltstack.h" 1 3 4
# 42 "/usr/include/sys/_types/_sigaltstack.h" 3 4
struct __darwin_sigaltstack
{
 void *ss_sp;
 __darwin_size_t ss_size;
 int ss_flags;
};
typedef struct __darwin_sigaltstack stack_t;
# 151 "/usr/include/sys/signal.h" 2 3 4
# 1 "/usr/include/sys/_types/_ucontext.h" 1 3 4
# 39 "/usr/include/sys/_types/_ucontext.h" 3 4
# 1 "/usr/include/machine/_mcontext.h" 1 3 4
# 40 "/usr/include/sys/_types/_ucontext.h" 2 3 4


struct __darwin_ucontext
{
 int uc_onstack;
 __darwin_sigset_t uc_sigmask;
 struct __darwin_sigaltstack uc_stack;
 struct __darwin_ucontext *uc_link;
 __darwin_size_t uc_mcsize;
 struct __darwin_mcontext64 *uc_mcontext;



};


typedef struct __darwin_ucontext ucontext_t;
# 152 "/usr/include/sys/signal.h" 2 3 4


# 1 "/usr/include/sys/_types/_sigset_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_sigset_t.h" 3 4
typedef __darwin_sigset_t sigset_t;
# 155 "/usr/include/sys/signal.h" 2 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 156 "/usr/include/sys/signal.h" 2 3 4
# 1 "/usr/include/sys/_types/_uid_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_uid_t.h" 3 4
typedef __darwin_uid_t uid_t;
# 157 "/usr/include/sys/signal.h" 2 3 4

union sigval {

 int sival_int;
 void *sival_ptr;
};





struct sigevent {
 int sigev_notify;
 int sigev_signo;
 union sigval sigev_value;
 void (*sigev_notify_function)(union sigval);
 pthread_attr_t *sigev_notify_attributes;
};


typedef struct __siginfo {
 int si_signo;
 int si_errno;
 int si_code;
 pid_t si_pid;
 uid_t si_uid;
 int si_status;
 void *si_addr;
 union sigval si_value;
 long si_band;
 unsigned long __pad[7];
} siginfo_t;
# 269 "/usr/include/sys/signal.h" 3 4
union __sigaction_u {
 void (*__sa_handler)(int);
 void (*__sa_sigaction)(int, struct __siginfo *,
         void *);
};


struct __sigaction {
 union __sigaction_u __sigaction_u;
 void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
 sigset_t sa_mask;
 int sa_flags;
};




struct sigaction {
 union __sigaction_u __sigaction_u;
 sigset_t sa_mask;
 int sa_flags;
};
# 331 "/usr/include/sys/signal.h" 3 4
typedef void (*sig_t)(int);
# 348 "/usr/include/sys/signal.h" 3 4
struct sigvec {
 void (*sv_handler)(int);
 int sv_mask;
 int sv_flags;
};
# 367 "/usr/include/sys/signal.h" 3 4
struct sigstack {
 char *ss_sp;
 int ss_onstack;
};
# 389 "/usr/include/sys/signal.h" 3 4
extern "C" {
void (*signal(int, void (*)(int)))(int);
}
# 110 "/usr/include/sys/wait.h" 2 3 4
# 1 "/usr/include/sys/resource.h" 1 3 4
# 72 "/usr/include/sys/resource.h" 3 4
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdint.h" 1 3 4
# 106 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdint.h" 3
# 119 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdint.h" 3
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/include/stdint.h" 1 3 4
# 63 "/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 23 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/_types/_uint8_t.h" 1 3 4
# 31 "/usr/include/_types/_uint8_t.h" 3 4
typedef unsigned char uint8_t;
# 24 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uint16_t.h" 1 3 4
# 31 "/usr/include/_types/_uint16_t.h" 3 4
typedef unsigned short uint16_t;
# 25 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uint32_t.h" 1 3 4
# 31 "/usr/include/_types/_uint32_t.h" 3 4
typedef unsigned int uint32_t;
# 26 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uint64_t.h" 1 3 4
# 31 "/usr/include/_types/_uint64_t.h" 3 4
typedef unsigned long long uint64_t;
# 27 "/usr/include/stdint.h" 2 3 4


typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;



typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
# 58 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/_types/_intmax_t.h" 1 3 4
# 32 "/usr/include/_types/_intmax_t.h" 3 4
typedef long int intmax_t;
# 59 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/_types/_uintmax_t.h" 1 3 4
# 32 "/usr/include/_types/_uintmax_t.h" 3 4
typedef long unsigned int uintmax_t;
# 60 "/usr/include/stdint.h" 2 3 4
# 64 "/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/include/stdint.h" 2 3 4
# 120 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdint.h" 2 3
# 73 "/usr/include/sys/resource.h" 2 3 4







# 1 "/usr/include/sys/_types/_timeval.h" 1 3 4
# 34 "/usr/include/sys/_types/_timeval.h" 3 4
struct timeval
{
 __darwin_time_t tv_sec;
 __darwin_suseconds_t tv_usec;
};
# 81 "/usr/include/sys/resource.h" 2 3 4








typedef __uint64_t rlim_t;
# 152 "/usr/include/sys/resource.h" 3 4
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
# 163 "/usr/include/sys/resource.h" 3 4
 long ru_maxrss;

 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;


};
# 193 "/usr/include/sys/resource.h" 3 4
typedef void *rusage_info_t;

struct rusage_info_v0 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
};

struct rusage_info_v1 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
};

struct rusage_info_v2 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
};

struct rusage_info_v3 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
};

struct rusage_info_v4 {
 uint8_t ri_uuid[16];
 uint64_t ri_user_time;
 uint64_t ri_system_time;
 uint64_t ri_pkg_idle_wkups;
 uint64_t ri_interrupt_wkups;
 uint64_t ri_pageins;
 uint64_t ri_wired_size;
 uint64_t ri_resident_size;
 uint64_t ri_phys_footprint;
 uint64_t ri_proc_start_abstime;
 uint64_t ri_proc_exit_abstime;
 uint64_t ri_child_user_time;
 uint64_t ri_child_system_time;
 uint64_t ri_child_pkg_idle_wkups;
 uint64_t ri_child_interrupt_wkups;
 uint64_t ri_child_pageins;
 uint64_t ri_child_elapsed_abstime;
 uint64_t ri_diskio_bytesread;
 uint64_t ri_diskio_byteswritten;
 uint64_t ri_cpu_time_qos_default;
 uint64_t ri_cpu_time_qos_maintenance;
 uint64_t ri_cpu_time_qos_background;
 uint64_t ri_cpu_time_qos_utility;
 uint64_t ri_cpu_time_qos_legacy;
 uint64_t ri_cpu_time_qos_user_initiated;
 uint64_t ri_cpu_time_qos_user_interactive;
 uint64_t ri_billed_system_time;
 uint64_t ri_serviced_system_time;
 uint64_t ri_logical_writes;
 uint64_t ri_lifetime_max_phys_footprint;
 uint64_t ri_instructions;
 uint64_t ri_cycles;
 uint64_t ri_billed_energy;
 uint64_t ri_serviced_energy;

 uint64_t ri_unused[2];
};

typedef struct rusage_info_v4 rusage_info_current;
# 365 "/usr/include/sys/resource.h" 3 4
struct rlimit {
 rlim_t rlim_cur;
 rlim_t rlim_max;
};
# 393 "/usr/include/sys/resource.h" 3 4
struct proc_rlimit_control_wakeupmon {
 uint32_t wm_flags;
 int32_t wm_rate;
};
# 424 "/usr/include/sys/resource.h" 3 4
extern "C" {
int getpriority(int, id_t);

int getiopolicy_np(int, int) __attribute__((availability(macosx,introduced=10.5)));

int getrlimit(int, struct rlimit *) __asm("_" "getrlimit" );
int getrusage(int, struct rusage *);
int setpriority(int, id_t, int);

int setiopolicy_np(int, int, int) __attribute__((availability(macosx,introduced=10.5)));

int setrlimit(int, const struct rlimit *) __asm("_" "setrlimit" );
}
# 111 "/usr/include/sys/wait.h" 2 3 4
# 186 "/usr/include/sys/wait.h" 3 4
# 1 "/usr/include/machine/endian.h" 1 3 4
# 35 "/usr/include/machine/endian.h" 3 4
# 1 "/usr/include/i386/endian.h" 1 3 4
# 99 "/usr/include/i386/endian.h" 3 4
# 1 "/usr/include/sys/_endian.h" 1 3 4
# 130 "/usr/include/sys/_endian.h" 3 4
# 1 "/usr/include/libkern/_OSByteOrder.h" 1 3 4
# 66 "/usr/include/libkern/_OSByteOrder.h" 3 4
# 1 "/usr/include/libkern/i386/_OSByteOrder.h" 1 3 4
# 44 "/usr/include/libkern/i386/_OSByteOrder.h" 3 4
static inline
__uint16_t
_OSSwapInt16(
    __uint16_t _data
)
{
    return ((__uint16_t)((_data << 8) | (_data >> 8)));
}

static inline
__uint32_t
_OSSwapInt32(
    __uint32_t _data
)
{

    return __builtin_bswap32(_data);




}


static inline
__uint64_t
_OSSwapInt64(
    __uint64_t _data
)
{
    return __builtin_bswap64(_data);
}
# 67 "/usr/include/libkern/_OSByteOrder.h" 2 3 4
# 131 "/usr/include/sys/_endian.h" 2 3 4
# 100 "/usr/include/i386/endian.h" 2 3 4
# 36 "/usr/include/machine/endian.h" 2 3 4
# 187 "/usr/include/sys/wait.h" 2 3 4







union wait {
 int w_status;



 struct {

  unsigned int w_Termsig:7,
    w_Coredump:1,
    w_Retcode:8,
    w_Filler:16;







 } w_T;





 struct {

  unsigned int w_Stopval:8,
    w_Stopsig:8,
    w_Filler:16;






 } w_S;
};
# 247 "/usr/include/sys/wait.h" 3 4
extern "C" {
pid_t wait(int *) __asm("_" "wait" );
pid_t waitpid(pid_t, int *, int) __asm("_" "waitpid" );

int waitid(idtype_t, id_t, siginfo_t *, int) __asm("_" "waitid" );


pid_t wait3(int *, int, struct rusage *);
pid_t wait4(pid_t, int *, int, struct rusage *);

}
# 66 "/usr/include/stdlib.h" 2 3 4

# 1 "/usr/include/alloca.h" 1 3 4
# 29 "/usr/include/alloca.h" 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 30 "/usr/include/alloca.h" 2 3 4

extern "C" {
void *alloca(size_t);
}
# 68 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 74 "/usr/include/stdlib.h" 2 3 4


# 1 "/usr/include/sys/_types/_ct_rune_t.h" 1 3 4
# 32 "/usr/include/sys/_types/_ct_rune_t.h" 3 4
typedef __darwin_ct_rune_t ct_rune_t;
# 77 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/sys/_types/_rune_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_rune_t.h" 3 4
typedef __darwin_rune_t rune_t;
# 78 "/usr/include/stdlib.h" 2 3 4


# 1 "/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 81 "/usr/include/stdlib.h" 2 3 4

typedef struct {
 int quot;
 int rem;
} div_t;

typedef struct {
 long quot;
 long rem;
} ldiv_t;


typedef struct {
 long long quot;
 long long rem;
} lldiv_t;



# 1 "/usr/include/sys/_types/_null.h" 1 3 4
# 100 "/usr/include/stdlib.h" 2 3 4
# 117 "/usr/include/stdlib.h" 3 4
extern int __mb_cur_max;
# 135 "/usr/include/stdlib.h" 3 4
extern "C" {
void abort(void) __attribute__((noreturn));
int abs(int) __attribute__((const));
int atexit(void (* _Nonnull)(void));
double atof(const char *);
int atoi(const char *);
long atol(const char *);

long long
  atoll(const char *);

void *bsearch(const void *__key, const void *__base, size_t __nel,
     size_t __width, int (* _Nonnull __compar)(const void *, const void *));
void *calloc(size_t __count, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1,2)));
div_t div(int, int) __attribute__((const));
void exit(int) __attribute__((noreturn));
void free(void *);
char *getenv(const char *);
long labs(long) __attribute__((const));
ldiv_t ldiv(long, long) __attribute__((const));

long long
  llabs(long long);
lldiv_t lldiv(long long, long long);

void *malloc(size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1)));
int mblen(const char *__s, size_t __n);
size_t mbstowcs(wchar_t * , const char * , size_t);
int mbtowc(wchar_t * , const char * , size_t);
int posix_memalign(void **__memptr, size_t __alignment, size_t __size) __attribute__((availability(macosx,introduced=10.6)));
void qsort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));
int rand(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
void *realloc(void *__ptr, size_t __size) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));
void srand(unsigned) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
double strtod(const char *, char **) __asm("_" "strtod" );
float strtof(const char *, char **) __asm("_" "strtof" );
long strtol(const char *__str, char **__endptr, int __base);
long double
  strtold(const char *, char **);

long long
  strtoll(const char *__str, char **__endptr, int __base);

unsigned long
  strtoul(const char *__str, char **__endptr, int __base);

unsigned long long
  strtoull(const char *__str, char **__endptr, int __base);
# 192 "/usr/include/stdlib.h" 3 4
__attribute__((__availability__(swift, unavailable, message="Use posix_spawn APIs or NSTask instead.")))
__attribute__((availability(macos,introduced=10.0))) __attribute__((availability(ios,unavailable)))
__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
int system(const char *) __asm("_" "system" );



size_t wcstombs(char * , const wchar_t * , size_t);
int wctomb(char *, wchar_t);


void _Exit(int) __attribute__((noreturn));
long a64l(const char *);
double drand48(void);
char *ecvt(double, int, int *, int *);
double erand48(unsigned short[3]);
char *fcvt(double, int, int *, int *);
char *gcvt(double, int, char *);
int getsubopt(char **, char * const *, char **);
int grantpt(int);

char *initstate(unsigned, char *, size_t);



long jrand48(unsigned short[3]) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
char *l64a(long);
void lcong48(unsigned short[7]);
long lrand48(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
char *mktemp(char *);
int mkstemp(char *);
long mrand48(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
long nrand48(unsigned short[3]) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
int posix_openpt(int);
char *ptsname(int);


int ptsname_r(int fildes, char *buffer, size_t buflen) __attribute__((availability(macos,introduced=10.13.4))) __attribute__((availability(ios,introduced=11.3))) __attribute__((availability(tvos,introduced=11.3))) __attribute__((availability(watchos,introduced=4.3)));


int putenv(char *) __asm("_" "putenv" );
long random(void) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));
int rand_r(unsigned *) __attribute__((__availability__(swift, unavailable, message="Use arc4random instead.")));

char *realpath(const char * , char * ) __asm("_" "realpath" "$DARWIN_EXTSN");



unsigned short
 *seed48(unsigned short[3]);
int setenv(const char * __name, const char * __value, int __overwrite) __asm("_" "setenv" );

void setkey(const char *) __asm("_" "setkey" );



char *setstate(const char *);
void srand48(long);

void srandom(unsigned);



int unlockpt(int);

int unsetenv(const char *) __asm("_" "unsetenv" );
# 266 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/sys/_types/_dev_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_dev_t.h" 3 4
typedef __darwin_dev_t dev_t;
# 267 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/sys/_types/_mode_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_mode_t.h" 3 4
typedef __darwin_mode_t mode_t;
# 268 "/usr/include/stdlib.h" 2 3 4


uint32_t arc4random(void);
void arc4random_addrandom(unsigned char * , int )
    __attribute__((availability(macosx,introduced=10.0))) __attribute__((availability(macosx,deprecated=10.12,message="use arc4random_stir")))
    __attribute__((availability(ios,introduced=2.0))) __attribute__((availability(ios,deprecated=10.0,message="use arc4random_stir")))
    __attribute__((availability(tvos,introduced=2.0))) __attribute__((availability(tvos,deprecated=10.0,message="use arc4random_stir")))
    __attribute__((availability(watchos,introduced=1.0))) __attribute__((availability(watchos,deprecated=3.0,message="use arc4random_stir")));
void arc4random_buf(void * __buf, size_t __nbytes) __attribute__((availability(macosx,introduced=10.7)));
void arc4random_stir(void);
uint32_t
  arc4random_uniform(uint32_t __upper_bound) __attribute__((availability(macosx,introduced=10.7)));

int atexit_b(void (^ _Nonnull)(void)) __attribute__((availability(macosx,introduced=10.6)));
void *bsearch_b(const void *__key, const void *__base, size_t __nel,
     size_t __width, int (^ _Nonnull __compar)(const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));



char *cgetcap(char *, const char *, int);
int cgetclose(void);
int cgetent(char **, char **, const char *);
int cgetfirst(char **, char **);
int cgetmatch(const char *, const char *);
int cgetnext(char **, char **);
int cgetnum(char *, const char *, long *);
int cgetset(const char *);
int cgetstr(char *, const char *, char **);
int cgetustr(char *, const char *, char **);

int daemon(int, int) __asm("_" "daemon" "$1050") __attribute__((availability(macosx,introduced=10.0,deprecated=10.5,message="Use posix_spawn APIs instead."))) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
char *devname(dev_t, mode_t);
char *devname_r(dev_t, mode_t, char *buf, int len);
char *getbsize(int *, long *);
int getloadavg(double [], int);
const char
 *getprogname(void);

int heapsort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));

int heapsort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));

int mergesort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *));

int mergesort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));

void psort(void *__base, size_t __nel, size_t __width,
     int (* _Nonnull __compar)(const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));

void psort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));

void psort_r(void *__base, size_t __nel, size_t __width, void *,
     int (* _Nonnull __compar)(void *, const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));

void qsort_b(void *__base, size_t __nel, size_t __width,
     int (^ _Nonnull __compar)(const void *, const void *)) __attribute__((availability(macosx,introduced=10.6)));

void qsort_r(void *__base, size_t __nel, size_t __width, void *,
     int (* _Nonnull __compar)(void *, const void *, const void *));
int radixsort(const unsigned char **__base, int __nel, const unsigned char *__table,
     unsigned __endbyte);
void setprogname(const char *);
int sradixsort(const unsigned char **__base, int __nel, const unsigned char *__table,
     unsigned __endbyte);
void sranddev(void);
void srandomdev(void);
void *reallocf(void *__ptr, size_t __size) __attribute__((alloc_size(2)));

long long
  strtoq(const char *__str, char **__endptr, int __base);
unsigned long long
  strtouq(const char *__str, char **__endptr, int __base);

extern char *suboptarg;
void *valloc(size_t) __attribute__((alloc_size(1)));






}
# 95 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdlib.h" 2 3



extern "C++" {
# 111 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdlib.h" 3
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long abs( long __x) throw() {return labs(__x);}

inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long long abs(long long __x) throw() {return llabs(__x);}


inline __attribute__ ((__visibility__("hidden"), __always_inline__)) ldiv_t div( long __x, long __y) throw() {return ldiv(__x, __y);}

inline __attribute__ ((__visibility__("hidden"), __always_inline__)) lldiv_t div(long long __x, long long __y) throw() {return lldiv(__x, __y);}



}
# 45 "/usr/include/assert.h" 2 3 4
# 75 "/usr/include/assert.h" 3 4
extern "C" {
void __assert_rtn(const char *, const char *, int, const char *) __attribute__((noreturn)) __attribute__((__disable_tail_calls__));



}
# 15 "/usr/local/include/wx-3.0/wx/debug.h" 2


# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/limits.h" 1 3
# 45 "/Library/Developer/CommandLineTools/usr/include/c++/v1/limits.h" 3
# 58 "/Library/Developer/CommandLineTools/usr/include/c++/v1/limits.h" 3
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/include/limits.h" 1 3 4
# 37 "/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 64 "/usr/include/limits.h" 3 4
# 1 "/usr/include/machine/limits.h" 1 3 4





# 1 "/usr/include/i386/limits.h" 1 3 4
# 40 "/usr/include/i386/limits.h" 3 4
# 1 "/usr/include/i386/_limits.h" 1 3 4
# 41 "/usr/include/i386/limits.h" 2 3 4
# 7 "/usr/include/machine/limits.h" 2 3 4
# 65 "/usr/include/limits.h" 2 3 4
# 1 "/usr/include/sys/syslimits.h" 1 3 4
# 66 "/usr/include/limits.h" 2 3 4
# 38 "/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/include/limits.h" 2 3 4
# 59 "/Library/Developer/CommandLineTools/usr/include/c++/v1/limits.h" 2 3
# 18 "/usr/local/include/wx-3.0/wx/debug.h" 2

# 1 "/usr/local/include/wx-3.0/wx/chartype.h" 1
# 79 "/usr/local/include/wx-3.0/wx/chartype.h"
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdlib.h" 1 3
# 80 "/usr/local/include/wx-3.0/wx/chartype.h" 2
# 135 "/usr/local/include/wx-3.0/wx/chartype.h"
    typedef char wxChar;
    typedef signed char wxSChar;
    typedef unsigned char wxUChar;
# 210 "/usr/local/include/wx-3.0/wx/chartype.h"
    typedef char wxStringCharType;
# 220 "/usr/local/include/wx-3.0/wx/chartype.h"
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/ctype.h" 1 3
# 37 "/Library/Developer/CommandLineTools/usr/include/c++/v1/ctype.h" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 69 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/_ctype.h" 1 3 4
# 70 "/usr/include/_ctype.h" 3 4
# 1 "/usr/include/runetype.h" 1 3 4
# 46 "/usr/include/runetype.h" 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 47 "/usr/include/runetype.h" 2 3 4


# 1 "/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 50 "/usr/include/runetype.h" 2 3 4
# 1 "/usr/include/sys/_types/_wint_t.h" 1 3 4
# 32 "/usr/include/sys/_types/_wint_t.h" 3 4
typedef __darwin_wint_t wint_t;
# 51 "/usr/include/runetype.h" 2 3 4
# 60 "/usr/include/runetype.h" 3 4
typedef struct {
 __darwin_rune_t __min;
 __darwin_rune_t __max;
 __darwin_rune_t __map;
 __uint32_t *__types;
} _RuneEntry;

typedef struct {
 int __nranges;
 _RuneEntry *__ranges;
} _RuneRange;

typedef struct {
 char __name[14];
 __uint32_t __mask;
} _RuneCharClass;

typedef struct {
 char __magic[8];
 char __encoding[32];

 __darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, char const **);
 int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **);
 __darwin_rune_t __invalid_rune;

 __uint32_t __runetype[(1 <<8 )];
 __darwin_rune_t __maplower[(1 <<8 )];
 __darwin_rune_t __mapupper[(1 <<8 )];






 _RuneRange __runetype_ext;
 _RuneRange __maplower_ext;
 _RuneRange __mapupper_ext;

 void *__variable;
 int __variable_len;




 int __ncharclasses;
 _RuneCharClass *__charclasses;
} _RuneLocale;



extern "C" {
extern _RuneLocale _DefaultRuneLocale;
extern _RuneLocale *_CurrentRuneLocale;
}
# 71 "/usr/include/_ctype.h" 2 3 4
# 128 "/usr/include/_ctype.h" 3 4
extern "C" {
unsigned long ___runetype(__darwin_ct_rune_t);
__darwin_ct_rune_t ___tolower(__darwin_ct_rune_t);
__darwin_ct_rune_t ___toupper(__darwin_ct_rune_t);
}

inline int
isascii(int _c)
{
 return ((_c & ~0x7F) == 0);
}
# 147 "/usr/include/_ctype.h" 3 4
extern "C" {
int __maskrune(__darwin_ct_rune_t, unsigned long);
}


inline int
__istype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return (isascii(_c) ? !!(_DefaultRuneLocale.__runetype[_c] & _f)
  : !!__maskrune(_c, _f));

}

inline __darwin_ct_rune_t
__isctype(__darwin_ct_rune_t _c, unsigned long _f)
{



 return (_c < 0 || _c >= (1 <<8 )) ? 0 :
  !!(_DefaultRuneLocale.__runetype[_c] & _f);

}
# 187 "/usr/include/_ctype.h" 3 4
extern "C" {
__darwin_ct_rune_t __toupper(__darwin_ct_rune_t);
__darwin_ct_rune_t __tolower(__darwin_ct_rune_t);
}


inline int
__wcwidth(__darwin_ct_rune_t _c)
{
 unsigned int _x;

 if (_c == 0)
  return (0);
 _x = (unsigned int)__maskrune(_c, 0xe0000000L|0x00040000L);
 if ((_x & 0xe0000000L) != 0)
  return ((_x & 0xe0000000L) >> 30);
 return ((_x & 0x00040000L) != 0 ? 1 : -1);
}






inline int
isalnum(int _c)
{
 return (__istype(_c, 0x00000100L|0x00000400L));
}

inline int
isalpha(int _c)
{
 return (__istype(_c, 0x00000100L));
}

inline int
isblank(int _c)
{
 return (__istype(_c, 0x00020000L));
}

inline int
iscntrl(int _c)
{
 return (__istype(_c, 0x00000200L));
}


inline int
isdigit(int _c)
{
 return (__isctype(_c, 0x00000400L));
}

inline int
isgraph(int _c)
{
 return (__istype(_c, 0x00000800L));
}

inline int
islower(int _c)
{
 return (__istype(_c, 0x00001000L));
}

inline int
isprint(int _c)
{
 return (__istype(_c, 0x00040000L));
}

inline int
ispunct(int _c)
{
 return (__istype(_c, 0x00002000L));
}

inline int
isspace(int _c)
{
 return (__istype(_c, 0x00004000L));
}

inline int
isupper(int _c)
{
 return (__istype(_c, 0x00008000L));
}


inline int
isxdigit(int _c)
{
 return (__isctype(_c, 0x00010000L));
}

inline int
toascii(int _c)
{
 return (_c & 0x7F);
}

inline int
tolower(int _c)
{
        return (__tolower(_c));
}

inline int
toupper(int _c)
{
        return (__toupper(_c));
}


inline int
digittoint(int _c)
{
 return (__maskrune(_c, 0x0F));
}

inline int
ishexnumber(int _c)
{
 return (__istype(_c, 0x00010000L));
}

inline int
isideogram(int _c)
{
 return (__istype(_c, 0x00080000L));
}

inline int
isnumber(int _c)
{
 return (__istype(_c, 0x00000400L));
}

inline int
isphonogram(int _c)
{
 return (__istype(_c, 0x00200000L));
}

inline int
isrune(int _c)
{
 return (__istype(_c, 0xFFFFFFF0L));
}

inline int
isspecial(int _c)
{
 return (__istype(_c, 0x00100000L));
}
# 70 "/usr/include/ctype.h" 2 3 4
# 40 "/Library/Developer/CommandLineTools/usr/include/c++/v1/ctype.h" 2 3
# 221 "/usr/local/include/wx-3.0/wx/chartype.h" 2
# 20 "/usr/local/include/wx-3.0/wx/debug.h" 2



class wxString;
class wxCStrData;
# 78 "/usr/local/include/wx-3.0/wx/debug.h"
typedef void (*wxAssertHandler_t)(const wxString& file,
                                  int line,
                                  const wxString& func,
                                  const wxString& cond,
                                  const wxString& msg);





extern wxAssertHandler_t wxTheAssertHandler;
# 114 "/usr/local/include/wx-3.0/wx/debug.h"
inline wxAssertHandler_t wxSetAssertHandler(wxAssertHandler_t handler)
{
    const wxAssertHandler_t old = wxTheAssertHandler;
    wxTheAssertHandler = handler;
    return old;
}







extern void wxSetDefaultAssertHandler();
# 145 "/usr/local/include/wx-3.0/wx/debug.h"
inline void wxDisableAsserts() { wxSetAssertHandler(__null); }
# 201 "/usr/local/include/wx-3.0/wx/debug.h"
extern void wxOnAssert(const wxChar *file,
                                        int line,
                                        const char *func,
                                        const wxChar *cond,
                                        const wxChar *msg = __null);




extern void wxOnAssert(const wxString& file,
                                        int line,
                                        const wxString& func,
                                        const wxString& cond,
                                        const wxString& msg);

extern void wxOnAssert(const wxString& file,
                                        int line,
                                        const wxString& func,
                                        const wxString& cond);

extern void wxOnAssert(const char *file,
                                        int line,
                                        const char *func,
                                        const char *cond,
                                        const wxCStrData& msg);

extern void wxOnAssert(const char *file,
                                        int line,
                                        const char *func,
                                        const char *cond,
                                        const wxString& msg);
# 262 "/usr/local/include/wx-3.0/wx/debug.h"
        extern void wxTrap();





    extern bool wxTrapInAssert;
# 332 "/usr/local/include/wx-3.0/wx/debug.h"
extern void wxAbort();
# 469 "/usr/local/include/wx-3.0/wx/debug.h"
    inline bool wxIsDebuggerRunning() { return false; }
# 479 "/usr/local/include/wx-3.0/wx/debug.h"
extern bool wxAssertIsEqual(int x, int y);



extern const bool wxFalse;
# 735 "/usr/local/include/wx-3.0/wx/defs.h" 2


    template <typename T>
    inline void wxDELETE(T*& ptr)
    {
        typedef char TypeIsCompleteCheck[sizeof(T)] __attribute__ ((unused));

        if ( ptr != __null )
        {
            delete ptr;
            ptr = __null;
        }
    }


    template <typename T>
    inline void wxDELETEA(T*& ptr)
    {
        typedef char TypeIsCompleteCheck[sizeof(T)] __attribute__ ((unused));

        if ( ptr != __null )
        {
            delete [] ptr;
            ptr = __null;
        }
    }


    template <typename T>
    inline void wxSwap(T& first, T& second)
    {
        T tmp(first);
        first = second;
        second = tmp;
    }
# 900 "/usr/local/include/wx-3.0/wx/defs.h"
        template <class T>
            inline void wxUnusedVar(const T& ) { }
# 927 "/usr/local/include/wx-3.0/wx/defs.h"
typedef int wxCoord;

enum { wxDefaultCoord = -1 };
# 943 "/usr/local/include/wx-3.0/wx/defs.h"
typedef signed char wxInt8;
typedef unsigned char wxUint8;
typedef wxUint8 wxByte;
# 957 "/usr/local/include/wx-3.0/wx/defs.h"
typedef signed short wxInt16;
typedef unsigned short wxUint16;

typedef wxUint16 wxWord;
# 1062 "/usr/local/include/wx-3.0/wx/defs.h"
        struct wxAssert_1062 { unsigned int IntMustBeExactly4Bytes: sizeof(int) == 4; };
        struct wxAssert_1063 { unsigned int SizeTMustBeExactly4Bytes: sizeof(size_t) == 4; };
        struct wxAssert_1064 { unsigned int PtrMustBeExactly4Bytes: sizeof(void *) == 4; };





        typedef int wxInt32;
        typedef unsigned int wxUint32;
# 1114 "/usr/local/include/wx-3.0/wx/defs.h"
typedef wxUint32 wxDword;
# 1204 "/usr/local/include/wx-3.0/wx/defs.h"
    typedef long long wxInt64;
    typedef unsigned long long wxUint64;
# 1259 "/usr/local/include/wx-3.0/wx/defs.h"
        typedef wxInt32 ssize_t;
# 1291 "/usr/local/include/wx-3.0/wx/defs.h"
    typedef long wxIntPtr;
    typedef unsigned long wxUIntPtr;
# 1313 "/usr/local/include/wx-3.0/wx/defs.h"
inline wxUIntPtr wxPtrToUInt(const void *p)
{
# 1332 "/usr/local/include/wx-3.0/wx/defs.h"
    return reinterpret_cast<wxUIntPtr>(p);




}

inline void *wxUIntToPtr(wxUIntPtr p)
{
# 1353 "/usr/local/include/wx-3.0/wx/defs.h"
    return reinterpret_cast<void *>(p);




}
# 1370 "/usr/local/include/wx-3.0/wx/defs.h"
typedef float wxFloat32;
typedef double wxFloat64;

typedef double wxDouble;
# 1420 "/usr/local/include/wx-3.0/wx/defs.h"
    typedef wxUint16 wxChar16;




    typedef wchar_t wxChar32;
# 1652 "/usr/local/include/wx-3.0/wx/defs.h"
enum wxGeometryCentre
{
    wxCENTRE = 0x0001,
    wxCENTER = wxCENTRE
};







enum wxOrientation
{

    wxHORIZONTAL = 0x0004,
    wxVERTICAL = 0x0008,

    wxBOTH = wxVERTICAL | wxHORIZONTAL,


    wxORIENTATION_MASK = wxBOTH
};

enum wxDirection
{
    wxLEFT = 0x0010,
    wxRIGHT = 0x0020,
    wxUP = 0x0040,
    wxDOWN = 0x0080,

    wxTOP = wxUP,
    wxBOTTOM = wxDOWN,

    wxNORTH = wxUP,
    wxSOUTH = wxDOWN,
    wxWEST = wxLEFT,
    wxEAST = wxRIGHT,

    wxALL = (wxUP | wxDOWN | wxRIGHT | wxLEFT),


    wxDIRECTION_MASK = wxALL
};

enum wxAlignment
{





    wxALIGN_INVALID = -1,

    wxALIGN_NOT = 0x0000,
    wxALIGN_CENTER_HORIZONTAL = 0x0100,
    wxALIGN_CENTRE_HORIZONTAL = wxALIGN_CENTER_HORIZONTAL,
    wxALIGN_LEFT = wxALIGN_NOT,
    wxALIGN_TOP = wxALIGN_NOT,
    wxALIGN_RIGHT = 0x0200,
    wxALIGN_BOTTOM = 0x0400,
    wxALIGN_CENTER_VERTICAL = 0x0800,
    wxALIGN_CENTRE_VERTICAL = wxALIGN_CENTER_VERTICAL,

    wxALIGN_CENTER = (wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL),
    wxALIGN_CENTRE = wxALIGN_CENTER,


    wxALIGN_MASK = 0x0f00
};


enum wxSizerFlagBits
{
# 1735 "/usr/local/include/wx-3.0/wx/defs.h"
    wxFIXED_MINSIZE = 0x8000,
    wxRESERVE_SPACE_EVEN_IF_HIDDEN = 0x0002,


    wxSIZER_FLAG_BITS_MASK = 0x8002
};

enum wxStretch
{
    wxSTRETCH_NOT = 0x0000,
    wxSHRINK = 0x1000,
    wxGROW = 0x2000,
    wxEXPAND = wxGROW,
    wxSHAPED = 0x4000,
    wxTILE = wxSHAPED | wxFIXED_MINSIZE,


    wxSTRETCH_MASK = 0x7000
};


enum wxBorder
{


    wxBORDER_DEFAULT = 0,

    wxBORDER_NONE = 0x00200000,
    wxBORDER_STATIC = 0x01000000,
    wxBORDER_SIMPLE = 0x02000000,
    wxBORDER_RAISED = 0x04000000,
    wxBORDER_SUNKEN = 0x08000000,
    wxBORDER_DOUBLE = 0x10000000,
    wxBORDER_THEME = wxBORDER_DOUBLE,


    wxBORDER_MASK = 0x1f200000
};
# 2118 "/usr/local/include/wx-3.0/wx/defs.h"
enum wxBackgroundStyle
{





    wxBG_STYLE_ERASE,





    wxBG_STYLE_SYSTEM,






    wxBG_STYLE_PAINT,





    wxBG_STYLE_TRANSPARENT,


    wxBG_STYLE_COLOUR,





    wxBG_STYLE_CUSTOM = wxBG_STYLE_PAINT
};




enum wxKeyType
{
    wxKEY_NONE,
    wxKEY_INTEGER,
    wxKEY_STRING
};






enum wxStandardID
{
# 2187 "/usr/local/include/wx-3.0/wx/defs.h"
    wxID_AUTO_LOWEST = -1000000,
    wxID_AUTO_HIGHEST = -2000,



    wxID_NONE = -3,


    wxID_SEPARATOR = -2,



    wxID_ANY = -1,



    wxID_LOWEST = 4999,

    wxID_OPEN,
    wxID_CLOSE,
    wxID_NEW,
    wxID_SAVE,
    wxID_SAVEAS,
    wxID_REVERT,
    wxID_EXIT,
    wxID_UNDO,
    wxID_REDO,
    wxID_HELP,
    wxID_PRINT,
    wxID_PRINT_SETUP,
    wxID_PAGE_SETUP,
    wxID_PREVIEW,
    wxID_ABOUT,
    wxID_HELP_CONTENTS,
    wxID_HELP_INDEX,
    wxID_HELP_SEARCH,
    wxID_HELP_COMMANDS,
    wxID_HELP_PROCEDURES,
    wxID_HELP_CONTEXT,
    wxID_CLOSE_ALL,
    wxID_PREFERENCES,

    wxID_EDIT = 5030,
    wxID_CUT,
    wxID_COPY,
    wxID_PASTE,
    wxID_CLEAR,
    wxID_FIND,
    wxID_DUPLICATE,
    wxID_SELECTALL,
    wxID_DELETE,
    wxID_REPLACE,
    wxID_REPLACE_ALL,
    wxID_PROPERTIES,

    wxID_VIEW_DETAILS,
    wxID_VIEW_LARGEICONS,
    wxID_VIEW_SMALLICONS,
    wxID_VIEW_LIST,
    wxID_VIEW_SORTDATE,
    wxID_VIEW_SORTNAME,
    wxID_VIEW_SORTSIZE,
    wxID_VIEW_SORTTYPE,

    wxID_FILE = 5050,
    wxID_FILE1,
    wxID_FILE2,
    wxID_FILE3,
    wxID_FILE4,
    wxID_FILE5,
    wxID_FILE6,
    wxID_FILE7,
    wxID_FILE8,
    wxID_FILE9,


    wxID_OK = 5100,
    wxID_CANCEL,
    wxID_APPLY,
    wxID_YES,
    wxID_NO,
    wxID_STATIC,
    wxID_FORWARD,
    wxID_BACKWARD,
    wxID_DEFAULT,
    wxID_MORE,
    wxID_SETUP,
    wxID_RESET,
    wxID_CONTEXT_HELP,
    wxID_YESTOALL,
    wxID_NOTOALL,
    wxID_ABORT,
    wxID_RETRY,
    wxID_IGNORE,
    wxID_ADD,
    wxID_REMOVE,

    wxID_UP,
    wxID_DOWN,
    wxID_HOME,
    wxID_REFRESH,
    wxID_STOP,
    wxID_INDEX,

    wxID_BOLD,
    wxID_ITALIC,
    wxID_JUSTIFY_CENTER,
    wxID_JUSTIFY_FILL,
    wxID_JUSTIFY_RIGHT,
    wxID_JUSTIFY_LEFT,
    wxID_UNDERLINE,
    wxID_INDENT,
    wxID_UNINDENT,
    wxID_ZOOM_100,
    wxID_ZOOM_FIT,
    wxID_ZOOM_IN,
    wxID_ZOOM_OUT,
    wxID_UNDELETE,
    wxID_REVERT_TO_SAVED,
    wxID_CDROM,
    wxID_CONVERT,
    wxID_EXECUTE,
    wxID_FLOPPY,
    wxID_HARDDISK,
    wxID_BOTTOM,
    wxID_FIRST,
    wxID_LAST,
    wxID_TOP,
    wxID_INFO,
    wxID_JUMP_TO,
    wxID_NETWORK,
    wxID_SELECT_COLOR,
    wxID_SELECT_FONT,
    wxID_SORT_ASCENDING,
    wxID_SORT_DESCENDING,
    wxID_SPELL_CHECK,
    wxID_STRIKETHROUGH,


    wxID_SYSTEM_MENU = 5200,
    wxID_CLOSE_FRAME,
    wxID_MOVE_FRAME,
    wxID_RESIZE_FRAME,
    wxID_MAXIMIZE_FRAME,
    wxID_ICONIZE_FRAME,
    wxID_RESTORE_FRAME,


    wxID_MDI_WINDOW_FIRST = 5230,
    wxID_MDI_WINDOW_CASCADE = wxID_MDI_WINDOW_FIRST,
    wxID_MDI_WINDOW_TILE_HORZ,
    wxID_MDI_WINDOW_TILE_VERT,
    wxID_MDI_WINDOW_ARRANGE_ICONS,
    wxID_MDI_WINDOW_PREV,
    wxID_MDI_WINDOW_NEXT,
    wxID_MDI_WINDOW_LAST = wxID_MDI_WINDOW_NEXT,


    wxID_OSX_MENU_FIRST = 5250,
    wxID_OSX_HIDE = wxID_OSX_MENU_FIRST,
    wxID_OSX_HIDEOTHERS,
    wxID_OSX_SHOWALL,

    wxID_OSX_SERVICES,
    wxID_OSX_MENU_LAST = wxID_OSX_SERVICES,





    wxID_FILEDLGG = 5900,


    wxID_FILECTRL = 5950,

    wxID_HIGHEST = 5999
};
# 2383 "/usr/local/include/wx-3.0/wx/defs.h"
enum wxItemKind
{
    wxITEM_SEPARATOR = -1,
    wxITEM_NORMAL,
    wxITEM_CHECK,
    wxITEM_RADIO,
    wxITEM_DROPDOWN,
    wxITEM_MAX
};





enum wxCheckBoxState
{
    wxCHK_UNCHECKED,
    wxCHK_CHECKED,
    wxCHK_UNDETERMINED
};



enum wxHitTest
{
    wxHT_NOWHERE,


    wxHT_SCROLLBAR_FIRST = wxHT_NOWHERE,
    wxHT_SCROLLBAR_ARROW_LINE_1,
    wxHT_SCROLLBAR_ARROW_LINE_2,
    wxHT_SCROLLBAR_ARROW_PAGE_1,
    wxHT_SCROLLBAR_ARROW_PAGE_2,
    wxHT_SCROLLBAR_THUMB,
    wxHT_SCROLLBAR_BAR_1,
    wxHT_SCROLLBAR_BAR_2,
    wxHT_SCROLLBAR_LAST,


    wxHT_WINDOW_OUTSIDE,
    wxHT_WINDOW_INSIDE,
    wxHT_WINDOW_VERT_SCROLLBAR,
    wxHT_WINDOW_HORZ_SCROLLBAR,
    wxHT_WINDOW_CORNER,

    wxHT_MAX
};
# 2461 "/usr/local/include/wx-3.0/wx/defs.h"
enum wxHatchStyle
{
    wxHATCHSTYLE_INVALID = -1,





    wxHATCHSTYLE_FIRST = 111,
    wxHATCHSTYLE_BDIAGONAL = wxHATCHSTYLE_FIRST,
    wxHATCHSTYLE_CROSSDIAG,
    wxHATCHSTYLE_FDIAGONAL,
    wxHATCHSTYLE_CROSS,
    wxHATCHSTYLE_HORIZONTAL,
    wxHATCHSTYLE_VERTICAL,
    wxHATCHSTYLE_LAST = wxHATCHSTYLE_VERTICAL
};
# 2488 "/usr/local/include/wx-3.0/wx/defs.h"
enum wxDeprecatedGUIConstants
{

    wxDEFAULT = 70,
    wxDECORATIVE,
    wxROMAN,
    wxSCRIPT,
    wxSWISS,
    wxMODERN,
    wxTELETYPE,


    wxVARIABLE = 80,
    wxFIXED,

    wxNORMAL = 90,
    wxLIGHT,
    wxBOLD,

    wxITALIC,
    wxSLANT,


    wxSOLID = 100,
    wxDOT,
    wxLONG_DASH,
    wxSHORT_DASH,
    wxDOT_DASH,
    wxUSER_DASH,

    wxTRANSPARENT,



    wxSTIPPLE_MASK_OPAQUE,
    wxSTIPPLE_MASK,

    wxSTIPPLE = 110,

    wxBDIAGONAL_HATCH = wxHATCHSTYLE_BDIAGONAL,
    wxCROSSDIAG_HATCH = wxHATCHSTYLE_CROSSDIAG,
    wxFDIAGONAL_HATCH = wxHATCHSTYLE_FDIAGONAL,
    wxCROSS_HATCH = wxHATCHSTYLE_CROSS,
    wxHORIZONTAL_HATCH = wxHATCHSTYLE_HORIZONTAL,
    wxVERTICAL_HATCH = wxHATCHSTYLE_VERTICAL,
    wxFIRST_HATCH = wxHATCHSTYLE_FIRST,
    wxLAST_HATCH = wxHATCHSTYLE_LAST
};



enum
{
    wxTOOL_TOP = 1,
    wxTOOL_BOTTOM,
    wxTOOL_LEFT,
    wxTOOL_RIGHT
};



enum wxDataFormatId
{
    wxDF_INVALID = 0,
    wxDF_TEXT = 1,
    wxDF_BITMAP = 2,
    wxDF_METAFILE = 3,
    wxDF_SYLK = 4,
    wxDF_DIF = 5,
    wxDF_TIFF = 6,
    wxDF_OEMTEXT = 7,
    wxDF_DIB = 8,
    wxDF_PALETTE = 9,
    wxDF_PENDATA = 10,
    wxDF_RIFF = 11,
    wxDF_WAVE = 12,
    wxDF_UNICODETEXT = 13,
    wxDF_ENHMETAFILE = 14,
    wxDF_FILENAME = 15,
    wxDF_LOCALE = 16,
    wxDF_PRIVATE = 20,
    wxDF_HTML = 30,
    wxDF_MAX
};


enum wxKeyCode
{
    WXK_NONE = 0,

    WXK_CONTROL_A = 1,
    WXK_CONTROL_B,
    WXK_CONTROL_C,
    WXK_CONTROL_D,
    WXK_CONTROL_E,
    WXK_CONTROL_F,
    WXK_CONTROL_G,
    WXK_CONTROL_H,
    WXK_CONTROL_I,
    WXK_CONTROL_J,
    WXK_CONTROL_K,
    WXK_CONTROL_L,
    WXK_CONTROL_M,
    WXK_CONTROL_N,
    WXK_CONTROL_O,
    WXK_CONTROL_P,
    WXK_CONTROL_Q,
    WXK_CONTROL_R,
    WXK_CONTROL_S,
    WXK_CONTROL_T,
    WXK_CONTROL_U,
    WXK_CONTROL_V,
    WXK_CONTROL_W,
    WXK_CONTROL_X,
    WXK_CONTROL_Y,
    WXK_CONTROL_Z,

    WXK_BACK = 8,
    WXK_TAB = 9,
    WXK_RETURN = 13,
    WXK_ESCAPE = 27,



    WXK_SPACE = 32,
    WXK_DELETE = 127,
# 2622 "/usr/local/include/wx-3.0/wx/defs.h"
    WXK_START = 300,
    WXK_LBUTTON,
    WXK_RBUTTON,
    WXK_CANCEL,
    WXK_MBUTTON,
    WXK_CLEAR,
    WXK_SHIFT,
    WXK_ALT,
    WXK_CONTROL,
    WXK_MENU,
    WXK_PAUSE,
    WXK_CAPITAL,
    WXK_END,
    WXK_HOME,
    WXK_LEFT,
    WXK_UP,
    WXK_RIGHT,
    WXK_DOWN,
    WXK_SELECT,
    WXK_PRINT,
    WXK_EXECUTE,
    WXK_SNAPSHOT,
    WXK_INSERT,
    WXK_HELP,
    WXK_NUMPAD0,
    WXK_NUMPAD1,
    WXK_NUMPAD2,
    WXK_NUMPAD3,
    WXK_NUMPAD4,
    WXK_NUMPAD5,
    WXK_NUMPAD6,
    WXK_NUMPAD7,
    WXK_NUMPAD8,
    WXK_NUMPAD9,
    WXK_MULTIPLY,
    WXK_ADD,
    WXK_SEPARATOR,
    WXK_SUBTRACT,
    WXK_DECIMAL,
    WXK_DIVIDE,
    WXK_F1,
    WXK_F2,
    WXK_F3,
    WXK_F4,
    WXK_F5,
    WXK_F6,
    WXK_F7,
    WXK_F8,
    WXK_F9,
    WXK_F10,
    WXK_F11,
    WXK_F12,
    WXK_F13,
    WXK_F14,
    WXK_F15,
    WXK_F16,
    WXK_F17,
    WXK_F18,
    WXK_F19,
    WXK_F20,
    WXK_F21,
    WXK_F22,
    WXK_F23,
    WXK_F24,
    WXK_NUMLOCK,
    WXK_SCROLL,
    WXK_PAGEUP,
    WXK_PAGEDOWN,





    WXK_NUMPAD_SPACE,
    WXK_NUMPAD_TAB,
    WXK_NUMPAD_ENTER,
    WXK_NUMPAD_F1,
    WXK_NUMPAD_F2,
    WXK_NUMPAD_F3,
    WXK_NUMPAD_F4,
    WXK_NUMPAD_HOME,
    WXK_NUMPAD_LEFT,
    WXK_NUMPAD_UP,
    WXK_NUMPAD_RIGHT,
    WXK_NUMPAD_DOWN,
    WXK_NUMPAD_PAGEUP,
    WXK_NUMPAD_PAGEDOWN,




    WXK_NUMPAD_END,
    WXK_NUMPAD_BEGIN,
    WXK_NUMPAD_INSERT,
    WXK_NUMPAD_DELETE,
    WXK_NUMPAD_EQUAL,
    WXK_NUMPAD_MULTIPLY,
    WXK_NUMPAD_ADD,
    WXK_NUMPAD_SEPARATOR,
    WXK_NUMPAD_SUBTRACT,
    WXK_NUMPAD_DECIMAL,
    WXK_NUMPAD_DIVIDE,

    WXK_WINDOWS_LEFT,
    WXK_WINDOWS_RIGHT,
    WXK_WINDOWS_MENU ,

    WXK_RAW_CONTROL,



    WXK_COMMAND = WXK_CONTROL,


    WXK_SPECIAL1 = 193,
    WXK_SPECIAL2,
    WXK_SPECIAL3,
    WXK_SPECIAL4,
    WXK_SPECIAL5,
    WXK_SPECIAL6,
    WXK_SPECIAL7,
    WXK_SPECIAL8,
    WXK_SPECIAL9,
    WXK_SPECIAL10,
    WXK_SPECIAL11,
    WXK_SPECIAL12,
    WXK_SPECIAL13,
    WXK_SPECIAL14,
    WXK_SPECIAL15,
    WXK_SPECIAL16,
    WXK_SPECIAL17,
    WXK_SPECIAL18,
    WXK_SPECIAL19,
    WXK_SPECIAL20
};


enum wxKeyModifier
{
    wxMOD_NONE = 0x0000,
    wxMOD_ALT = 0x0001,
    wxMOD_CONTROL = 0x0002,
    wxMOD_ALTGR = wxMOD_ALT | wxMOD_CONTROL,
    wxMOD_SHIFT = 0x0004,
    wxMOD_META = 0x0008,
    wxMOD_WIN = wxMOD_META,

    wxMOD_RAW_CONTROL = 0x0010,



    wxMOD_CMD = wxMOD_CONTROL,
    wxMOD_ALL = 0xffff
};





typedef enum
{
    wxPAPER_NONE,
    wxPAPER_LETTER,
    wxPAPER_LEGAL,
    wxPAPER_A4,
    wxPAPER_CSHEET,
    wxPAPER_DSHEET,
    wxPAPER_ESHEET,
    wxPAPER_LETTERSMALL,
    wxPAPER_TABLOID,
    wxPAPER_LEDGER,
    wxPAPER_STATEMENT,
    wxPAPER_EXECUTIVE,
    wxPAPER_A3,
    wxPAPER_A4SMALL,
    wxPAPER_A5,
    wxPAPER_B4,
    wxPAPER_B5,
    wxPAPER_FOLIO,
    wxPAPER_QUARTO,
    wxPAPER_10X14,
    wxPAPER_11X17,
    wxPAPER_NOTE,
    wxPAPER_ENV_9,
    wxPAPER_ENV_10,
    wxPAPER_ENV_11,
    wxPAPER_ENV_12,
    wxPAPER_ENV_14,
    wxPAPER_ENV_DL,
    wxPAPER_ENV_C5,
    wxPAPER_ENV_C3,
    wxPAPER_ENV_C4,
    wxPAPER_ENV_C6,
    wxPAPER_ENV_C65,
    wxPAPER_ENV_B4,
    wxPAPER_ENV_B5,
    wxPAPER_ENV_B6,
    wxPAPER_ENV_ITALY,
    wxPAPER_ENV_MONARCH,
    wxPAPER_ENV_PERSONAL,
    wxPAPER_FANFOLD_US,
    wxPAPER_FANFOLD_STD_GERMAN,
    wxPAPER_FANFOLD_LGL_GERMAN,

    wxPAPER_ISO_B4,
    wxPAPER_JAPANESE_POSTCARD,
    wxPAPER_9X11,
    wxPAPER_10X11,
    wxPAPER_15X11,
    wxPAPER_ENV_INVITE,
    wxPAPER_LETTER_EXTRA,
    wxPAPER_LEGAL_EXTRA,
    wxPAPER_TABLOID_EXTRA,
    wxPAPER_A4_EXTRA,
    wxPAPER_LETTER_TRANSVERSE,
    wxPAPER_A4_TRANSVERSE,
    wxPAPER_LETTER_EXTRA_TRANSVERSE,
    wxPAPER_A_PLUS,
    wxPAPER_B_PLUS,
    wxPAPER_LETTER_PLUS,
    wxPAPER_A4_PLUS,
    wxPAPER_A5_TRANSVERSE,
    wxPAPER_B5_TRANSVERSE,
    wxPAPER_A3_EXTRA,
    wxPAPER_A5_EXTRA,
    wxPAPER_B5_EXTRA,
    wxPAPER_A2,
    wxPAPER_A3_TRANSVERSE,
    wxPAPER_A3_EXTRA_TRANSVERSE,

    wxPAPER_DBL_JAPANESE_POSTCARD,
    wxPAPER_A6,
    wxPAPER_JENV_KAKU2,
    wxPAPER_JENV_KAKU3,
    wxPAPER_JENV_CHOU3,
    wxPAPER_JENV_CHOU4,
    wxPAPER_LETTER_ROTATED,
    wxPAPER_A3_ROTATED,
    wxPAPER_A4_ROTATED,
    wxPAPER_A5_ROTATED,
    wxPAPER_B4_JIS_ROTATED,
    wxPAPER_B5_JIS_ROTATED,
    wxPAPER_JAPANESE_POSTCARD_ROTATED,
    wxPAPER_DBL_JAPANESE_POSTCARD_ROTATED,
    wxPAPER_A6_ROTATED,
    wxPAPER_JENV_KAKU2_ROTATED,
    wxPAPER_JENV_KAKU3_ROTATED,
    wxPAPER_JENV_CHOU3_ROTATED,
    wxPAPER_JENV_CHOU4_ROTATED,
    wxPAPER_B6_JIS,
    wxPAPER_B6_JIS_ROTATED,
    wxPAPER_12X11,
    wxPAPER_JENV_YOU4,
    wxPAPER_JENV_YOU4_ROTATED,
    wxPAPER_P16K,
    wxPAPER_P32K,
    wxPAPER_P32KBIG,
    wxPAPER_PENV_1,
    wxPAPER_PENV_2,
    wxPAPER_PENV_3,
    wxPAPER_PENV_4,
    wxPAPER_PENV_5,
    wxPAPER_PENV_6,
    wxPAPER_PENV_7,
    wxPAPER_PENV_8,
    wxPAPER_PENV_9,
    wxPAPER_PENV_10,
    wxPAPER_P16K_ROTATED,
    wxPAPER_P32K_ROTATED,
    wxPAPER_P32KBIG_ROTATED,
    wxPAPER_PENV_1_ROTATED,
    wxPAPER_PENV_2_ROTATED,
    wxPAPER_PENV_3_ROTATED,
    wxPAPER_PENV_4_ROTATED,
    wxPAPER_PENV_5_ROTATED,
    wxPAPER_PENV_6_ROTATED,
    wxPAPER_PENV_7_ROTATED,
    wxPAPER_PENV_8_ROTATED,
    wxPAPER_PENV_9_ROTATED,
    wxPAPER_PENV_10_ROTATED,
    wxPAPER_A0,
    wxPAPER_A1
} wxPaperSize;


enum wxPrintOrientation
{
   wxPORTRAIT = 1,
   wxLANDSCAPE
};




enum wxDuplexMode
{
    wxDUPLEX_SIMPLEX,
    wxDUPLEX_HORIZONTAL,
    wxDUPLEX_VERTICAL
};
# 2931 "/usr/local/include/wx-3.0/wx/defs.h"
typedef int wxPrintQuality;




enum wxPrintMode
{
    wxPRINT_MODE_NONE = 0,
    wxPRINT_MODE_PREVIEW = 1,
    wxPRINT_MODE_FILE = 2,
    wxPRINT_MODE_PRINTER = 3,
    wxPRINT_MODE_STREAM = 4
};





enum wxUpdateUI
{
    wxUPDATE_UI_NONE = 0x0000,
    wxUPDATE_UI_RECURSE = 0x0001,
    wxUPDATE_UI_FROMIDLE = 0x0002
};
# 2965 "/usr/local/include/wx-3.0/wx/defs.h"
typedef int (* wxSortCompareFunction)(const void *elem1, const void *elem2);


typedef int (* wxListIterateFunction)(void *current);
# 3018 "/usr/local/include/wx-3.0/wx/defs.h"
typedef void* WXHBITMAP;
typedef void* WXHCURSOR;
typedef void* WXRECTPTR;
typedef void* WXPOINTPTR;
typedef void* WXHWND;
typedef void* WXEVENTREF;
typedef void* WXEVENTHANDLERREF;
typedef void* WXEVENTHANDLERCALLREF;
typedef void* WXAPPLEEVENTREF;

typedef unsigned int WXUINT;
typedef unsigned long WXDWORD;
typedef unsigned short WXWORD;

typedef struct wxOpaquePicHandle * WXHMETAFILE ;







typedef void* WXDisplay;





typedef const void * CFTypeRef;



typedef const struct __CFString* CFStringRef;
typedef struct __CFString * CFMutableStringRef;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;
typedef const struct __CTFont* CTFontRef;
typedef const struct __CTFontDescriptor* CTFontDescriptorRef;



typedef struct CGColor* CGColorRef;
typedef struct CGImage* CGImageRef;
typedef struct CGContext* CGContextRef;
typedef struct CGFont* CGFontRef;

typedef CGColorRef WXCOLORREF;
typedef CGImageRef WXCGIMAGEREF;
typedef CGContextRef WXHDC;





typedef const struct __HIShape * HIShapeRef;
typedef struct __HIShape * HIMutableShapeRef;



typedef struct OpaquePasteboardRef* PasteboardRef;
typedef struct OpaqueIconRef* IconRef;
typedef struct OpaqueMenuRef* MenuRef;

typedef IconRef WXHICON ;
typedef HIShapeRef WXHRGN;
# 3103 "/usr/local/include/wx-3.0/wx/defs.h"
    typedef double CGFloat;





typedef long NSInteger;
typedef unsigned long NSUInteger;
# 3154 "/usr/local/include/wx-3.0/wx/defs.h"
typedef struct NSApplication *WX_NSApplication;
typedef struct NSBitmapImageRep *WX_NSBitmapImageRep;
typedef struct NSBox *WX_NSBox;
typedef struct NSButton *WX_NSButton;
typedef struct NSColor *WX_NSColor;
typedef struct NSColorPanel *WX_NSColorPanel;
typedef struct NSControl *WX_NSControl;
typedef struct NSCursor *WX_NSCursor;
typedef struct NSEvent *WX_NSEvent;
typedef struct NSFont *WX_NSFont;
typedef struct NSFontDescriptor *WX_NSFontDescriptor;
typedef struct NSFontPanel *WX_NSFontPanel;
typedef struct NSImage *WX_NSImage;
typedef struct NSLayoutManager *WX_NSLayoutManager;
typedef struct NSMenu *WX_NSMenu;
typedef struct NSMenuExtra *WX_NSMenuExtra;
typedef struct NSMenuItem *WX_NSMenuItem;
typedef struct NSMutableArray *WX_NSMutableArray;
typedef struct NSNotification *WX_NSNotification;
typedef struct NSObject *WX_NSObject;
typedef struct NSPanel *WX_NSPanel;
typedef struct NSResponder *WX_NSResponder;
typedef struct NSScrollView *WX_NSScrollView;
typedef struct NSSound *WX_NSSound;
typedef struct NSStatusItem *WX_NSStatusItem;
typedef struct NSTableColumn *WX_NSTableColumn;
typedef struct NSTableView *WX_NSTableView;
typedef struct NSTextContainer *WX_NSTextContainer;
typedef struct NSTextField *WX_NSTextField;
typedef struct NSTextStorage *WX_NSTextStorage;
typedef struct NSThread *WX_NSThread;
typedef struct NSWindow *WX_NSWindow;
typedef struct NSView *WX_NSView;
typedef struct NSOpenGLContext *WX_NSOpenGLContext;
typedef struct NSOpenGLPixelFormat *WX_NSOpenGLPixelFormat;
typedef struct NSPrintInfo *WX_NSPrintInfo;







typedef struct NSString *WX_NSString;



typedef WX_NSWindow WXWindow;
typedef WX_NSView WXWidget;
typedef WX_NSMenu WXHMENU;
typedef WX_NSOpenGLPixelFormat WXGLPixelFormat;
typedef WX_NSOpenGLContext WXGLContext;
# 3227 "/usr/local/include/wx-3.0/wx/defs.h"
typedef struct WebView *WX_WebView;
typedef WX_WebView OSXWebViewPtr;
# 3526 "/usr/local/include/wx-3.0/wx/defs.h"
# 1 "/usr/local/include/wx-3.0/wx/features.h" 1
# 3527 "/usr/local/include/wx-3.0/wx/defs.h" 2
# 3588 "/usr/local/include/wx-3.0/wx/defs.h"
enum
{
    wxPRIORITY_MIN = 0u,
    wxPRIORITY_DEFAULT = 50u,
    wxPRIORITY_MAX = 100u
};
# 13 "/usr/local/include/wx-3.0/wx/wxprec.h" 2
# 4 "./common.h" 2

# 1 "/usr/local/include/wx-3.0/wx/wx.h" 1
# 15 "/usr/local/include/wx-3.0/wx/wx.h"
# 1 "/usr/local/include/wx-3.0/wx/object.h" 1
# 19 "/usr/local/include/wx-3.0/wx/object.h"
# 1 "/usr/local/include/wx-3.0/wx/memory.h" 1
# 15 "/usr/local/include/wx-3.0/wx/memory.h"
# 1 "/usr/local/include/wx-3.0/wx/string.h" 1
# 38 "/usr/local/include/wx-3.0/wx/string.h"
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/string.h" 1 3
# 59 "/Library/Developer/CommandLineTools/usr/include/c++/v1/string.h" 3


# 1 "/usr/include/string.h" 1 3 4
# 64 "/usr/include/string.h" 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 65 "/usr/include/string.h" 2 3 4
# 1 "/usr/include/sys/_types/_null.h" 1 3 4
# 66 "/usr/include/string.h" 2 3 4



extern "C" {
void *memchr(const void *__s, int __c, size_t __n);
int memcmp(const void *__s1, const void *__s2, size_t __n);
void *memcpy(void *__dst, const void *__src, size_t __n);
void *memmove(void *__dst, const void *__src, size_t __len);
void *memset(void *__b, int __c, size_t __len);
char *strcat(char *__s1, const char *__s2);
char *strchr(const char *__s, int __c);
int strcmp(const char *__s1, const char *__s2);
int strcoll(const char *__s1, const char *__s2);
char *strcpy(char *__dst, const char *__src);
size_t strcspn(const char *__s, const char *__charset);
char *strerror(int __errnum) __asm("_" "strerror" );
size_t strlen(const char *__s);
char *strncat(char *__s1, const char *__s2, size_t __n);
int strncmp(const char *__s1, const char *__s2, size_t __n);
char *strncpy(char *__dst, const char *__src, size_t __n);
char *strpbrk(const char *__s, const char *__charset);
char *strrchr(const char *__s, int __c);
size_t strspn(const char *__s, const char *__charset);
char *strstr(const char *__big, const char *__little);
char *strtok(char *__str, const char *__sep);
size_t strxfrm(char *__s1, const char *__s2, size_t __n);
}
# 103 "/usr/include/string.h" 3 4
extern "C" {
char *strtok_r(char *__str, const char *__sep, char **__lasts);
}
# 115 "/usr/include/string.h" 3 4
extern "C" {
int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen);
char *strdup(const char *__s1);
void *memccpy(void *__dst, const void *__src, int __c, size_t __n);
}
# 129 "/usr/include/string.h" 3 4
extern "C" {
char *stpcpy(char *__dst, const char *__src);
char *stpncpy(char *__dst, const char *__src, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
char *strndup(const char *__s1, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
size_t strnlen(const char *__s1, size_t __n) __attribute__((availability(macosx,introduced=10.7)));
char *strsignal(int __sig);
}






# 1 "/usr/include/sys/_types/_rsize_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_rsize_t.h" 3 4
typedef __darwin_size_t rsize_t;
# 142 "/usr/include/string.h" 2 3 4
# 1 "/usr/include/sys/_types/_errno_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_errno_t.h" 3 4
typedef int errno_t;
# 143 "/usr/include/string.h" 2 3 4

extern "C" {
errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n) __attribute__((availability(macosx,introduced=10.9)));
}






# 1 "/usr/include/sys/_types/_ssize_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_ssize_t.h" 3 4
typedef __darwin_ssize_t ssize_t;
# 153 "/usr/include/string.h" 2 3 4

extern "C" {
void *memmem(const void *__big, size_t __big_len, const void *__little, size_t __little_len) __attribute__((availability(macosx,introduced=10.7)));
void memset_pattern4(void *__b, const void *__pattern4, size_t __len) __attribute__((availability(macosx,introduced=10.5)));
void memset_pattern8(void *__b, const void *__pattern8, size_t __len) __attribute__((availability(macosx,introduced=10.5)));
void memset_pattern16(void *__b, const void *__pattern16, size_t __len) __attribute__((availability(macosx,introduced=10.5)));

char *strcasestr(const char *__big, const char *__little);
char *strnstr(const char *__big, const char *__little, size_t __len);
size_t strlcat(char *__dst, const char *__source, size_t __size);
size_t strlcpy(char *__dst, const char *__source, size_t __size);
void strmode(int __mode, char *__bp);
char *strsep(char **__stringp, const char *__delim);


void swab(const void * , void * , ssize_t);

__attribute__((availability(macosx,introduced=10.12.1))) __attribute__((availability(ios,introduced=10.1)))
__attribute__((availability(tvos,introduced=10.0.1))) __attribute__((availability(watchos,introduced=3.1)))
int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len);
}







# 1 "/usr/include/strings.h" 1 3 4
# 65 "/usr/include/strings.h" 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 66 "/usr/include/strings.h" 2 3 4

extern "C" {


int bcmp(const void *, const void *, size_t) ;
void bcopy(const void *, void *, size_t) ;
void bzero(void *, size_t) ;
char *index(const char *, int) ;
char *rindex(const char *, int) ;


int ffs(int);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);
}



extern "C" {
int ffsl(long) __attribute__((availability(macosx,introduced=10.5)));
int ffsll(long long) __attribute__((availability(macosx,introduced=10.9)));
int fls(int) __attribute__((availability(macosx,introduced=10.5)));
int flsl(long) __attribute__((availability(macosx,introduced=10.5)));
int flsll(long long) __attribute__((availability(macosx,introduced=10.9)));
}


# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/string.h" 1 3 4
# 93 "/usr/include/strings.h" 2 3 4
# 181 "/usr/include/string.h" 2 3 4
# 62 "/Library/Developer/CommandLineTools/usr/include/c++/v1/string.h" 2 3
# 72 "/Library/Developer/CommandLineTools/usr/include/c++/v1/string.h" 3
extern "C++" {
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
char* __libcpp_strchr(const char* __s, int __c) {return (char*)strchr(__s, __c);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
const char* strchr(const char* __s, int __c) {return __libcpp_strchr(__s, __c);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
      char* strchr( char* __s, int __c) {return __libcpp_strchr(__s, __c);}

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
char* __libcpp_strpbrk(const char* __s1, const char* __s2) {return (char*)strpbrk(__s1, __s2);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
const char* strpbrk(const char* __s1, const char* __s2) {return __libcpp_strpbrk(__s1, __s2);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
      char* strpbrk( char* __s1, const char* __s2) {return __libcpp_strpbrk(__s1, __s2);}

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
char* __libcpp_strrchr(const char* __s, int __c) {return (char*)strrchr(__s, __c);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
const char* strrchr(const char* __s, int __c) {return __libcpp_strrchr(__s, __c);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
      char* strrchr( char* __s, int __c) {return __libcpp_strrchr(__s, __c);}

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
void* __libcpp_memchr(const void* __s, int __c, size_t __n) {return (void*)memchr(__s, __c, __n);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
const void* memchr(const void* __s, int __c, size_t __n) {return __libcpp_memchr(__s, __c, __n);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
      void* memchr( void* __s, int __c, size_t __n) {return __libcpp_memchr(__s, __c, __n);}

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
char* __libcpp_strstr(const char* __s1, const char* __s2) {return (char*)strstr(__s1, __s2);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
const char* strstr(const char* __s1, const char* __s2) {return __libcpp_strstr(__s1, __s2);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
      char* strstr( char* __s1, const char* __s2) {return __libcpp_strstr(__s1, __s2);}
}
# 39 "/usr/local/include/wx-3.0/wx/string.h" 2
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdio.h" 1 3
# 106 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdio.h" 3


# 1 "/usr/include/stdio.h" 1 3 4
# 64 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/_stdio.h" 1 3 4
# 75 "/usr/include/_stdio.h" 3 4
# 1 "/usr/include/sys/_types/_va_list.h" 1 3 4
# 32 "/usr/include/sys/_types/_va_list.h" 3 4
typedef __darwin_va_list va_list;
# 76 "/usr/include/_stdio.h" 2 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 77 "/usr/include/_stdio.h" 2 3 4
# 1 "/usr/include/sys/_types/_null.h" 1 3 4
# 78 "/usr/include/_stdio.h" 2 3 4

# 1 "/usr/include/sys/stdio.h" 1 3 4
# 37 "/usr/include/sys/stdio.h" 3 4
extern "C" {

int renameat(int, const char *, int, const char *) __attribute__((availability(macosx,introduced=10.10)));






int renamex_np(const char *, const char *, unsigned int) __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
int renameatx_np(int, const char *, int, const char *, unsigned int) __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));



}
# 80 "/usr/include/_stdio.h" 2 3 4

typedef __darwin_off_t fpos_t;
# 92 "/usr/include/_stdio.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
# 126 "/usr/include/_stdio.h" 3 4
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (* _Nullable _close)(void *);
 int (* _Nullable _read) (void *, char *, int);
 fpos_t (* _Nullable _seek) (void *, fpos_t, int);
 int (* _Nullable _write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;
# 65 "/usr/include/stdio.h" 2 3 4

extern "C" {
extern FILE *__stdinp;
extern FILE *__stdoutp;
extern FILE *__stderrp;
}
# 141 "/usr/include/stdio.h" 3 4
extern "C" {
void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * , fpos_t *);
char *fgets(char * , int, FILE *);



FILE *fopen(const char * __filename, const char * __mode) __asm("_" "fopen" );

int fprintf(FILE * , const char * , ...) __attribute__((__format__ (__printf__, 2, 3)));
int fputc(int, FILE *);
int fputs(const char * , FILE * ) __asm("_" "fputs" );
size_t fread(void * __ptr, size_t __size, size_t __nitems, FILE * __stream);
FILE *freopen(const char * , const char * ,
                 FILE * ) __asm("_" "freopen" );
int fscanf(FILE * , const char * , ...) __attribute__((__format__ (__scanf__, 2, 3)));
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * __ptr, size_t __size, size_t __nitems, FILE * __stream) __asm("_" "fwrite" );
int getc(FILE *);
int getchar(void);
char *gets(char *);
void perror(const char *);
int printf(const char * , ...) __attribute__((__format__ (__printf__, 1, 2)));
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *__old, const char *__new);
void rewind(FILE *);
int scanf(const char * , ...) __attribute__((__format__ (__scanf__, 1, 2)));
void setbuf(FILE * , char * );
int setvbuf(FILE * , char * , int, size_t);
int sprintf(char * , const char * , ...) __attribute__((__format__ (__printf__, 2, 3))) __attribute__((__availability__(swift, unavailable, message="Use snprintf instead.")));
int sscanf(const char * , const char * , ...) __attribute__((__format__ (__scanf__, 2, 3)));
FILE *tmpfile(void);

__attribute__((__availability__(swift, unavailable, message="Use mkstemp(3) instead.")))

__attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE * , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0)));
int vprintf(const char * , va_list) __attribute__((__format__ (__printf__, 1, 0)));
int vsprintf(char * , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0))) __attribute__((__availability__(swift, unavailable, message="Use vsnprintf instead.")));
}
# 204 "/usr/include/stdio.h" 3 4
extern "C" {



char *ctermid(char *);





FILE *fdopen(int, const char *) __asm("_" "fdopen" );

int fileno(FILE *);
}
# 231 "/usr/include/stdio.h" 3 4
extern "C" {
int pclose(FILE *) __attribute__((__availability__(swift, unavailable, message="Use posix_spawn APIs or NSTask instead.")));



FILE *popen(const char *, const char *) __asm("_" "popen" ) __attribute__((__availability__(swift, unavailable, message="Use posix_spawn APIs or NSTask instead.")));

}
# 252 "/usr/include/stdio.h" 3 4
extern "C" {
int __srget(FILE *);
int __svfscanf(FILE *, const char *, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int __swbuf(int, FILE *);
}







inline __attribute__ ((__always_inline__)) int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
# 289 "/usr/include/stdio.h" 3 4
extern "C" {
void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);



int getw(FILE *);
int putw(int, FILE *);


__attribute__((__availability__(swift, unavailable, message="Use mkstemp(3) instead.")))

__attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tempnam(const char *__dir, const char *__prefix) __asm("_" "tempnam" );
}
# 328 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/sys/_types/_off_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_off_t.h" 3 4
typedef __darwin_off_t off_t;
# 329 "/usr/include/stdio.h" 2 3 4

extern "C" {
int fseeko(FILE * __stream, off_t __offset, int __whence);
off_t ftello(FILE * __stream);
}



extern "C" {
int snprintf(char * __str, size_t __size, const char * __format, ...) __attribute__((__format__ (__printf__, 3, 4)));
int vfscanf(FILE * __stream, const char * __format, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int vscanf(const char * __format, va_list) __attribute__((__format__ (__scanf__, 1, 0)));
int vsnprintf(char * __str, size_t __size, const char * __format, va_list) __attribute__((__format__ (__printf__, 3, 0)));
int vsscanf(const char * __str, const char * __format, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
}
# 355 "/usr/include/stdio.h" 3 4
extern "C" {
int dprintf(int, const char * , ...) __attribute__((__format__ (__printf__, 2, 3))) __attribute__((availability(macosx,introduced=10.7)));
int vdprintf(int, const char * , va_list) __attribute__((__format__ (__printf__, 2, 0))) __attribute__((availability(macosx,introduced=10.7)));
ssize_t getdelim(char ** __linep, size_t * __linecapp, int __delimiter, FILE * __stream) __attribute__((availability(macosx,introduced=10.7)));
ssize_t getline(char ** __linep, size_t * __linecapp, FILE * __stream) __attribute__((availability(macosx,introduced=10.7)));
FILE *fmemopen(void * __buf, size_t __size, const char * __mode) __attribute__((availability(macos,introduced=10.13))) __attribute__((availability(ios,introduced=11.0))) __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
FILE *open_memstream(char **__bufp, size_t *__sizep) __attribute__((availability(macos,introduced=10.13))) __attribute__((availability(ios,introduced=11.0))) __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
}







extern "C" {
extern const int sys_nerr;
extern const char *const sys_errlist[];

int asprintf(char ** , const char * , ...) __attribute__((__format__ (__printf__, 2, 3)));
char *ctermid_r(char *);
char *fgetln(FILE *, size_t *);
const char *fmtcheck(const char *, const char *);
int fpurge(FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);
int vasprintf(char ** , const char * , va_list) __attribute__((__format__ (__printf__, 2, 0)));
FILE *zopen(const char *, const char *, int);





FILE *funopen(const void *,
                 int (* _Nullable)(void *, char *, int),
                 int (* _Nullable)(void *, const char *, int),
                 fpos_t (* _Nullable)(void *, fpos_t, int),
                 int (* _Nullable)(void *));
}
# 109 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdio.h" 2 3
# 40 "/usr/local/include/wx-3.0/wx/string.h" 2
# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/include/stdarg.h" 1 3 4
# 30 "/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 48 "/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 41 "/usr/local/include/wx-3.0/wx/string.h" 2

# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdlib.h" 1 3
# 43 "/usr/local/include/wx-3.0/wx/string.h" 2


# 1 "/usr/local/include/wx-3.0/wx/wxcrtbase.h" 1
# 34 "/usr/local/include/wx-3.0/wx/wxcrtbase.h"
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdio.h" 1 3
# 35 "/usr/local/include/wx-3.0/wx/wxcrtbase.h" 2


# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/wctype.h" 1 3
# 52 "/Library/Developer/CommandLineTools/usr/include/c++/v1/wctype.h" 3


# 1 "/usr/include/wctype.h" 1 3 4
# 36 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/_types/_wctrans_t.h" 1 3 4
# 32 "/usr/include/_types/_wctrans_t.h" 3 4
typedef __darwin_wctrans_t wctrans_t;
# 37 "/usr/include/wctype.h" 2 3 4



# 1 "/usr/include/_wctype.h" 1 3 4
# 42 "/usr/include/_wctype.h" 3 4
# 1 "/usr/include/__wctype.h" 1 3 4
# 62 "/usr/include/__wctype.h" 3 4
# 1 "/usr/include/_types/_wctype_t.h" 1 3 4
# 32 "/usr/include/_types/_wctype_t.h" 3 4
typedef __darwin_wctype_t wctype_t;
# 63 "/usr/include/__wctype.h" 2 3 4
# 43 "/usr/include/_wctype.h" 2 3 4







inline int
iswalnum(wint_t _wc)
{
 return (__istype(_wc, 0x00000100L|0x00000400L));
}

inline int
iswalpha(wint_t _wc)
{
 return (__istype(_wc, 0x00000100L));
}

inline int
iswcntrl(wint_t _wc)
{
 return (__istype(_wc, 0x00000200L));
}

inline int
iswctype(wint_t _wc, wctype_t _charclass)
{
 return (__istype(_wc, _charclass));
}

inline int
iswdigit(wint_t _wc)
{
 return (__isctype(_wc, 0x00000400L));
}

inline int
iswgraph(wint_t _wc)
{
 return (__istype(_wc, 0x00000800L));
}

inline int
iswlower(wint_t _wc)
{
 return (__istype(_wc, 0x00001000L));
}

inline int
iswprint(wint_t _wc)
{
 return (__istype(_wc, 0x00040000L));
}

inline int
iswpunct(wint_t _wc)
{
 return (__istype(_wc, 0x00002000L));
}

inline int
iswspace(wint_t _wc)
{
 return (__istype(_wc, 0x00004000L));
}

inline int
iswupper(wint_t _wc)
{
 return (__istype(_wc, 0x00008000L));
}

inline int
iswxdigit(wint_t _wc)
{
 return (__isctype(_wc, 0x00010000L));
}

inline wint_t
towlower(wint_t _wc)
{
        return (__tolower(_wc));
}

inline wint_t
towupper(wint_t _wc)
{
        return (__toupper(_wc));
}
# 155 "/usr/include/_wctype.h" 3 4
extern "C" {
wctype_t
 wctype(const char *);
}
# 41 "/usr/include/wctype.h" 2 3 4








inline int
iswblank(wint_t _wc)
{
 return (__istype(_wc, 0x00020000L));
}


inline int
iswascii(wint_t _wc)
{
 return ((_wc & ~0x7F) == 0);
}

inline int
iswhexnumber(wint_t _wc)
{
 return (__istype(_wc, 0x00010000L));
}

inline int
iswideogram(wint_t _wc)
{
 return (__istype(_wc, 0x00080000L));
}

inline int
iswnumber(wint_t _wc)
{
 return (__istype(_wc, 0x00000400L));
}

inline int
iswphonogram(wint_t _wc)
{
 return (__istype(_wc, 0x00200000L));
}

inline int
iswrune(wint_t _wc)
{
 return (__istype(_wc, 0xFFFFFFF0L));
}

inline int
iswspecial(wint_t _wc)
{
 return (__istype(_wc, 0x00100000L));
}
# 117 "/usr/include/wctype.h" 3 4
extern "C" {

wint_t nextwctype(wint_t, wctype_t);

wint_t towctrans(wint_t, wctrans_t);
wctrans_t
 wctrans(const char *);
}
# 55 "/Library/Developer/CommandLineTools/usr/include/c++/v1/wctype.h" 2 3
# 38 "/usr/local/include/wx-3.0/wx/wxcrtbase.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 68 "/usr/include/time.h" 3 4
# 1 "/usr/include/sys/_types/_clock_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_clock_t.h" 3 4
typedef __darwin_clock_t clock_t;
# 69 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/sys/_types/_null.h" 1 3 4
# 70 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 71 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/sys/_types/_time_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_time_t.h" 3 4
typedef __darwin_time_t time_t;
# 72 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/sys/_types/_timespec.h" 1 3 4
# 33 "/usr/include/sys/_types/_timespec.h" 3 4
struct timespec
{
 __darwin_time_t tv_sec;
 long tv_nsec;
};
# 73 "/usr/include/time.h" 2 3 4

struct tm {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
 long tm_gmtoff;
 char *tm_zone;
};
# 97 "/usr/include/time.h" 3 4
extern char *tzname[];


extern int getdate_err;

extern long timezone __asm("_" "timezone" );

extern int daylight;

extern "C" {
char *asctime(const struct tm *);
clock_t clock(void) __asm("_" "clock" );
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *getdate(const char *);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *) __asm("_" "mktime" );
size_t strftime(char * , size_t, const char * , const struct tm * ) __asm("_" "strftime" );
char *strptime(const char * , const char * , struct tm * ) __asm("_" "strptime" );
time_t time(time_t *);


void tzset(void);



char *asctime_r(const struct tm * , char * );
char *ctime_r(const time_t *, char *);
struct tm *gmtime_r(const time_t * , struct tm * );
struct tm *localtime_r(const time_t * , struct tm * );


time_t posix2time(time_t);



void tzsetwall(void);
time_t time2posix(time_t);
time_t timelocal(struct tm * const);
time_t timegm(struct tm * const);



int nanosleep(const struct timespec *__rqtp, struct timespec *__rmtp) __asm("_" "nanosleep" );
# 152 "/usr/include/time.h" 3 4
typedef enum {
_CLOCK_REALTIME __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 0,

_CLOCK_MONOTONIC __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 6,


_CLOCK_MONOTONIC_RAW __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 4,

_CLOCK_MONOTONIC_RAW_APPROX __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 5,

_CLOCK_UPTIME_RAW __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 8,

_CLOCK_UPTIME_RAW_APPROX __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 9,


_CLOCK_PROCESS_CPUTIME_ID __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 12,

_CLOCK_THREAD_CPUTIME_ID __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0))) = 16

} clockid_t;

__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
int clock_getres(clockid_t __clock_id, struct timespec *__res);

__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
int clock_gettime(clockid_t __clock_id, struct timespec *__tp);


__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0))) __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)))
__uint64_t clock_gettime_nsec_np(clockid_t __clock_id);


__attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,unavailable)))
__attribute__((availability(tvos,unavailable))) __attribute__((availability(watchos,unavailable)))
int clock_settime(clockid_t __clock_id, const struct timespec *__tp);





}
# 39 "/usr/local/include/wx-3.0/wx/wxcrtbase.h" 2
# 124 "/usr/local/include/wx-3.0/wx/wxcrtbase.h"
        inline void wxUpdateLocaleIsUtf8() {}
# 283 "/usr/local/include/wx-3.0/wx/wxcrtbase.h"
extern "C" {



                 size_t wxCRT_StrlenW(const wchar_t *s);







}
# 400 "/usr/local/include/wx-3.0/wx/wxcrtbase.h"
                 char *wxCRT_StrtokA(char *psz, const char *delim, char **save_ptr);



                 wchar_t *wxCRT_StrtokW(wchar_t *psz, const wchar_t *delim, wchar_t **save_ptr);





                         long long wxCRT_StrtollA(const char* nptr,
                                                     char** endptr,
                                                     int base);
                         unsigned long long wxCRT_StrtoullA(const char* nptr,
                                                       char** endptr,
                                                       int base);


                         long long wxCRT_StrtollW(const wchar_t* nptr,
                                                     wchar_t** endptr,
                                                     int base);
                         unsigned long long wxCRT_StrtoullW(const wchar_t* nptr,
                                                       wchar_t** endptr,
                                                       int base);
# 505 "/usr/local/include/wx-3.0/wx/wxcrtbase.h"
                 int wxCRT_PutsW(const wchar_t *ws);



                 int wxCRT_FputsW(const wchar_t *ch, FILE *stream);



                 int wxCRT_FputcW(wchar_t wc, FILE *stream);
# 550 "/usr/local/include/wx-3.0/wx/wxcrtbase.h"
                 wchar_t * wxCRT_GetenvW(const wchar_t *name);
# 613 "/usr/local/include/wx-3.0/wx/wxcrtbase.h"
                 size_t wxCRT_StrftimeW(wchar_t *s, size_t max,
                                        const wchar_t *fmt,
                                        const struct tm *tm);
# 675 "/usr/local/include/wx-3.0/wx/wxcrtbase.h"
inline size_t wxStrlen(const char *s) { return s ? strlen(s) : 0; }
inline size_t wxStrlen(const wchar_t *s) { return s ? wxCRT_StrlenW(s) : 0; }

                        size_t wxStrlen(const wxChar16 *s );
# 687 "/usr/local/include/wx-3.0/wx/wxcrtbase.h"
inline char* wxStrdup(const char *s) { return strdup(s); }
inline wchar_t* wxStrdup(const wchar_t *s) { return wcsdup(s); }

                        wxChar16* wxStrdup(const wxChar16* s);
# 46 "/usr/local/include/wx-3.0/wx/string.h" 2
# 1 "/usr/local/include/wx-3.0/wx/strvararg.h" 1
# 20 "/usr/local/include/wx-3.0/wx/strvararg.h"
# 1 "/usr/local/include/wx-3.0/wx/strconv.h" 1
# 17 "/usr/local/include/wx-3.0/wx/strconv.h"
# 1 "/usr/local/include/wx-3.0/wx/buffer.h" 1
# 17 "/usr/local/include/wx-3.0/wx/buffer.h"
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdlib.h" 1 3
# 18 "/usr/local/include/wx-3.0/wx/buffer.h" 2

class wxCStrData;







namespace wxPrivate
{

struct UntypedBufferData
{
    enum Kind
    {
        Owned,
        NonOwned
    };

    UntypedBufferData(void *str, size_t len, Kind kind = Owned)
        : m_str(str), m_length(len), m_ref(1), m_owned(kind == Owned) {}

    ~UntypedBufferData()
    {
        if ( m_owned )
            free(m_str);
    }

    void *m_str;
    size_t m_length;


    unsigned short m_ref;

    bool m_owned;
};


                 UntypedBufferData * GetUntypedNullData();

}





template <typename T>
class wxScopedCharTypeBuffer
{
public:
    typedef T CharType;

    wxScopedCharTypeBuffer()
    {
        m_data = GetNullData();
    }




    static
    const wxScopedCharTypeBuffer CreateNonOwned(const CharType *str,
                                                size_t len = ((size_t)-1))
    {
        if ( len == ((size_t)-1) )
            len = wxStrlen(str);

        wxScopedCharTypeBuffer buf;
        if ( str )
            buf.m_data = new Data(const_cast<CharType*>(str), len, Data::NonOwned);
        return buf;
    }



    static
    const wxScopedCharTypeBuffer CreateOwned(CharType *str,
                                             size_t len = ((size_t)-1) )
    {
        if ( len == ((size_t)-1) )
            len = wxStrlen(str);

        wxScopedCharTypeBuffer buf;
        if ( str )
            buf.m_data = new Data(str, len);
        return buf;
    }

    wxScopedCharTypeBuffer(const wxScopedCharTypeBuffer& src)
    {
        m_data = src.m_data;
        IncRef();
    }

    wxScopedCharTypeBuffer& operator=(const wxScopedCharTypeBuffer& src)
    {
        if ( &src == this )
            return *this;

        DecRef();
        m_data = src.m_data;
        IncRef();

        return *this;
    }

    ~wxScopedCharTypeBuffer()
    {
        DecRef();
    }




    CharType *release() const
    {
        if ( m_data == GetNullData() )
            return __null;

        do { if ( wxTheAssertHandler && !(m_data->m_owned) && (wxOnAssert("/usr/local/include/wx-3.0/wx/buffer.h", 138, __FUNCTION__, "m_data->m_owned", "can't release non-owned buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
        do { if ( wxTheAssertHandler && !(m_data->m_ref == 1) && (wxOnAssert("/usr/local/include/wx-3.0/wx/buffer.h", 139, __FUNCTION__, "m_data->m_ref == 1", "can't release shared buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );

        CharType * const p = m_data->Get();

        wxScopedCharTypeBuffer *self = const_cast<wxScopedCharTypeBuffer*>(this);
        self->m_data->Set(__null, 0);
        self->DecRef();

        return p;
    }

    void reset()
    {
        DecRef();
    }

    CharType *data() { return m_data->Get(); }
    const CharType *data() const { return m_data->Get(); }
    operator const CharType *() const { return data(); }
    CharType operator[](size_t n) const { return data()[n]; }

    size_t length() const { return m_data->m_length; }

protected:

    struct Data : public wxPrivate::UntypedBufferData
    {
        Data(CharType *str, size_t len, Kind kind = Owned)
            : wxPrivate::UntypedBufferData(str, len, kind)
        {
        }

        CharType *Get() const { return static_cast<CharType *>(m_str); }
        void Set(CharType *str, size_t len)
        {
            m_str = str;
            m_length = len;
        }
    };


    static Data *GetNullData()
    {
        return static_cast<Data *>(wxPrivate::GetUntypedNullData());
    }

    void IncRef()
    {
        if ( m_data == GetNullData() )
            return;
        m_data->m_ref++;
    }

    void DecRef()
    {
        if ( m_data == GetNullData() )
            return;
        if ( --m_data->m_ref == 0 )
            delete m_data;
        m_data = GetNullData();
    }



    void MakeOwnedCopyOf(const wxScopedCharTypeBuffer& src)
    {
        this->DecRef();

        if ( src.m_data == this->GetNullData() )
        {
            this->m_data = this->GetNullData();
        }
        else if ( src.m_data->m_owned )
        {
            this->m_data = src.m_data;
            this->IncRef();
        }
        else
        {



            this->m_data = new Data
                               (
                                   StrCopy(src.data(), src.length()),
                                   src.length()
                               );
        }
    }

    static CharType *StrCopy(const CharType *src, size_t len)
    {
        CharType *dst = (CharType*)malloc(sizeof(CharType) * (len + 1));
        if ( dst )
            memcpy(dst, src, sizeof(CharType) * (len + 1));
        return dst;
    }

protected:
    Data *m_data;
};

typedef wxScopedCharTypeBuffer<char> wxScopedCharBuffer;
typedef wxScopedCharTypeBuffer<wchar_t> wxScopedWCharBuffer;



template <typename T>
class wxCharTypeBuffer : public wxScopedCharTypeBuffer<T>
{
protected:
    typedef typename wxScopedCharTypeBuffer<T>::Data Data;

public:
    typedef T CharType;

    wxCharTypeBuffer(const CharType *str = __null, size_t len = ((size_t)-1))
    {
        if ( str )
        {
            if ( len == ((size_t)-1) )
                len = wxStrlen(str);
            this->m_data = new Data(this->StrCopy(str, len), len);
        }
        else
        {
            this->m_data = this->GetNullData();
        }
    }

    wxCharTypeBuffer(size_t len)
    {
        CharType* const str = (CharType *)malloc((len + 1)*sizeof(CharType));
        if ( str )
        {
            str[len] = (CharType)0;






            this->m_data = new Data(str, len);
        }
        else
        {
            this->m_data = this->GetNullData();
        }
    }

    wxCharTypeBuffer(const wxCharTypeBuffer& src)
        : wxScopedCharTypeBuffer<T>(src) {}

    wxCharTypeBuffer& operator=(const CharType *str)
    {
        this->DecRef();

        if ( str )
            this->m_data = new Data(wxStrdup(str), wxStrlen(str));
        return *this;
    }

    wxCharTypeBuffer& operator=(const wxCharTypeBuffer& src)
    {
        wxScopedCharTypeBuffer<T>::operator=(src);
        return *this;
    }

    wxCharTypeBuffer(const wxScopedCharTypeBuffer<T>& src)
    {
        this->MakeOwnedCopyOf(src);
    }

    wxCharTypeBuffer& operator=(const wxScopedCharTypeBuffer<T>& src)
    {
        MakeOwnedCopyOf(src);
        return *this;
    }

    bool extend(size_t len)
    {
        do { if ( wxTheAssertHandler && !(this->m_data->m_owned) && (wxOnAssert("/usr/local/include/wx-3.0/wx/buffer.h", 320, __FUNCTION__, "this->m_data->m_owned", "cannot extend non-owned buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
        do { if ( wxTheAssertHandler && !(this->m_data->m_ref == 1) && (wxOnAssert("/usr/local/include/wx-3.0/wx/buffer.h", 321, __FUNCTION__, "this->m_data->m_ref == 1", "can't extend shared buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );

        CharType *str =
            (CharType *)realloc(this->data(), (len + 1) * sizeof(CharType));
        if ( !str )
            return false;



        str[len] = (CharType)0;

        if ( this->m_data == this->GetNullData() )
        {
            this->m_data = new Data(str, len);
        }
        else
        {
            this->m_data->Set(str, len);
            this->m_data->m_owned = true;
        }

        return true;
    }

    void shrink(size_t len)
    {
        do { if ( wxTheAssertHandler && !(this->m_data->m_owned) && (wxOnAssert("/usr/local/include/wx-3.0/wx/buffer.h", 347, __FUNCTION__, "this->m_data->m_owned", "cannot shrink non-owned buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
        do { if ( wxTheAssertHandler && !(this->m_data->m_ref == 1) && (wxOnAssert("/usr/local/include/wx-3.0/wx/buffer.h", 348, __FUNCTION__, "this->m_data->m_ref == 1", "can't shrink shared buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );

        do { if ( wxTheAssertHandler && !(len <= this->length()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/buffer.h", 350, __FUNCTION__, "len <= this->length()", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );

        this->m_data->m_length = len;
        this->data()[len] = 0;
    }
};




class wxCharBuffer : public wxCharTypeBuffer<char>
{
public:
    typedef wxCharTypeBuffer<char> wxCharTypeBufferBase;
    typedef wxScopedCharTypeBuffer<char> wxScopedCharTypeBufferBase;

    wxCharBuffer(const wxCharTypeBufferBase& buf)
        : wxCharTypeBufferBase(buf) {}
    wxCharBuffer(const wxScopedCharTypeBufferBase& buf)
        : wxCharTypeBufferBase(buf) {}

    wxCharBuffer(const CharType *str = __null) : wxCharTypeBufferBase(str) {}
    wxCharBuffer(size_t len) : wxCharTypeBufferBase(len) {}

    wxCharBuffer(const wxCStrData& cstr);
};




class wxWCharBuffer : public wxCharTypeBuffer<wchar_t>
{
public:
    typedef wxCharTypeBuffer<wchar_t> wxCharTypeBufferBase;
    typedef wxScopedCharTypeBuffer<wchar_t> wxScopedCharTypeBufferBase;

    wxWCharBuffer(const wxCharTypeBufferBase& buf)
        : wxCharTypeBufferBase(buf) {}
    wxWCharBuffer(const wxScopedCharTypeBufferBase& buf)
        : wxCharTypeBufferBase(buf) {}

    wxWCharBuffer(const CharType *str = __null) : wxCharTypeBufferBase(str) {}
    wxWCharBuffer(size_t len) : wxCharTypeBufferBase(len) {}

    wxWCharBuffer(const wxCStrData& cstr);
};


template <typename T>
class wxWritableCharTypeBuffer : public wxCharTypeBuffer<T>
{
public:
    typedef typename wxScopedCharTypeBuffer<T>::CharType CharType;

    wxWritableCharTypeBuffer(const wxScopedCharTypeBuffer<T>& src)
        : wxCharTypeBuffer<T>(src) {}




    wxWritableCharTypeBuffer(const CharType *str = __null)
        : wxCharTypeBuffer<T>(str) {}

    operator CharType*() { return this->data(); }
};

typedef wxWritableCharTypeBuffer<char> wxWritableCharBuffer;
typedef wxWritableCharTypeBuffer<wchar_t> wxWritableWCharBuffer;
# 446 "/usr/local/include/wx-3.0/wx/buffer.h"
class wxMemoryBufferData
{
public:

    enum { DefBufSize = 1024 };

    friend class wxMemoryBuffer;


private:
    wxMemoryBufferData(size_t size = wxMemoryBufferData::DefBufSize)
        : m_data(size ? malloc(size) : __null), m_size(size), m_len(0), m_ref(0)
    {
    }
    ~wxMemoryBufferData() { free(m_data); }


    void ResizeIfNeeded(size_t newSize)
    {
        if (newSize > m_size)
        {
            void *dataOld = m_data;
            m_data = realloc(m_data, newSize + wxMemoryBufferData::DefBufSize);
            if ( !m_data )
            {
                free(dataOld);
            }

            m_size = newSize + wxMemoryBufferData::DefBufSize;
        }
    }

    void IncRef() { m_ref += 1; }
    void DecRef()
    {
        m_ref -= 1;
        if (m_ref == 0)
            delete this;
    }

    void *release()
    {
        if ( m_data == __null )
            return __null;

        do { if ( wxTheAssertHandler && !(m_ref == 1) && (wxOnAssert("/usr/local/include/wx-3.0/wx/buffer.h", 491, __FUNCTION__, "m_ref == 1", "can't release shared buffer"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );

        void *p = m_data;
        m_data = __null;
        m_len =
        m_size = 0;

        return p;
    }



    void *m_data;


    size_t m_size;


    size_t m_len;


    size_t m_ref;

    private: wxMemoryBufferData(const wxMemoryBufferData&); wxMemoryBufferData& operator=(const wxMemoryBufferData&);
};


class wxMemoryBuffer
{
public:

    wxMemoryBuffer(size_t size = wxMemoryBufferData::DefBufSize)
    {
        m_bufdata = new wxMemoryBufferData(size);
        m_bufdata->IncRef();
    }

    ~wxMemoryBuffer() { m_bufdata->DecRef(); }



    wxMemoryBuffer(const wxMemoryBuffer& src)
        : m_bufdata(src.m_bufdata)
    {
        m_bufdata->IncRef();
    }

    wxMemoryBuffer& operator=(const wxMemoryBuffer& src)
    {
        if (&src != this)
        {
            m_bufdata->DecRef();
            m_bufdata = src.m_bufdata;
            m_bufdata->IncRef();
        }
        return *this;
    }



    void *GetData() const { return m_bufdata->m_data; }
    size_t GetBufSize() const { return m_bufdata->m_size; }
    size_t GetDataLen() const { return m_bufdata->m_len; }

    bool IsEmpty() const { return GetDataLen() == 0; }

    void SetBufSize(size_t size) { m_bufdata->ResizeIfNeeded(size); }
    void SetDataLen(size_t len)
    {
        do { if ( wxTheAssertHandler && !(len <= m_bufdata->m_size) && (wxOnAssert("/usr/local/include/wx-3.0/wx/buffer.h", 560, __FUNCTION__, "len <= m_bufdata->m_size", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
        m_bufdata->m_len = len;
    }

    void Clear() { SetDataLen(0); }


    void *GetWriteBuf(size_t sizeNeeded)
    {
        m_bufdata->ResizeIfNeeded(sizeNeeded);
        return m_bufdata->m_data;
    }


    void UngetWriteBuf(size_t sizeUsed) { SetDataLen(sizeUsed); }


    void *GetAppendBuf(size_t sizeNeeded)
    {
        m_bufdata->ResizeIfNeeded(m_bufdata->m_len + sizeNeeded);
        return (char*)m_bufdata->m_data + m_bufdata->m_len;
    }


    void UngetAppendBuf(size_t sizeUsed)
    {
        SetDataLen(m_bufdata->m_len + sizeUsed);
    }


    void AppendByte(char data)
    {
        if ( m_bufdata->m_data ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/buffer.h", 592, __FUNCTION__, "m_bufdata->m_data", "invalid wxMemoryBuffer"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct;

        m_bufdata->ResizeIfNeeded(m_bufdata->m_len + 1);
        *(((char*)m_bufdata->m_data) + m_bufdata->m_len) = data;
        m_bufdata->m_len += 1;
    }

    void AppendData(const void *data, size_t len)
    {
        memcpy(GetAppendBuf(len), data, len);
        UngetAppendBuf(len);
    }

    operator const char *() const { return (const char*)GetData(); }



    void *release()
    {
        return m_bufdata->release();
    }

private:
    wxMemoryBufferData* m_bufdata;
};
# 18 "/usr/local/include/wx-3.0/wx/strconv.h" 2
# 27 "/usr/local/include/wx-3.0/wx/strconv.h"
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdlib.h" 1 3
# 28 "/usr/local/include/wx-3.0/wx/strconv.h" 2

class wxString;
# 47 "/usr/local/include/wx-3.0/wx/strconv.h"
class wxMBConv
{
public:
# 75 "/usr/local/include/wx-3.0/wx/strconv.h"
    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const;

    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const;





    const wxWCharBuffer cMB2WC(const char *in) const;
    const wxCharBuffer cWC2MB(const wchar_t *in) const;
# 103 "/usr/local/include/wx-3.0/wx/strconv.h"
    const wxWCharBuffer
        cMB2WC(const char *in, size_t inLen, size_t *outLen) const;
    const wxCharBuffer
        cWC2MB(const wchar_t *in, size_t inLen, size_t *outLen) const;




    const wxWCharBuffer cMB2WC(const wxScopedCharBuffer& in) const;
    const wxCharBuffer cWC2MB(const wxScopedWCharBuffer& in) const;
# 121 "/usr/local/include/wx-3.0/wx/strconv.h"
    const char* cMB2WX(const char *psz) const { return psz; }
    const char* cWX2MB(const char *psz) const { return psz; }
    const wxCharBuffer cWC2WX(const wchar_t *psz) const { return cWC2MB(psz); }
    const wxWCharBuffer cWX2WC(const char *psz) const { return cMB2WC(psz); }
# 138 "/usr/local/include/wx-3.0/wx/strconv.h"
    virtual size_t GetMBNulLen() const { return 1; }



    static size_t GetMaxMBNulLen() { return 4 ; }
# 167 "/usr/local/include/wx-3.0/wx/strconv.h"
    virtual size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const;
    virtual size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const;



    virtual wxMBConv *Clone() const = 0;


    virtual ~wxMBConv();
};






class wxMBConvLibc : public wxMBConv
{
public:
    virtual size_t MB2WC(wchar_t *outputBuf, const char *psz, size_t outputSize) const;
    virtual size_t WC2MB(char *outputBuf, const wchar_t *psz, size_t outputSize) const;

    virtual wxMBConv *Clone() const { return new wxMBConvLibc; }




};
# 205 "/usr/local/include/wx-3.0/wx/strconv.h"
class wxConvBrokenFileNames : public wxMBConv
{
public:
    wxConvBrokenFileNames(const wxString& charset);
    wxConvBrokenFileNames(const wxConvBrokenFileNames& conv)
        : wxMBConv(),
          m_conv(conv.m_conv ? conv.m_conv->Clone() : __null)
    {
    }
    virtual ~wxConvBrokenFileNames() { delete m_conv; }

    virtual size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
    {
        return m_conv->MB2WC(out, in, outLen);
    }

    virtual size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const
    {
        return m_conv->WC2MB(out, in, outLen);
    }

    virtual size_t GetMBNulLen() const
    {

        return m_conv->GetMBNulLen();
    }





    virtual wxMBConv *Clone() const { return new wxConvBrokenFileNames(*this); }

private:

    wxMBConv *m_conv;

    private: wxConvBrokenFileNames& operator=(const wxConvBrokenFileNames&);
};







class wxMBConvUTF7 : public wxMBConv
{
public:
    wxMBConvUTF7() { }




    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const;

    virtual wxMBConv *Clone() const { return new wxMBConvUTF7; }

private:


    struct StateMode
    {
        enum Mode
        {
            Direct,
            Shifted
        };
    };




    class DecoderState : private StateMode
    {
    private:


        Mode mode;

    public:

        DecoderState() { mode = Direct; }


        void ToDirect() { mode = Direct; }
        void ToShifted() { mode = Shifted; accum = bit = 0; isLSB = false; }

        bool IsDirect() const { return mode == Direct; }
        bool IsShifted() const { return mode == Shifted; }




        unsigned int accum;
        unsigned int bit;
        unsigned char msb;
        bool isLSB;
    };

    DecoderState m_stateDecoder;




    class EncoderState : private StateMode
    {
    private:
        Mode mode;

    public:
        EncoderState() { mode = Direct; }

        void ToDirect() { mode = Direct; }
        void ToShifted() { mode = Shifted; accum = bit = 0; }

        bool IsDirect() const { return mode == Direct; }
        bool IsShifted() const { return mode == Shifted; }

        unsigned int accum;
        unsigned int bit;
    };

    EncoderState m_stateEncoder;
};
# 341 "/usr/local/include/wx-3.0/wx/strconv.h"
class wxMBConvStrictUTF8 : public wxMBConv
{
public:


    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const;

    virtual wxMBConv *Clone() const { return new wxMBConvStrictUTF8(); }






};

class wxMBConvUTF8 : public wxMBConvStrictUTF8
{
public:
    enum
    {
        MAP_INVALID_UTF8_NOT = 0,
        MAP_INVALID_UTF8_TO_PUA = 1,
        MAP_INVALID_UTF8_TO_OCTAL = 2
    };

    wxMBConvUTF8(int options = MAP_INVALID_UTF8_NOT) : m_options(options) { }

    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const;

    virtual wxMBConv *Clone() const { return new wxMBConvUTF8(m_options); }







private:
    int m_options;
};





class wxMBConvUTF16Base : public wxMBConv
{
public:
    enum { BYTES_PER_CHAR = 2 };

    virtual size_t GetMBNulLen() const { return BYTES_PER_CHAR; }

protected:




    static size_t GetLength(const char *src, size_t srcLen);
};





class wxMBConvUTF16LE : public wxMBConvUTF16Base
{
public:
    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const;
    virtual wxMBConv *Clone() const { return new wxMBConvUTF16LE; }
};





class wxMBConvUTF16BE : public wxMBConvUTF16Base
{
public:
    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const;
    virtual wxMBConv *Clone() const { return new wxMBConvUTF16BE; }
};





class wxMBConvUTF32Base : public wxMBConv
{
public:
    enum { BYTES_PER_CHAR = 4 };

    virtual size_t GetMBNulLen() const { return BYTES_PER_CHAR; }

protected:



    static size_t GetLength(const char *src, size_t srcLen);
};





class wxMBConvUTF32LE : public wxMBConvUTF32Base
{
public:
    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const;
    virtual wxMBConv *Clone() const { return new wxMBConvUTF32LE; }
};





class wxMBConvUTF32BE : public wxMBConvUTF32Base
{
public:
    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const;
    virtual wxMBConv *Clone() const { return new wxMBConvUTF32BE; }
};






# 1 "/usr/local/include/wx-3.0/wx/fontenc.h" 1
# 15 "/usr/local/include/wx-3.0/wx/fontenc.h"
enum wxFontEncoding
{
    wxFONTENCODING_SYSTEM = -1,
    wxFONTENCODING_DEFAULT,


    wxFONTENCODING_ISO8859_1,
    wxFONTENCODING_ISO8859_2,
    wxFONTENCODING_ISO8859_3,
    wxFONTENCODING_ISO8859_4,
    wxFONTENCODING_ISO8859_5,
    wxFONTENCODING_ISO8859_6,
    wxFONTENCODING_ISO8859_7,
    wxFONTENCODING_ISO8859_8,
    wxFONTENCODING_ISO8859_9,
    wxFONTENCODING_ISO8859_10,
    wxFONTENCODING_ISO8859_11,
    wxFONTENCODING_ISO8859_12,


    wxFONTENCODING_ISO8859_13,
    wxFONTENCODING_ISO8859_14,
    wxFONTENCODING_ISO8859_15,
    wxFONTENCODING_ISO8859_MAX,


    wxFONTENCODING_KOI8,
    wxFONTENCODING_KOI8_U,
    wxFONTENCODING_ALTERNATIVE,
    wxFONTENCODING_BULGARIAN,



    wxFONTENCODING_CP437,
    wxFONTENCODING_CP850,
    wxFONTENCODING_CP852,
    wxFONTENCODING_CP855,
    wxFONTENCODING_CP866,

    wxFONTENCODING_CP874,
    wxFONTENCODING_CP932,
    wxFONTENCODING_CP936,
    wxFONTENCODING_CP949,
    wxFONTENCODING_CP950,
    wxFONTENCODING_CP1250,
    wxFONTENCODING_CP1251,
    wxFONTENCODING_CP1252,
    wxFONTENCODING_CP1253,
    wxFONTENCODING_CP1254,
    wxFONTENCODING_CP1255,
    wxFONTENCODING_CP1256,
    wxFONTENCODING_CP1257,
    wxFONTENCODING_CP1258,
    wxFONTENCODING_CP1361,
    wxFONTENCODING_CP12_MAX,

    wxFONTENCODING_UTF7,
    wxFONTENCODING_UTF8,
    wxFONTENCODING_EUC_JP,
    wxFONTENCODING_UTF16BE,
    wxFONTENCODING_UTF16LE,
    wxFONTENCODING_UTF32BE,
    wxFONTENCODING_UTF32LE,

    wxFONTENCODING_MACROMAN,
    wxFONTENCODING_MACJAPANESE,
    wxFONTENCODING_MACCHINESETRAD,
    wxFONTENCODING_MACKOREAN,
    wxFONTENCODING_MACARABIC,
    wxFONTENCODING_MACHEBREW,
    wxFONTENCODING_MACGREEK,
    wxFONTENCODING_MACCYRILLIC,
    wxFONTENCODING_MACDEVANAGARI,
    wxFONTENCODING_MACGURMUKHI,
    wxFONTENCODING_MACGUJARATI,
    wxFONTENCODING_MACORIYA,
    wxFONTENCODING_MACBENGALI,
    wxFONTENCODING_MACTAMIL,
    wxFONTENCODING_MACTELUGU,
    wxFONTENCODING_MACKANNADA,
    wxFONTENCODING_MACMALAJALAM,
    wxFONTENCODING_MACSINHALESE,
    wxFONTENCODING_MACBURMESE,
    wxFONTENCODING_MACKHMER,
    wxFONTENCODING_MACTHAI,
    wxFONTENCODING_MACLAOTIAN,
    wxFONTENCODING_MACGEORGIAN,
    wxFONTENCODING_MACARMENIAN,
    wxFONTENCODING_MACCHINESESIMP,
    wxFONTENCODING_MACTIBETAN,
    wxFONTENCODING_MACMONGOLIAN,
    wxFONTENCODING_MACETHIOPIC,
    wxFONTENCODING_MACCENTRALEUR,
    wxFONTENCODING_MACVIATNAMESE,
    wxFONTENCODING_MACARABICEXT,
    wxFONTENCODING_MACSYMBOL,
    wxFONTENCODING_MACDINGBATS,
    wxFONTENCODING_MACTURKISH,
    wxFONTENCODING_MACCROATIAN,
    wxFONTENCODING_MACICELANDIC,
    wxFONTENCODING_MACROMANIAN,
    wxFONTENCODING_MACCELTIC,
    wxFONTENCODING_MACGAELIC,
    wxFONTENCODING_MACKEYBOARD,



    wxFONTENCODING_ISO2022_JP,

    wxFONTENCODING_MAX,

    wxFONTENCODING_MACMIN = wxFONTENCODING_MACROMAN ,
    wxFONTENCODING_MACMAX = wxFONTENCODING_MACKEYBOARD ,






    wxFONTENCODING_UTF16 = wxFONTENCODING_UTF16LE,
    wxFONTENCODING_UTF32 = wxFONTENCODING_UTF32LE,







    wxFONTENCODING_UNICODE = wxFONTENCODING_UTF32,




    wxFONTENCODING_GB2312 = wxFONTENCODING_CP936,
    wxFONTENCODING_BIG5 = wxFONTENCODING_CP950,


    wxFONTENCODING_SHIFT_JIS = wxFONTENCODING_CP932,


    wxFONTENCODING_EUC_KR = wxFONTENCODING_CP949,
    wxFONTENCODING_JOHAB = wxFONTENCODING_CP1361,


    wxFONTENCODING_VIETNAMESE = wxFONTENCODING_CP1258
};
# 487 "/usr/local/include/wx-3.0/wx/strconv.h" 2

class wxCSConv : public wxMBConv
{
public:


    wxCSConv(const wxString& charset);
    wxCSConv(wxFontEncoding encoding);

    wxCSConv(const wxCSConv& conv);
    virtual ~wxCSConv();

    wxCSConv& operator=(const wxCSConv& conv);

    virtual size_t ToWChar(wchar_t *dst, size_t dstLen,
                           const char *src, size_t srcLen = ((size_t)-1)) const;
    virtual size_t FromWChar(char *dst, size_t dstLen,
                             const wchar_t *src, size_t srcLen = ((size_t)-1)) const;
    virtual size_t GetMBNulLen() const;





    virtual wxMBConv *Clone() const { return new wxCSConv(*this); }

    void Clear();


    bool IsOk() const;

private:

    void Init();



    wxMBConv *DoCreate() const;



    void SetName(const char *charset);






    void SetEncoding(wxFontEncoding encoding);
# 546 "/usr/local/include/wx-3.0/wx/strconv.h"
    char *m_name;
    wxFontEncoding m_encoding;



    wxMBConv *m_convReal;
};
# 576 "/usr/local/include/wx-3.0/wx/strconv.h"
extern wxMBConv* wxConvLibcPtr; extern wxMBConv* wxGet_wxConvLibcPtr(); inline wxMBConv& wxGet_wxConvLibc() { if ( !wxConvLibcPtr ) wxConvLibcPtr = wxGet_wxConvLibcPtr(); return *wxConvLibcPtr; }



extern wxCSConv* wxConvISO8859_1Ptr; extern wxCSConv* wxGet_wxConvISO8859_1Ptr(); inline wxCSConv& wxGet_wxConvISO8859_1() { if ( !wxConvISO8859_1Ptr ) wxConvISO8859_1Ptr = wxGet_wxConvISO8859_1Ptr(); return *wxConvISO8859_1Ptr; }


extern wxMBConvStrictUTF8* wxConvUTF8Ptr; extern wxMBConvStrictUTF8* wxGet_wxConvUTF8Ptr(); inline wxMBConvStrictUTF8& wxGet_wxConvUTF8() { if ( !wxConvUTF8Ptr ) wxConvUTF8Ptr = wxGet_wxConvUTF8Ptr(); return *wxConvUTF8Ptr; }


extern wxMBConvUTF7* wxConvUTF7Ptr; extern wxMBConvUTF7* wxGet_wxConvUTF7Ptr(); inline wxMBConvUTF7& wxGet_wxConvUTF7() { if ( !wxConvUTF7Ptr ) wxConvUTF7Ptr = wxGet_wxConvUTF7Ptr(); return *wxConvUTF7Ptr; }
# 596 "/usr/local/include/wx-3.0/wx/strconv.h"
extern wxMBConv * wxConvFileName;






extern wxMBConv * wxConvCurrent;


extern wxCSConv* wxConvLocalPtr; extern wxCSConv* wxGet_wxConvLocalPtr(); inline wxCSConv& wxGet_wxConvLocal() { if ( !wxConvLocalPtr ) wxConvLocalPtr = wxGet_wxConvLocalPtr(); return *wxConvLocalPtr; }






extern wxMBConv * wxConvUI;
# 625 "/usr/local/include/wx-3.0/wx/strconv.h"
    typedef wxMBConvUTF16LE wxMBConvUTF16;
    typedef wxMBConvUTF32LE wxMBConvUTF32;
# 21 "/usr/local/include/wx-3.0/wx/strvararg.h" 2

# 1 "/usr/local/include/wx-3.0/wx/unichar.h" 1
# 15 "/usr/local/include/wx-3.0/wx/unichar.h"
# 1 "/usr/local/include/wx-3.0/wx/stringimpl.h" 1
# 28 "/usr/local/include/wx-3.0/wx/stringimpl.h"
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdlib.h" 1 3
# 29 "/usr/local/include/wx-3.0/wx/stringimpl.h" 2
# 44 "/usr/local/include/wx-3.0/wx/stringimpl.h"
extern const wxChar* wxEmptyString;
# 108 "/usr/local/include/wx-3.0/wx/stringimpl.h"
struct wxStringData
{
  int nRefs;
  size_t nDataLength,
          nAllocLength;


  wxStringCharType* data() const { return (wxStringCharType*)(this + 1); }


  bool IsEmpty() const { return (nRefs == -1); }
  bool IsShared() const { return (nRefs > 1); }


  void Lock() { if ( !IsEmpty() ) nRefs++; }
# 135 "/usr/local/include/wx-3.0/wx/stringimpl.h"
  void Unlock() { if ( !IsEmpty() && --nRefs == 0) free(this); }




  void Validate(bool b) { nRefs = (b ? 1 : 0); }
  bool IsValid() const { return (nRefs != 0); }
};

class wxStringImpl
{
public:

  static const size_t npos;

protected:

  wxStringCharType *m_pchData;


  wxStringData* GetStringData() const { return (wxStringData*)m_pchData - 1; }







  void Init() { m_pchData = (wxStringCharType *)wxEmptyString; }


  void InitWith(const wxStringCharType *psz, size_t nPos = 0, size_t nLen = npos);

  void Reinit() { GetStringData()->Unlock(); Init(); }



  bool AllocBuffer(size_t nLen);

  bool AssignCopy(size_t, const wxStringCharType *);


  bool ConcatSelf(size_t nLen, const wxStringCharType *src, size_t nMaxLen);
  bool ConcatSelf(size_t nLen, const wxStringCharType *src)
    { return ConcatSelf(nLen, src, nLen); }



  bool CopyBeforeWrite();
  bool AllocBeforeWrite(size_t);


  bool Alloc(size_t nLen);

public:

  typedef wxStringCharType value_type;
  typedef wxStringCharType char_type;
  typedef size_t size_type;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef value_type* pointer;
  typedef const value_type* const_pointer;
# 265 "/usr/local/include/wx-3.0/wx/stringimpl.h"
  class const_iterator;

  class iterator
  {
    public: typedef wxStringCharType value_type; typedef wxStringCharType& reference; typedef wxStringCharType* pointer; typedef int difference_type; iterator() : m_ptr(__null) { } iterator(pointer ptr) : m_ptr(ptr) { } reference operator*() const { return *m_ptr; } iterator& operator++() { m_ptr++; return *this; } iterator operator++(int) { const iterator tmp(*this); m_ptr++; return tmp; } iterator& operator--() { m_ptr--; return *this; } iterator operator--(int) { const iterator tmp(*this); m_ptr--; return tmp; } iterator operator+(ptrdiff_t n) const { return iterator(m_ptr + n); } iterator operator-(ptrdiff_t n) const { return iterator(m_ptr - n); } iterator& operator+=(ptrdiff_t n) { m_ptr += n; return *this; } iterator& operator-=(ptrdiff_t n) { m_ptr -= n; return *this; } difference_type operator-(const iterator& i) const { return m_ptr - i.m_ptr; } bool operator==(const iterator& i) const { return m_ptr == i.m_ptr; } bool operator!=(const iterator& i) const { return m_ptr != i.m_ptr; } bool operator<(const iterator& i) const { return m_ptr < i.m_ptr; } bool operator>(const iterator& i) const { return m_ptr > i.m_ptr; } bool operator<=(const iterator& i) const { return m_ptr <= i.m_ptr; } bool operator>=(const iterator& i) const { return m_ptr >= i.m_ptr; } private: pointer GetPtr() const { return m_ptr; } friend class wxStringImpl; pointer m_ptr;



    friend class const_iterator;
  };

  class const_iterator
  {
  public:
      const_iterator(iterator i) : m_ptr(i.m_ptr) { }

      public: typedef wxStringCharType value_type; typedef const wxStringCharType& reference; typedef const wxStringCharType* pointer; typedef int difference_type; const_iterator() : m_ptr(__null) { } const_iterator(pointer ptr) : m_ptr(ptr) { } reference operator*() const { return *m_ptr; } const_iterator& operator++() { m_ptr++; return *this; } const_iterator operator++(int) { const const_iterator tmp(*this); m_ptr++; return tmp; } const_iterator& operator--() { m_ptr--; return *this; } const_iterator operator--(int) { const const_iterator tmp(*this); m_ptr--; return tmp; } const_iterator operator+(ptrdiff_t n) const { return const_iterator(m_ptr + n); } const_iterator operator-(ptrdiff_t n) const { return const_iterator(m_ptr - n); } const_iterator& operator+=(ptrdiff_t n) { m_ptr += n; return *this; } const_iterator& operator-=(ptrdiff_t n) { m_ptr -= n; return *this; } difference_type operator-(const const_iterator& i) const { return m_ptr - i.m_ptr; } bool operator==(const const_iterator& i) const { return m_ptr == i.m_ptr; } bool operator!=(const const_iterator& i) const { return m_ptr != i.m_ptr; } bool operator<(const const_iterator& i) const { return m_ptr < i.m_ptr; } bool operator>(const const_iterator& i) const { return m_ptr > i.m_ptr; } bool operator<=(const const_iterator& i) const { return m_ptr <= i.m_ptr; } bool operator>=(const const_iterator& i) const { return m_ptr >= i.m_ptr; } private: pointer GetPtr() const { return m_ptr; } friend class wxStringImpl; pointer m_ptr;


  };






  wxStringImpl() { Init(); }

  wxStringImpl(const wxStringImpl& stringSrc)
  {
    do { if ( wxTheAssertHandler && !(stringSrc.GetStringData()->IsValid()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/stringimpl.h", 296, __FUNCTION__, "stringSrc.GetStringData()->IsValid()", "did you forget to call UngetWriteBuf()?"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );


    if ( stringSrc.empty() ) {

      Init();
    }
    else {
      m_pchData = stringSrc.m_pchData;
      GetStringData()->Lock();
    }
  }

  wxStringImpl(size_type nRepeat, wxStringCharType ch);


  wxStringImpl(const wxStringCharType *psz)
      { InitWith(psz, 0, npos); }
  wxStringImpl(const wxStringCharType *psz, size_t nLength)
      { InitWith(psz, 0, nLength); }

  wxStringImpl(const wxStringImpl& str, size_t nPos, size_t nLen)
  {
    do { if ( wxTheAssertHandler && !(str.GetStringData()->IsValid()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/stringimpl.h", 319, __FUNCTION__, "str.GetStringData()->IsValid()", "did you forget to call UngetWriteBuf()?"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );

    Init();
    size_t strLen = str.length() - nPos; nLen = strLen < nLen ? strLen : nLen;
    InitWith(str.c_str(), nPos, nLen);
  }

  wxStringImpl(const_iterator start, const_iterator end);
# 346 "/usr/local/include/wx-3.0/wx/stringimpl.h"
  ~wxStringImpl()
  {
      GetStringData()->Unlock();
  }







  wxStringImpl& operator=(const wxStringImpl& stringSrc);

  wxStringImpl& operator=(wxStringCharType ch);

  wxStringImpl& operator=(const wxStringCharType *psz);


  size_type length() const { return GetStringData()->nDataLength; }

  size_type size() const { return length(); }

  size_type max_size() const { return npos; }

  void resize(size_t nSize, wxStringCharType ch = '\0');

  void clear() { erase(0, npos); }

  bool empty() const { return length() == 0; }

  void reserve(size_t sz) { Alloc(sz); }
  size_type capacity() const { return GetStringData()->nAllocLength; }



  value_type operator[](size_type n) const { return m_pchData[n]; }
  value_type at(size_type n) const
    { do { if ( wxTheAssertHandler && !((size_t)(n) <= length()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/stringimpl.h", 383, __FUNCTION__, "(size_t)(n) <= length()", "invalid index in wxString"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return m_pchData[n]; }

  reference operator[](size_type n) { CopyBeforeWrite(); return m_pchData[n]; }
  reference at(size_type n)
  {
    do { if ( wxTheAssertHandler && !((size_t)(n) <= length()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/stringimpl.h", 388, __FUNCTION__, "(size_t)(n) <= length()", "invalid index in wxString"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
    CopyBeforeWrite();
    return m_pchData[n];
  }



  wxStringImpl& append(const wxStringImpl& str, size_t pos, size_t n)
  {
    do { if ( wxTheAssertHandler && !(pos <= str.length()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/stringimpl.h", 397, __FUNCTION__, "pos <= str.length()", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
    ConcatSelf(n, str.c_str() + pos, str.length() - pos);
    return *this;
  }

  wxStringImpl& append(const wxStringImpl& str)
    { ConcatSelf(str.length(), str.c_str()); return *this; }

  wxStringImpl& append(const wxStringCharType *sz)
    { ConcatSelf(wxStrlen(sz), sz); return *this; }
  wxStringImpl& append(const wxStringCharType *sz, size_t n)
    { ConcatSelf(n, sz); return *this; }

  wxStringImpl& append(size_t n, wxStringCharType ch);

  wxStringImpl& append(const_iterator first, const_iterator last)
    { ConcatSelf(last - first, first.GetPtr()); return *this; }


  wxStringImpl& assign(const wxStringImpl& str)
    { return *this = str; }

  wxStringImpl& assign(const wxStringImpl& str, size_t pos, size_t n)
    { return replace(0, npos, str, pos, n); }

  wxStringImpl& assign(const wxStringCharType *sz)
    { return replace(0, npos, sz, wxStrlen(sz)); }
  wxStringImpl& assign(const wxStringCharType *sz, size_t n)
    { return replace(0, npos, sz, n); }

  wxStringImpl& assign(size_t n, wxStringCharType ch)
    { return replace(0, npos, n, ch); }

  wxStringImpl& assign(const_iterator first, const_iterator last)
    { return replace(begin(), end(), first, last); }


  const_iterator begin() const { return m_pchData; }
  iterator begin();

  const_iterator end() const { return m_pchData + length(); }
  iterator end();


  wxStringImpl& insert(size_t nPos, const wxStringImpl& str)
  {
    do { if ( wxTheAssertHandler && !(str.GetStringData()->IsValid()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/stringimpl.h", 443, __FUNCTION__, "str.GetStringData()->IsValid()", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
    return insert(nPos, str.c_str(), str.length());
  }

  wxStringImpl& insert(size_t nPos, const wxStringImpl& str, size_t nStart, size_t n)
  {
    do { if ( wxTheAssertHandler && !(str.GetStringData()->IsValid()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/stringimpl.h", 449, __FUNCTION__, "str.GetStringData()->IsValid()", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
    do { if ( wxTheAssertHandler && !(nStart < str.length()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/stringimpl.h", 450, __FUNCTION__, "nStart < str.length()", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
    size_t strLen = str.length() - nStart;
    n = strLen < n ? strLen : n;
    return insert(nPos, str.c_str() + nStart, n);
  }

  wxStringImpl& insert(size_t nPos, const wxStringCharType *sz, size_t n = npos);

  wxStringImpl& insert(size_t nPos, size_t n, wxStringCharType ch)
    { return insert(nPos, wxStringImpl(n, ch)); }
  iterator insert(iterator it, wxStringCharType ch)
    { size_t idx = it - begin(); insert(idx, 1, ch); return begin() + idx; }
  void insert(iterator it, const_iterator first, const_iterator last)
    { insert(it - begin(), first.GetPtr(), last - first); }
  void insert(iterator it, size_type n, wxStringCharType ch)
    { insert(it - begin(), n, ch); }


  wxStringImpl& erase(size_type pos = 0, size_type n = npos);
  iterator erase(iterator first, iterator last)
  {
    size_t idx = first - begin();
    erase(idx, last - first);
    return begin() + idx;
  }
  iterator erase(iterator first);


  const wxStringCharType* c_str() const { return m_pchData; }
  const wxStringCharType* data() const { return m_pchData; }


  wxStringImpl& replace(size_t nStart, size_t nLen, const wxStringCharType* sz)
    { return replace(nStart, nLen, sz, npos); }

  wxStringImpl& replace(size_t nStart, size_t nLen, const wxStringImpl& str)
    { return replace(nStart, nLen, str.c_str(), str.length()); }

  wxStringImpl& replace(size_t nStart, size_t nLen,
                        size_t nCount, wxStringCharType ch)
    { return replace(nStart, nLen, wxStringImpl(nCount, ch)); }

  wxStringImpl& replace(size_t nStart, size_t nLen,
                        const wxStringImpl& str, size_t nStart2, size_t nLen2)
    { return replace(nStart, nLen, str.substr(nStart2, nLen2)); }

  wxStringImpl& replace(size_t nStart, size_t nLen,
                        const wxStringCharType* sz, size_t nCount);

  wxStringImpl& replace(iterator first, iterator last, const_pointer s)
    { return replace(first - begin(), last - first, s); }
  wxStringImpl& replace(iterator first, iterator last, const_pointer s,
                        size_type n)
    { return replace(first - begin(), last - first, s, n); }
  wxStringImpl& replace(iterator first, iterator last, const wxStringImpl& s)
    { return replace(first - begin(), last - first, s); }
  wxStringImpl& replace(iterator first, iterator last, size_type n, wxStringCharType c)
    { return replace(first - begin(), last - first, n, c); }
  wxStringImpl& replace(iterator first, iterator last,
                        const_iterator first1, const_iterator last1)
    { return replace(first - begin(), last - first, first1.GetPtr(), last1 - first1); }


  void swap(wxStringImpl& str);






  size_t find(const wxStringImpl& str, size_t nStart = 0) const;


  size_t find(const wxStringCharType* sz, size_t nStart = 0, size_t n = npos) const;


  size_t find(wxStringCharType ch, size_t nStart = 0) const;




  size_t rfind(const wxStringImpl& str, size_t nStart = npos) const;


  size_t rfind(const wxStringCharType* sz, size_t nStart = npos,
               size_t n = npos) const;

  size_t rfind(wxStringCharType ch, size_t nStart = npos) const;

  size_type copy(wxStringCharType* s, size_type n, size_type pos = 0);


  wxStringImpl substr(size_t nStart = 0, size_t nLen = npos) const;


  wxStringImpl& operator+=(const wxStringImpl& s) { return append(s); }

  wxStringImpl& operator+=(const wxStringCharType *psz) { return append(psz); }

  wxStringImpl& operator+=(wxStringCharType ch) { return append(1, ch); }


  wxStringCharType *DoGetWriteBuf(size_t nLen);
  void DoUngetWriteBuf();
  void DoUngetWriteBuf(size_t nLen);

  friend class wxString;
};
# 16 "/usr/local/include/wx-3.0/wx/unichar.h" 2

class wxUniCharRef;
class wxString;



class wxUniChar
{
public:



    typedef wxUint32 value_type;

    wxUniChar() : m_value(0) {}



    wxUniChar(char c) { m_value = From8bit(c); }
    wxUniChar(unsigned char c) { m_value = From8bit((char)c); }



    wxUniChar(short c) { m_value = (value_type)c; } wxUniChar(unsigned short c) { m_value = (value_type)c; } wxUniChar(int c) { m_value = (value_type)c; } wxUniChar(unsigned int c) { m_value = (value_type)c; } wxUniChar(long c) { m_value = (value_type)c; } wxUniChar(unsigned long c) { m_value = (value_type)c; } wxUniChar(long long c) { m_value = (value_type)c; } wxUniChar(unsigned long long c) { m_value = (value_type)c; } wxUniChar(wchar_t c) { m_value = (value_type)c; }


    wxUniChar(const wxUniCharRef& c);


    value_type GetValue() const { return m_value; }
# 61 "/usr/local/include/wx-3.0/wx/unichar.h"
    bool IsAscii() const { return m_value < 0x80; }




    bool GetAsChar(char *c) const
    {
# 80 "/usr/local/include/wx-3.0/wx/unichar.h"
        *c = ((char)(m_value));
        return true;
    }




    operator char() const { return To8bit(m_value); }
    operator unsigned char() const { return (unsigned char)To8bit(m_value); }



    operator short() const { return (short)m_value; } operator unsigned short() const { return (unsigned short)m_value; } operator int() const { return (int)m_value; } operator unsigned int() const { return (unsigned int)m_value; } operator long() const { return (long)m_value; } operator unsigned long() const { return (unsigned long)m_value; } operator long long() const { return (long long)m_value; } operator unsigned long long() const { return (unsigned long long)m_value; } operator wchar_t() const { return (wchar_t)m_value; }







    operator bool() const { return m_value != 0; }
    bool operator!() const { return !((bool)*this); }



    bool operator&&(bool v) const { return (bool)*this && v; }


    wxUniChar& operator=(const wxUniChar& c) { if (&c != this) m_value = c.m_value; return *this; }
    wxUniChar& operator=(const wxUniCharRef& c);
    wxUniChar& operator=(char c) { m_value = From8bit(c); return *this; }
    wxUniChar& operator=(unsigned char c) { m_value = From8bit((char)c); return *this; }



    wxUniChar& operator=(short c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(unsigned short c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(int c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(unsigned int c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(long c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(unsigned long c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(long long c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(unsigned long long c) { m_value = (value_type)c; return *this; } wxUniChar& operator=(wchar_t c) { m_value = (value_type)c; return *this; }
# 129 "/usr/local/include/wx-3.0/wx/unichar.h"
    bool operator ==(const wxUniChar& c) const { return m_value == c.m_value; } bool operator ==(char c) const { return m_value == From8bit(c); } bool operator ==(unsigned char c) const { return m_value == From8bit((char)c); } bool operator ==(short c) const { return m_value == (value_type)c; } bool operator ==(unsigned short c) const { return m_value == (value_type)c; } bool operator ==(int c) const { return m_value == (value_type)c; } bool operator ==(unsigned int c) const { return m_value == (value_type)c; } bool operator ==(long c) const { return m_value == (value_type)c; } bool operator ==(unsigned long c) const { return m_value == (value_type)c; } bool operator ==(long long c) const { return m_value == (value_type)c; } bool operator ==(unsigned long long c) const { return m_value == (value_type)c; } bool operator ==(wchar_t c) const { return m_value == (value_type)c; } bool operator !=(const wxUniChar& c) const { return m_value != c.m_value; } bool operator !=(char c) const { return m_value != From8bit(c); } bool operator !=(unsigned char c) const { return m_value != From8bit((char)c); } bool operator !=(short c) const { return m_value != (value_type)c; } bool operator !=(unsigned short c) const { return m_value != (value_type)c; } bool operator !=(int c) const { return m_value != (value_type)c; } bool operator !=(unsigned int c) const { return m_value != (value_type)c; } bool operator !=(long c) const { return m_value != (value_type)c; } bool operator !=(unsigned long c) const { return m_value != (value_type)c; } bool operator !=(long long c) const { return m_value != (value_type)c; } bool operator !=(unsigned long long c) const { return m_value != (value_type)c; } bool operator !=(wchar_t c) const { return m_value != (value_type)c; } bool operator >=(const wxUniChar& c) const { return m_value >= c.m_value; } bool operator >=(char c) const { return m_value >= From8bit(c); } bool operator >=(unsigned char c) const { return m_value >= From8bit((char)c); } bool operator >=(short c) const { return m_value >= (value_type)c; } bool operator >=(unsigned short c) const { return m_value >= (value_type)c; } bool operator >=(int c) const { return m_value >= (value_type)c; } bool operator >=(unsigned int c) const { return m_value >= (value_type)c; } bool operator >=(long c) const { return m_value >= (value_type)c; } bool operator >=(unsigned long c) const { return m_value >= (value_type)c; } bool operator >=(long long c) const { return m_value >= (value_type)c; } bool operator >=(unsigned long long c) const { return m_value >= (value_type)c; } bool operator >=(wchar_t c) const { return m_value >= (value_type)c; } bool operator <=(const wxUniChar& c) const { return m_value <= c.m_value; } bool operator <=(char c) const { return m_value <= From8bit(c); } bool operator <=(unsigned char c) const { return m_value <= From8bit((char)c); } bool operator <=(short c) const { return m_value <= (value_type)c; } bool operator <=(unsigned short c) const { return m_value <= (value_type)c; } bool operator <=(int c) const { return m_value <= (value_type)c; } bool operator <=(unsigned int c) const { return m_value <= (value_type)c; } bool operator <=(long c) const { return m_value <= (value_type)c; } bool operator <=(unsigned long c) const { return m_value <= (value_type)c; } bool operator <=(long long c) const { return m_value <= (value_type)c; } bool operator <=(unsigned long long c) const { return m_value <= (value_type)c; } bool operator <=(wchar_t c) const { return m_value <= (value_type)c; } bool operator >(const wxUniChar& c) const { return m_value > c.m_value; } bool operator >(char c) const { return m_value > From8bit(c); } bool operator >(unsigned char c) const { return m_value > From8bit((char)c); } bool operator >(short c) const { return m_value > (value_type)c; } bool operator >(unsigned short c) const { return m_value > (value_type)c; } bool operator >(int c) const { return m_value > (value_type)c; } bool operator >(unsigned int c) const { return m_value > (value_type)c; } bool operator >(long c) const { return m_value > (value_type)c; } bool operator >(unsigned long c) const { return m_value > (value_type)c; } bool operator >(long long c) const { return m_value > (value_type)c; } bool operator >(unsigned long long c) const { return m_value > (value_type)c; } bool operator >(wchar_t c) const { return m_value > (value_type)c; } bool operator <(const wxUniChar& c) const { return m_value < c.m_value; } bool operator <(char c) const { return m_value < From8bit(c); } bool operator <(unsigned char c) const { return m_value < From8bit((char)c); } bool operator <(short c) const { return m_value < (value_type)c; } bool operator <(unsigned short c) const { return m_value < (value_type)c; } bool operator <(int c) const { return m_value < (value_type)c; } bool operator <(unsigned int c) const { return m_value < (value_type)c; } bool operator <(long c) const { return m_value < (value_type)c; } bool operator <(unsigned long c) const { return m_value < (value_type)c; } bool operator <(long long c) const { return m_value < (value_type)c; } bool operator <(unsigned long long c) const { return m_value < (value_type)c; } bool operator <(wchar_t c) const { return m_value < (value_type)c; }





    int operator-(const wxUniChar& c) const { return m_value - c.m_value; }
    int operator-(char c) const { return m_value - From8bit(c); }
    int operator-(unsigned char c) const { return m_value - From8bit((char)c); }
    int operator-(wchar_t c) const { return m_value - (value_type)c; }


private:


    static value_type From8bit(char c)
    {






        return c;

    }

    static char To8bit(value_type c)
    {






        return ((char)(c));

    }


    static value_type FromHi8bit(char c);
    static char ToHi8bit(value_type v);
    static bool GetAsHi8bit(value_type v, char *c);

private:
    value_type m_value;
};






class wxUniCharRef
{
private:
    typedef wxStringImpl::iterator iterator;





    wxUniCharRef(iterator pos) : m_pos(pos) {}


public:
# 204 "/usr/local/include/wx-3.0/wx/unichar.h"
    static wxUniCharRef CreateForString(iterator pos)
        { return wxUniCharRef(pos); }


    wxUniChar::value_type GetValue() const { return UniChar().GetValue(); }





    bool IsAscii() const { return UniChar().IsAscii(); }
    bool GetAsChar(char *c) const { return UniChar().GetAsChar(c); }





    wxUniCharRef& operator=(const wxUniChar& c) { *m_pos = c; return *this; }


    wxUniCharRef& operator=(const wxUniCharRef& c)
        { if (&c != this) *this = c.UniChar(); return *this; }



    wxUniCharRef& operator=(char c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(unsigned char c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(short c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(unsigned short c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(int c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(unsigned int c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(long c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(unsigned long c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(long long c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(unsigned long long c) { return *this = wxUniChar(c); } wxUniCharRef& operator=(wchar_t c) { return *this = wxUniChar(c); }





    operator char() const { return UniChar(); } operator unsigned char() const { return UniChar(); } operator short() const { return UniChar(); } operator unsigned short() const { return UniChar(); } operator int() const { return UniChar(); } operator unsigned int() const { return UniChar(); } operator long() const { return UniChar(); } operator unsigned long() const { return UniChar(); } operator long long() const { return UniChar(); } operator unsigned long long() const { return UniChar(); } operator wchar_t() const { return UniChar(); }



    operator bool() const { return (bool)UniChar(); }
    bool operator!() const { return !UniChar(); }
    bool operator&&(bool v) const { return UniChar() && v; }
# 252 "/usr/local/include/wx-3.0/wx/unichar.h"
    bool operator ==(const wxUniCharRef& c) const { return UniChar() == c.UniChar(); } bool operator ==(const wxUniChar& c) const { return UniChar() == c; } bool operator ==(char c) const { return UniChar() == c; } bool operator ==(unsigned char c) const { return UniChar() == c; } bool operator ==(short c) const { return UniChar() == c; } bool operator ==(unsigned short c) const { return UniChar() == c; } bool operator ==(int c) const { return UniChar() == c; } bool operator ==(unsigned int c) const { return UniChar() == c; } bool operator ==(long c) const { return UniChar() == c; } bool operator ==(unsigned long c) const { return UniChar() == c; } bool operator ==(long long c) const { return UniChar() == c; } bool operator ==(unsigned long long c) const { return UniChar() == c; } bool operator ==(wchar_t c) const { return UniChar() == c; } bool operator !=(const wxUniCharRef& c) const { return UniChar() != c.UniChar(); } bool operator !=(const wxUniChar& c) const { return UniChar() != c; } bool operator !=(char c) const { return UniChar() != c; } bool operator !=(unsigned char c) const { return UniChar() != c; } bool operator !=(short c) const { return UniChar() != c; } bool operator !=(unsigned short c) const { return UniChar() != c; } bool operator !=(int c) const { return UniChar() != c; } bool operator !=(unsigned int c) const { return UniChar() != c; } bool operator !=(long c) const { return UniChar() != c; } bool operator !=(unsigned long c) const { return UniChar() != c; } bool operator !=(long long c) const { return UniChar() != c; } bool operator !=(unsigned long long c) const { return UniChar() != c; } bool operator !=(wchar_t c) const { return UniChar() != c; } bool operator >=(const wxUniCharRef& c) const { return UniChar() >= c.UniChar(); } bool operator >=(const wxUniChar& c) const { return UniChar() >= c; } bool operator >=(char c) const { return UniChar() >= c; } bool operator >=(unsigned char c) const { return UniChar() >= c; } bool operator >=(short c) const { return UniChar() >= c; } bool operator >=(unsigned short c) const { return UniChar() >= c; } bool operator >=(int c) const { return UniChar() >= c; } bool operator >=(unsigned int c) const { return UniChar() >= c; } bool operator >=(long c) const { return UniChar() >= c; } bool operator >=(unsigned long c) const { return UniChar() >= c; } bool operator >=(long long c) const { return UniChar() >= c; } bool operator >=(unsigned long long c) const { return UniChar() >= c; } bool operator >=(wchar_t c) const { return UniChar() >= c; } bool operator <=(const wxUniCharRef& c) const { return UniChar() <= c.UniChar(); } bool operator <=(const wxUniChar& c) const { return UniChar() <= c; } bool operator <=(char c) const { return UniChar() <= c; } bool operator <=(unsigned char c) const { return UniChar() <= c; } bool operator <=(short c) const { return UniChar() <= c; } bool operator <=(unsigned short c) const { return UniChar() <= c; } bool operator <=(int c) const { return UniChar() <= c; } bool operator <=(unsigned int c) const { return UniChar() <= c; } bool operator <=(long c) const { return UniChar() <= c; } bool operator <=(unsigned long c) const { return UniChar() <= c; } bool operator <=(long long c) const { return UniChar() <= c; } bool operator <=(unsigned long long c) const { return UniChar() <= c; } bool operator <=(wchar_t c) const { return UniChar() <= c; } bool operator >(const wxUniCharRef& c) const { return UniChar() > c.UniChar(); } bool operator >(const wxUniChar& c) const { return UniChar() > c; } bool operator >(char c) const { return UniChar() > c; } bool operator >(unsigned char c) const { return UniChar() > c; } bool operator >(short c) const { return UniChar() > c; } bool operator >(unsigned short c) const { return UniChar() > c; } bool operator >(int c) const { return UniChar() > c; } bool operator >(unsigned int c) const { return UniChar() > c; } bool operator >(long c) const { return UniChar() > c; } bool operator >(unsigned long c) const { return UniChar() > c; } bool operator >(long long c) const { return UniChar() > c; } bool operator >(unsigned long long c) const { return UniChar() > c; } bool operator >(wchar_t c) const { return UniChar() > c; } bool operator <(const wxUniCharRef& c) const { return UniChar() < c.UniChar(); } bool operator <(const wxUniChar& c) const { return UniChar() < c; } bool operator <(char c) const { return UniChar() < c; } bool operator <(unsigned char c) const { return UniChar() < c; } bool operator <(short c) const { return UniChar() < c; } bool operator <(unsigned short c) const { return UniChar() < c; } bool operator <(int c) const { return UniChar() < c; } bool operator <(unsigned int c) const { return UniChar() < c; } bool operator <(long c) const { return UniChar() < c; } bool operator <(unsigned long c) const { return UniChar() < c; } bool operator <(long long c) const { return UniChar() < c; } bool operator <(unsigned long long c) const { return UniChar() < c; } bool operator <(wchar_t c) const { return UniChar() < c; }





    int operator-(const wxUniCharRef& c) const { return UniChar() - c.UniChar(); }
    int operator-(const wxUniChar& c) const { return UniChar() - c; }
    int operator-(char c) const { return UniChar() - c; }
    int operator-(unsigned char c) const { return UniChar() - c; }
    int operator-(wchar_t c) const { return UniChar() - c; }

private:



    wxUniChar UniChar() const { return *m_pos; }


    friend class wxUniChar;

private:




    iterator m_pos;
};

inline wxUniChar::wxUniChar(const wxUniCharRef& c)
{
    m_value = c.UniChar().m_value;
}

inline wxUniChar& wxUniChar::operator=(const wxUniCharRef& c)
{
    m_value = c.UniChar().m_value;
    return *this;
}




inline bool operator ==(char x, const wxUniChar& y) { return y == x; } inline bool operator !=(char x, const wxUniChar& y) { return y != x; } inline bool operator >=(char x, const wxUniChar& y) { return y <= x; } inline bool operator <=(char x, const wxUniChar& y) { return y >= x; } inline bool operator >(char x, const wxUniChar& y) { return y < x; } inline bool operator <(char x, const wxUniChar& y) { return y > x; }
inline bool operator ==(char x, const wxUniCharRef& y) { return y == x; } inline bool operator !=(char x, const wxUniCharRef& y) { return y != x; } inline bool operator >=(char x, const wxUniCharRef& y) { return y <= x; } inline bool operator <=(char x, const wxUniCharRef& y) { return y >= x; } inline bool operator >(char x, const wxUniCharRef& y) { return y < x; } inline bool operator <(char x, const wxUniCharRef& y) { return y > x; }

inline bool operator ==(wchar_t x, const wxUniChar& y) { return y == x; } inline bool operator !=(wchar_t x, const wxUniChar& y) { return y != x; } inline bool operator >=(wchar_t x, const wxUniChar& y) { return y <= x; } inline bool operator <=(wchar_t x, const wxUniChar& y) { return y >= x; } inline bool operator >(wchar_t x, const wxUniChar& y) { return y < x; } inline bool operator <(wchar_t x, const wxUniChar& y) { return y > x; }
inline bool operator ==(wchar_t x, const wxUniCharRef& y) { return y == x; } inline bool operator !=(wchar_t x, const wxUniCharRef& y) { return y != x; } inline bool operator >=(wchar_t x, const wxUniCharRef& y) { return y <= x; } inline bool operator <=(wchar_t x, const wxUniCharRef& y) { return y >= x; } inline bool operator >(wchar_t x, const wxUniCharRef& y) { return y < x; } inline bool operator <(wchar_t x, const wxUniCharRef& y) { return y > x; }

inline bool operator ==(const wxUniChar& x, const wxUniCharRef& y) { return y == x; } inline bool operator !=(const wxUniChar& x, const wxUniCharRef& y) { return y != x; } inline bool operator >=(const wxUniChar& x, const wxUniCharRef& y) { return y <= x; } inline bool operator <=(const wxUniChar& x, const wxUniCharRef& y) { return y >= x; } inline bool operator >(const wxUniChar& x, const wxUniCharRef& y) { return y < x; } inline bool operator <(const wxUniChar& x, const wxUniCharRef& y) { return y > x; }


inline int operator-(char c1, const wxUniCharRef& c2) { return -(c2 - c1); }
inline int operator-(const wxUniChar& c1, const wxUniCharRef& c2) { return -(c2 - c1); }
inline int operator-(wchar_t c1, const wxUniCharRef& c2) { return -(c2 - c1); }
# 23 "/usr/local/include/wx-3.0/wx/strvararg.h" 2


# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 1 3
# 390 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/cstddef" 1 3
# 41 "/Library/Developer/CommandLineTools/usr/include/c++/v1/cstddef" 3



# 1 "/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/include/stddef.h" 1 3 4
# 45 "/Library/Developer/CommandLineTools/usr/include/c++/v1/cstddef" 2 3


namespace std {inline namespace __1 {

using ::ptrdiff_t;
using ::size_t;






typedef long double max_align_t;


} }
# 391 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 2 3
# 394 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3


namespace std {inline namespace __1 {

template <class _T1, class _T2> struct __attribute__ ((__type_visibility__("default"))) pair;
template <class _Tp> class __attribute__ ((__type_visibility__("default"))) reference_wrapper;
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) hash;

template <class>
struct __void_t { typedef void type; };

template <class _Tp>
struct __identity { typedef _Tp type; };

template <class _Tp, bool>
struct __attribute__ ((__type_visibility__("default"))) __dependent_type : public _Tp {};

template <bool _Bp, class _If, class _Then>
    struct __attribute__ ((__type_visibility__("default"))) conditional {typedef _If type;};
template <class _If, class _Then>
    struct __attribute__ ((__type_visibility__("default"))) conditional<false, _If, _Then> {typedef _Then type;};





template <bool, class _Tp> struct __attribute__ ((__type_visibility__("default"))) __lazy_enable_if {};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) __lazy_enable_if<true, _Tp> {typedef typename _Tp::type type;};

template <bool, class _Tp = void> struct __attribute__ ((__type_visibility__("default"))) enable_if {};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) enable_if<true, _Tp> {typedef _Tp type;};
# 433 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp>
inline
__attribute__((__no_sanitize__("cfi"))) __attribute__ ((__visibility__("hidden"), __always_inline__))
_Tp*
addressof(_Tp& __x) throw()
{
    return __builtin_addressof(__x);
}
# 499 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
struct __two {char __lx[2];};



template <class _Tp, _Tp __v>
struct __attribute__ ((__type_visibility__("default"))) integral_constant
{
    static const _Tp value = __v;
    typedef _Tp value_type;
    typedef integral_constant type;
    __attribute__ ((__visibility__("hidden"), __always_inline__))
                          operator value_type() const throw() {return value;}




};

template <class _Tp, _Tp __v>
                  const _Tp integral_constant<_Tp, __v>::value;
# 528 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
typedef integral_constant<bool,(true)> true_type;
typedef integral_constant<bool,(false)> false_type;
# 610 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_const : public false_type {};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_const<_Tp const> : public true_type {};
# 620 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_volatile : public false_type {};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_volatile<_Tp volatile> : public true_type {};
# 630 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_const {typedef _Tp type;};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_const<const _Tp> {typedef _Tp type;};






template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_volatile {typedef _Tp type;};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_volatile<volatile _Tp> {typedef _Tp type;};






template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_cv
{typedef typename remove_volatile<typename remove_const<_Tp>::type>::type type;};






template <class _Tp> struct __libcpp_is_void : public false_type {};
template <> struct __libcpp_is_void<void> : public true_type {};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_void
    : public __libcpp_is_void<typename remove_cv<_Tp>::type> {};
# 667 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __is_nullptr_t_impl : public false_type {};
template <> struct __is_nullptr_t_impl<nullptr_t> : public true_type {};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) __is_nullptr_t
    : public __is_nullptr_t_impl<typename remove_cv<_Tp>::type> {};
# 685 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __libcpp_is_integral : public false_type {};
template <> struct __libcpp_is_integral<bool> : public true_type {};
template <> struct __libcpp_is_integral<char> : public true_type {};
template <> struct __libcpp_is_integral<signed char> : public true_type {};
template <> struct __libcpp_is_integral<unsigned char> : public true_type {};
template <> struct __libcpp_is_integral<wchar_t> : public true_type {};

template <> struct __libcpp_is_integral<char16_t> : public true_type {};
template <> struct __libcpp_is_integral<char32_t> : public true_type {};

template <> struct __libcpp_is_integral<short> : public true_type {};
template <> struct __libcpp_is_integral<unsigned short> : public true_type {};
template <> struct __libcpp_is_integral<int> : public true_type {};
template <> struct __libcpp_is_integral<unsigned int> : public true_type {};
template <> struct __libcpp_is_integral<long> : public true_type {};
template <> struct __libcpp_is_integral<unsigned long> : public true_type {};
template <> struct __libcpp_is_integral<long long> : public true_type {};
template <> struct __libcpp_is_integral<unsigned long long> : public true_type {};

template <> struct __libcpp_is_integral<__int128_t> : public true_type {};
template <> struct __libcpp_is_integral<__uint128_t> : public true_type {};


template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_integral
    : public __libcpp_is_integral<typename remove_cv<_Tp>::type> {};
# 718 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __libcpp_is_floating_point : public false_type {};
template <> struct __libcpp_is_floating_point<float> : public true_type {};
template <> struct __libcpp_is_floating_point<double> : public true_type {};
template <> struct __libcpp_is_floating_point<long double> : public true_type {};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_floating_point
    : public __libcpp_is_floating_point<typename remove_cv<_Tp>::type> {};
# 733 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_array
    : public false_type {};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_array<_Tp[]>
    : public true_type {};
template <class _Tp, size_t _Np> struct __attribute__ ((__type_visibility__("default"))) is_array<_Tp[_Np]>
    : public true_type {};
# 747 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __libcpp_is_pointer : public false_type {};
template <class _Tp> struct __libcpp_is_pointer<_Tp*> : public true_type {};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_pointer
    : public __libcpp_is_pointer<typename remove_cv<_Tp>::type> {};
# 760 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_lvalue_reference : public false_type {};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_lvalue_reference<_Tp&> : public true_type {};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_rvalue_reference : public false_type {};




template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_reference : public false_type {};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_reference<_Tp&> : public true_type {};
# 788 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_union
    : public integral_constant<bool, __is_union(_Tp)> {};
# 808 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_class
    : public integral_constant<bool, __is_class(_Tp)> {};
# 831 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp, class _Up> struct __attribute__ ((__type_visibility__("default"))) is_same : public false_type {};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_same<_Tp, _Tp> : public true_type {};
# 841 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
namespace __libcpp_is_function_imp
{
struct __dummy_type {};
template <class _Tp> char __test(_Tp*);
template <class _Tp> char __test(__dummy_type);
template <class _Tp> __two __test(...);
template <class _Tp> _Tp& __source(int);
template <class _Tp> __dummy_type __source(...);
}

template <class _Tp, bool = is_class<_Tp>::value ||
                            is_union<_Tp>::value ||
                            is_void<_Tp>::value ||
                            is_reference<_Tp>::value ||
                            __is_nullptr_t<_Tp>::value >
struct __libcpp_is_function
    : public integral_constant<bool, sizeof(__libcpp_is_function_imp::__test<_Tp>(__libcpp_is_function_imp::__source<_Tp>(0))) == 1>
    {};
template <class _Tp> struct __libcpp_is_function<_Tp, true> : public false_type {};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_function
    : public __libcpp_is_function<_Tp> {};
# 875 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _MP, bool _IsMemberFunctionPtr, bool _IsMemberObjectPtr>
struct __member_pointer_traits_imp
{
};


template <class _Tp> struct __libcpp_is_member_function_pointer
    : public false_type {};

template <class _Ret, class _Class>
struct __libcpp_is_member_function_pointer<_Ret _Class::*>
    : public is_function<_Ret> {};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_member_function_pointer
    : public __libcpp_is_member_function_pointer<typename remove_cv<_Tp>::type>::type {};
# 898 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __libcpp_is_member_pointer : public false_type {};
template <class _Tp, class _Up> struct __libcpp_is_member_pointer<_Tp _Up::*> : public true_type {};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_member_pointer
    : public __libcpp_is_member_pointer<typename remove_cv<_Tp>::type> {};
# 911 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_member_object_pointer
    : public integral_constant<bool, is_member_pointer<_Tp>::value &&
                                    !is_member_function_pointer<_Tp>::value> {};
# 924 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_enum
    : public integral_constant<bool, __is_enum(_Tp)> {};
# 950 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_arithmetic
    : public integral_constant<bool, is_integral<_Tp>::value ||
                                     is_floating_point<_Tp>::value> {};
# 961 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_fundamental
    : public integral_constant<bool, is_void<_Tp>::value ||
                                     __is_nullptr_t<_Tp>::value ||
                                     is_arithmetic<_Tp>::value> {};
# 973 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_scalar
    : public integral_constant<bool, is_arithmetic<_Tp>::value ||
                                     is_member_pointer<_Tp>::value ||
                                     is_pointer<_Tp>::value ||
                                     __is_nullptr_t<_Tp>::value ||
                                     is_enum<_Tp>::value > {};

template <> struct __attribute__ ((__type_visibility__("default"))) is_scalar<nullptr_t> : public true_type {};
# 989 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_object
    : public integral_constant<bool, is_scalar<_Tp>::value ||
                                     is_array<_Tp>::value ||
                                     is_union<_Tp>::value ||
                                     is_class<_Tp>::value > {};
# 1002 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> {};
# 1013 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
struct __is_referenceable_impl {
    template <class _Tp> static _Tp& __test(int);
    template <class _Tp> static __two __test(...);
};

template <class _Tp>
struct __is_referenceable : integral_constant<bool,
    !is_same<__decltype(__is_referenceable_impl::__test<_Tp>(0)), __two>::value> {};




template <class _Tp, bool = is_reference<_Tp>::value ||
                            is_function<_Tp>::value ||
                            is_const<_Tp>::value >
struct __add_const {typedef _Tp type;};

template <class _Tp>
struct __add_const<_Tp, false> {typedef const _Tp type;};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) add_const
    {typedef typename __add_const<_Tp>::type type;};







template <class _Tp, bool = is_reference<_Tp>::value ||
                            is_function<_Tp>::value ||
                            is_volatile<_Tp>::value >
struct __add_volatile {typedef _Tp type;};

template <class _Tp>
struct __add_volatile<_Tp, false> {typedef volatile _Tp type;};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) add_volatile
    {typedef typename __add_volatile<_Tp>::type type;};







template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) add_cv
    {typedef typename add_const<typename add_volatile<_Tp>::type>::type type;};







template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_reference {typedef _Tp type;};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_reference<_Tp&> {typedef _Tp type;};
# 1080 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp, bool = __is_referenceable<_Tp>::value> struct __add_lvalue_reference_impl { typedef _Tp type; };
template <class _Tp > struct __add_lvalue_reference_impl<_Tp, true> { typedef _Tp& type; };

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) add_lvalue_reference
{typedef typename __add_lvalue_reference_impl<_Tp>::type type;};
# 1115 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp>
typename add_lvalue_reference<_Tp>::type
declval();





template <class _Tp>
struct __uncvref {
    typedef typename remove_cv<typename remove_reference<_Tp>::type>::type type;
};

template <class _Tp>
struct __unconstref {
    typedef typename remove_const<typename remove_reference<_Tp>::type>::type type;
};
# 1140 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp, class _Up>
struct __is_same_uncvref : is_same<typename __uncvref<_Tp>::type,
                                   typename __uncvref<_Up>::type> {};

struct __any
{
    __any(...);
};



template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_pointer {typedef _Tp type;};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_pointer<_Tp*> {typedef _Tp type;};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_pointer<_Tp* const> {typedef _Tp type;};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_pointer<_Tp* volatile> {typedef _Tp type;};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_pointer<_Tp* const volatile> {typedef _Tp type;};







template <class _Tp,
        bool = __is_referenceable<_Tp>::value ||
                is_same<typename remove_cv<_Tp>::type, void>::value>
struct __add_pointer_impl
    {typedef typename remove_reference<_Tp>::type* type;};
template <class _Tp> struct __add_pointer_impl<_Tp, false>
    {typedef _Tp type;};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) add_pointer
    {typedef typename __add_pointer_impl<_Tp>::type type;};







template <class _Tp, bool = is_integral<_Tp>::value>
struct __libcpp_is_signed_impl : public integral_constant<bool,(_Tp(-1) < _Tp(0))> {};

template <class _Tp>
struct __libcpp_is_signed_impl<_Tp, false> : public true_type {};

template <class _Tp, bool = is_arithmetic<_Tp>::value>
struct __libcpp_is_signed : public __libcpp_is_signed_impl<_Tp> {};

template <class _Tp> struct __libcpp_is_signed<_Tp, false> : public false_type {};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_signed : public __libcpp_is_signed<_Tp> {};
# 1200 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp, bool = is_integral<_Tp>::value>
struct __libcpp_is_unsigned_impl : public integral_constant<bool,(_Tp(0) < _Tp(-1))> {};

template <class _Tp>
struct __libcpp_is_unsigned_impl<_Tp, false> : public false_type {};

template <class _Tp, bool = is_arithmetic<_Tp>::value>
struct __libcpp_is_unsigned : public __libcpp_is_unsigned_impl<_Tp> {};

template <class _Tp> struct __libcpp_is_unsigned<_Tp, false> : public false_type {};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_unsigned : public __libcpp_is_unsigned<_Tp> {};
# 1220 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) rank
    : public integral_constant<size_t, 0> {};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) rank<_Tp[]>
    : public integral_constant<size_t, rank<_Tp>::value + 1> {};
template <class _Tp, size_t _Np> struct __attribute__ ((__type_visibility__("default"))) rank<_Tp[_Np]>
    : public integral_constant<size_t, rank<_Tp>::value + 1> {};
# 1234 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp, unsigned _Ip = 0> struct __attribute__ ((__type_visibility__("default"))) extent
    : public integral_constant<size_t, 0> {};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) extent<_Tp[], 0>
    : public integral_constant<size_t, 0> {};
template <class _Tp, unsigned _Ip> struct __attribute__ ((__type_visibility__("default"))) extent<_Tp[], _Ip>
    : public integral_constant<size_t, extent<_Tp, _Ip-1>::value> {};
template <class _Tp, size_t _Np> struct __attribute__ ((__type_visibility__("default"))) extent<_Tp[_Np], 0>
    : public integral_constant<size_t, _Np> {};
template <class _Tp, size_t _Np, unsigned _Ip> struct __attribute__ ((__type_visibility__("default"))) extent<_Tp[_Np], _Ip>
    : public integral_constant<size_t, extent<_Tp, _Ip-1>::value> {};
# 1252 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_extent
    {typedef _Tp type;};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_extent<_Tp[]>
    {typedef _Tp type;};
template <class _Tp, size_t _Np> struct __attribute__ ((__type_visibility__("default"))) remove_extent<_Tp[_Np]>
    {typedef _Tp type;};







template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_all_extents
    {typedef _Tp type;};
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) remove_all_extents<_Tp[]>
    {typedef typename remove_all_extents<_Tp>::type type;};
template <class _Tp, size_t _Np> struct __attribute__ ((__type_visibility__("default"))) remove_all_extents<_Tp[_Np]>
    {typedef typename remove_all_extents<_Tp>::type type;};







template <class _Up, bool>
struct __decay {
    typedef typename remove_cv<_Up>::type type;
};

template <class _Up>
struct __decay<_Up, true> {
public:
    typedef typename conditional
                     <
                         is_array<_Up>::value,
                         typename remove_extent<_Up>::type*,
                         typename conditional
                         <
                              is_function<_Up>::value,
                              typename add_pointer<_Up>::type,
                              typename remove_cv<_Up>::type
                         >::type
                     >::type type;
};

template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) decay
{
private:
    typedef typename remove_reference<_Tp>::type _Up;
public:
    typedef typename __decay<_Up, __is_referenceable<_Up>::value>::type type;
};







template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)> {};
# 1325 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default")))
__libcpp_is_final : public integral_constant<bool, __is_final(_Tp)> {};
# 1359 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Bp, class _Dp>
struct __attribute__ ((__type_visibility__("default"))) is_base_of
    : public integral_constant<bool, __is_base_of(_Bp, _Dp)> {};
# 1399 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _T1, class _T2> struct __attribute__ ((__type_visibility__("default"))) is_convertible
    : public integral_constant<bool, __is_convertible_to(_T1, _T2) &&
                                     !is_abstract<_T2>::value> {};
# 1489 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_empty
    : public integral_constant<bool, __is_empty(_Tp)> {};
# 1525 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)> {};
# 1550 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)> {};
# 1567 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) alignment_of
    : public integral_constant<size_t, __alignof__(_Tp)> {};
# 1577 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Hp, class _Tp>
struct __type_list
{
    typedef _Hp _Head;
    typedef _Tp _Tail;
};

struct __nat
{






};

template <class _Tp>
struct __align_type
{
    static const size_t value = alignment_of<_Tp>::value;
    typedef _Tp type;
};

struct __struct_double {long double __lx;};
struct __struct_double4 {double __lx[4];};

typedef
    __type_list<__align_type<unsigned char>,
    __type_list<__align_type<unsigned short>,
    __type_list<__align_type<unsigned int>,
    __type_list<__align_type<unsigned long>,
    __type_list<__align_type<unsigned long long>,
    __type_list<__align_type<double>,
    __type_list<__align_type<long double>,
    __type_list<__align_type<__struct_double>,
    __type_list<__align_type<__struct_double4>,
    __type_list<__align_type<int*>,
    __nat
    > > > > > > > > > > __all_types;

template <class _TL, size_t _Align> struct __find_pod;

template <class _Hp, size_t _Align>
struct __find_pod<__type_list<_Hp, __nat>, _Align>
{
    typedef typename conditional<
                             _Align == _Hp::value,
                             typename _Hp::type,
                             void
                         >::type type;
};

template <class _Hp, class _Tp, size_t _Align>
struct __find_pod<__type_list<_Hp, _Tp>, _Align>
{
    typedef typename conditional<
                             _Align == _Hp::value,
                             typename _Hp::type,
                             typename __find_pod<_Tp, _Align>::type
                         >::type type;
};

template <class _TL, size_t _Len> struct __find_max_align;

template <class _Hp, size_t _Len>
struct __find_max_align<__type_list<_Hp, __nat>, _Len> : public integral_constant<size_t, _Hp::value> {};

template <size_t _Len, size_t _A1, size_t _A2>
struct __select_align
{
private:
    static const size_t __min = _A2 < _A1 ? _A2 : _A1;
    static const size_t __max = _A1 < _A2 ? _A2 : _A1;
public:
    static const size_t value = _Len < __max ? __min : __max;
};

template <class _Hp, class _Tp, size_t _Len>
struct __find_max_align<__type_list<_Hp, _Tp>, _Len>
    : public integral_constant<size_t, __select_align<_Len, _Hp::value, __find_max_align<_Tp, _Len>::value>::value> {};

template <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::value>
struct __attribute__ ((__type_visibility__("default"))) aligned_storage
{
    typedef typename __find_pod<__all_types, _Align>::type _Aligner;
    _Static_assert(!is_void<_Aligner>::value, "");
    union type
    {
        _Aligner __align;
        unsigned char __data[(_Len + _Align - 1)/_Align * _Align];
    };
};
# 1686 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x1>{ struct __attribute__((__aligned__(0x1))) type { unsigned char __lx[(_Len + 0x1 - 1)/0x1 * 0x1]; };};
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x2>{ struct __attribute__((__aligned__(0x2))) type { unsigned char __lx[(_Len + 0x2 - 1)/0x2 * 0x2]; };};
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x4>{ struct __attribute__((__aligned__(0x4))) type { unsigned char __lx[(_Len + 0x4 - 1)/0x4 * 0x4]; };};
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x8>{ struct __attribute__((__aligned__(0x8))) type { unsigned char __lx[(_Len + 0x8 - 1)/0x8 * 0x8]; };};
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x10>{ struct __attribute__((__aligned__(0x10))) type { unsigned char __lx[(_Len + 0x10 - 1)/0x10 * 0x10]; };};
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x20>{ struct __attribute__((__aligned__(0x20))) type { unsigned char __lx[(_Len + 0x20 - 1)/0x20 * 0x20]; };};
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x40>{ struct __attribute__((__aligned__(0x40))) type { unsigned char __lx[(_Len + 0x40 - 1)/0x40 * 0x40]; };};
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x80>{ struct __attribute__((__aligned__(0x80))) type { unsigned char __lx[(_Len + 0x80 - 1)/0x80 * 0x80]; };};
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x100>{ struct __attribute__((__aligned__(0x100))) type { unsigned char __lx[(_Len + 0x100 - 1)/0x100 * 0x100]; };};
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x200>{ struct __attribute__((__aligned__(0x200))) type { unsigned char __lx[(_Len + 0x200 - 1)/0x200 * 0x200]; };};
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x400>{ struct __attribute__((__aligned__(0x400))) type { unsigned char __lx[(_Len + 0x400 - 1)/0x400 * 0x400]; };};
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x800>{ struct __attribute__((__aligned__(0x800))) type { unsigned char __lx[(_Len + 0x800 - 1)/0x800 * 0x800]; };};
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x1000>{ struct __attribute__((__aligned__(0x1000))) type { unsigned char __lx[(_Len + 0x1000 - 1)/0x1000 * 0x1000]; };};
template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x2000>{ struct __attribute__((__aligned__(0x2000))) type { unsigned char __lx[(_Len + 0x2000 - 1)/0x2000 * 0x2000]; };};


template <size_t _Len>struct __attribute__ ((__type_visibility__("default"))) aligned_storage<_Len, 0x4000>{ struct __attribute__((__aligned__(0x4000))) type { unsigned char __lx[(_Len + 0x4000 - 1)/0x4000 * 0x4000]; };};
# 1743 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp>
struct __numeric_type
{
   static void __test(...);
   static float __test(float);
   static double __test(char);
   static double __test(int);
   static double __test(unsigned);
   static double __test(long);
   static double __test(unsigned long);
   static double __test(long long);
   static double __test(unsigned long long);
   static double __test(double);
   static long double __test(long double);

   typedef __decltype(__test(declval<_Tp>())) type;
   static const bool value = !is_same<type, void>::value;
};

template <>
struct __numeric_type<void>
{
   static const bool value = true;
};



template <class _A1, class _A2 = void, class _A3 = void,
          bool = __numeric_type<_A1>::value &&
                 __numeric_type<_A2>::value &&
                 __numeric_type<_A3>::value>
class __promote_imp
{
public:
    static const bool value = false;
};

template <class _A1, class _A2, class _A3>
class __promote_imp<_A1, _A2, _A3, true>
{
private:
    typedef typename __promote_imp<_A1>::type __type1;
    typedef typename __promote_imp<_A2>::type __type2;
    typedef typename __promote_imp<_A3>::type __type3;
public:
    typedef __decltype(__type1() + __type2() + __type3()) type;
    static const bool value = true;
};

template <class _A1, class _A2>
class __promote_imp<_A1, _A2, void, true>
{
private:
    typedef typename __promote_imp<_A1>::type __type1;
    typedef typename __promote_imp<_A2>::type __type2;
public:
    typedef __decltype(__type1() + __type2()) type;
    static const bool value = true;
};

template <class _A1>
class __promote_imp<_A1, void, void, true>
{
public:
    typedef typename __numeric_type<_A1>::type type;
    static const bool value = true;
};

template <class _A1, class _A2 = void, class _A3 = void>
class __promote : public __promote_imp<_A1, _A2, _A3> {};



typedef
    __type_list<signed char,
    __type_list<signed short,
    __type_list<signed int,
    __type_list<signed long,
    __type_list<signed long long,

    __type_list<__int128_t,

    __nat

    >

    > > > > > __signed_types;

typedef
    __type_list<unsigned char,
    __type_list<unsigned short,
    __type_list<unsigned int,
    __type_list<unsigned long,
    __type_list<unsigned long long,

    __type_list<__uint128_t,

    __nat

    >

    > > > > > __unsigned_types;

template <class _TypeList, size_t _Size, bool = _Size <= sizeof(typename _TypeList::_Head)> struct __find_first;

template <class _Hp, class _Tp, size_t _Size>
struct __find_first<__type_list<_Hp, _Tp>, _Size, true>
{
    typedef _Hp type;
};

template <class _Hp, class _Tp, size_t _Size>
struct __find_first<__type_list<_Hp, _Tp>, _Size, false>
{
    typedef typename __find_first<_Tp, _Size>::type type;
};

template <class _Tp, class _Up, bool = is_const<typename remove_reference<_Tp>::type>::value,
                             bool = is_volatile<typename remove_reference<_Tp>::type>::value>
struct __apply_cv
{
    typedef _Up type;
};

template <class _Tp, class _Up>
struct __apply_cv<_Tp, _Up, true, false>
{
    typedef const _Up type;
};

template <class _Tp, class _Up>
struct __apply_cv<_Tp, _Up, false, true>
{
    typedef volatile _Up type;
};

template <class _Tp, class _Up>
struct __apply_cv<_Tp, _Up, true, true>
{
    typedef const volatile _Up type;
};

template <class _Tp, class _Up>
struct __apply_cv<_Tp&, _Up, false, false>
{
    typedef _Up& type;
};

template <class _Tp, class _Up>
struct __apply_cv<_Tp&, _Up, true, false>
{
    typedef const _Up& type;
};

template <class _Tp, class _Up>
struct __apply_cv<_Tp&, _Up, false, true>
{
    typedef volatile _Up& type;
};

template <class _Tp, class _Up>
struct __apply_cv<_Tp&, _Up, true, true>
{
    typedef const volatile _Up& type;
};

template <class _Tp, bool = is_integral<_Tp>::value || is_enum<_Tp>::value>
struct __make_signed {};

template <class _Tp>
struct __make_signed<_Tp, true>
{
    typedef typename __find_first<__signed_types, sizeof(_Tp)>::type type;
};

template <> struct __make_signed<bool, true> {};
template <> struct __make_signed< signed short, true> {typedef short type;};
template <> struct __make_signed<unsigned short, true> {typedef short type;};
template <> struct __make_signed< signed int, true> {typedef int type;};
template <> struct __make_signed<unsigned int, true> {typedef int type;};
template <> struct __make_signed< signed long, true> {typedef long type;};
template <> struct __make_signed<unsigned long, true> {typedef long type;};
template <> struct __make_signed< signed long long, true> {typedef long long type;};
template <> struct __make_signed<unsigned long long, true> {typedef long long type;};

template <> struct __make_signed<__int128_t, true> {typedef __int128_t type;};
template <> struct __make_signed<__uint128_t, true> {typedef __int128_t type;};


template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) make_signed
{
    typedef typename __apply_cv<_Tp, typename __make_signed<typename remove_cv<_Tp>::type>::type>::type type;
};





template <class _Tp, bool = is_integral<_Tp>::value || is_enum<_Tp>::value>
struct __make_unsigned {};

template <class _Tp>
struct __make_unsigned<_Tp, true>
{
    typedef typename __find_first<__unsigned_types, sizeof(_Tp)>::type type;
};

template <> struct __make_unsigned<bool, true> {};
template <> struct __make_unsigned< signed short, true> {typedef unsigned short type;};
template <> struct __make_unsigned<unsigned short, true> {typedef unsigned short type;};
template <> struct __make_unsigned< signed int, true> {typedef unsigned int type;};
template <> struct __make_unsigned<unsigned int, true> {typedef unsigned int type;};
template <> struct __make_unsigned< signed long, true> {typedef unsigned long type;};
template <> struct __make_unsigned<unsigned long, true> {typedef unsigned long type;};
template <> struct __make_unsigned< signed long long, true> {typedef unsigned long long type;};
template <> struct __make_unsigned<unsigned long long, true> {typedef unsigned long long type;};

template <> struct __make_unsigned<__int128_t, true> {typedef __uint128_t type;};
template <> struct __make_unsigned<__uint128_t, true> {typedef __uint128_t type;};


template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) make_unsigned
{
    typedef typename __apply_cv<_Tp, typename __make_unsigned<typename remove_cv<_Tp>::type>::type>::type type;
};







template <class _Tp, class _Up = void, class _Vp = void>
struct __attribute__ ((__type_visibility__("default"))) common_type
{
public:
    typedef typename common_type<typename common_type<_Tp, _Up>::type, _Vp>::type type;
};

template <>
struct __attribute__ ((__type_visibility__("default"))) common_type<void, void, void>
{
public:
    typedef void type;
};

template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) common_type<_Tp, void, void>
{
public:
    typedef typename common_type<_Tp, _Tp>::type type;
};

template <class _Tp, class _Up>
struct __attribute__ ((__type_visibility__("default"))) common_type<_Tp, _Up, void>
{
    typedef typename decay<__decltype(true ? std::__1::declval<_Tp>() : std::__1::declval<_Up>())>::type type;


};
# 2085 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template<typename, typename _Tp> struct __select_2nd { typedef _Tp type; };

template <class _Tp, class _Arg>
typename __select_2nd<__decltype((std::__1::declval<_Tp>() = std::__1::declval<_Arg>())), true_type>::type
__is_assignable_test(int);

template <class, class>
false_type __is_assignable_test(...);


template <class _Tp, class _Arg, bool = is_void<_Tp>::value || is_void<_Arg>::value>
struct __is_assignable_imp
    : public __decltype((std::__1::__is_assignable_test<_Tp, _Arg>(0))) {};

template <class _Tp, class _Arg>
struct __is_assignable_imp<_Tp, _Arg, true>
    : public false_type
{
};

template <class _Tp, class _Arg>
struct is_assignable
    : public __is_assignable_imp<_Tp, _Arg> {};
# 2116 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_copy_assignable
    : public is_assignable<typename add_lvalue_reference<_Tp>::type,
                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};
# 2127 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_move_assignable




    : public is_copy_assignable<_Tp> {};
# 2149 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class>
struct __is_destructible_apply { typedef int type; };

template <typename _Tp>
struct __is_destructor_wellformed {
    template <typename _Tp1>
    static char __test (
        typename __is_destructible_apply<__decltype(std::__1::declval<_Tp1&>().~_Tp1())>::type
    );

    template <typename _Tp1>
    static __two __test (...);

    static const bool value = sizeof(__test<_Tp>(12)) == sizeof(char);
};

template <class _Tp, bool>
struct __destructible_imp;

template <class _Tp>
struct __destructible_imp<_Tp, false>
   : public std::__1::integral_constant<bool,
        __is_destructor_wellformed<typename std::__1::remove_all_extents<_Tp>::type>::value> {};

template <class _Tp>
struct __destructible_imp<_Tp, true>
    : public std::__1::true_type {};

template <class _Tp, bool>
struct __destructible_false;

template <class _Tp>
struct __destructible_false<_Tp, false> : public __destructible_imp<_Tp, std::__1::is_reference<_Tp>::value> {};

template <class _Tp>
struct __destructible_false<_Tp, true> : public std::__1::false_type {};

template <class _Tp>
struct is_destructible
    : public __destructible_false<_Tp, std::__1::is_function<_Tp>::value> {};

template <class _Tp>
struct is_destructible<_Tp[]>
    : public std::__1::false_type {};

template <>
struct is_destructible<void>
    : public std::__1::false_type {};
# 2236 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
_Tp&
move(_Tp& __t)
{
    return __t;
}

template <class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
const _Tp&
move(const _Tp& __t)
{
    return __t;
}

template <class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
_Tp&
forward(typename remove_reference<_Tp>::type& __t) throw()
{
    return __t;
}


template <class _Tp>
class __rv
{
    typedef typename remove_reference<_Tp>::type _Trr;
    _Trr& t_;
public:
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    _Trr* operator->() {return &t_;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    explicit __rv(_Trr& __t) : t_(__t) {}
};
# 2287 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename decay<_Tp>::type
__decay_copy(const _Tp& __t)
{
    return std::__1::forward<_Tp>(__t);
}
# 2498 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Rp, class _Class>
struct __member_pointer_traits_imp<_Rp (_Class::*)(), true, false>
{
    typedef _Class _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) ();
};

template <class _Rp, class _Class>
struct __member_pointer_traits_imp<_Rp (_Class::*)(...), true, false>
{
    typedef _Class _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (...);
};

template <class _Rp, class _Class, class _P0>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0), true, false>
{
    typedef _Class _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0);
};

template <class _Rp, class _Class, class _P0>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, ...), true, false>
{
    typedef _Class _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, ...);
};

template <class _Rp, class _Class, class _P0, class _P1>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1), true, false>
{
    typedef _Class _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1);
};

template <class _Rp, class _Class, class _P0, class _P1>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, ...), true, false>
{
    typedef _Class _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1, ...);
};

template <class _Rp, class _Class, class _P0, class _P1, class _P2>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2), true, false>
{
    typedef _Class _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1, _P2);
};

template <class _Rp, class _Class, class _P0, class _P1, class _P2>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2, ...), true, false>
{
    typedef _Class _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1, _P2, ...);
};

template <class _Rp, class _Class>
struct __member_pointer_traits_imp<_Rp (_Class::*)() const, true, false>
{
    typedef _Class const _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) ();
};

template <class _Rp, class _Class>
struct __member_pointer_traits_imp<_Rp (_Class::*)(...) const, true, false>
{
    typedef _Class const _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (...);
};

template <class _Rp, class _Class, class _P0>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0) const, true, false>
{
    typedef _Class const _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0);
};

template <class _Rp, class _Class, class _P0>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, ...) const, true, false>
{
    typedef _Class const _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, ...);
};

template <class _Rp, class _Class, class _P0, class _P1>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1) const, true, false>
{
    typedef _Class const _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1);
};

template <class _Rp, class _Class, class _P0, class _P1>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, ...) const, true, false>
{
    typedef _Class const _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1, ...);
};

template <class _Rp, class _Class, class _P0, class _P1, class _P2>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2) const, true, false>
{
    typedef _Class const _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1, _P2);
};

template <class _Rp, class _Class, class _P0, class _P1, class _P2>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2, ...) const, true, false>
{
    typedef _Class const _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1, _P2, ...);
};

template <class _Rp, class _Class>
struct __member_pointer_traits_imp<_Rp (_Class::*)() volatile, true, false>
{
    typedef _Class volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) ();
};

template <class _Rp, class _Class>
struct __member_pointer_traits_imp<_Rp (_Class::*)(...) volatile, true, false>
{
    typedef _Class volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (...);
};

template <class _Rp, class _Class, class _P0>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0) volatile, true, false>
{
    typedef _Class volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0);
};

template <class _Rp, class _Class, class _P0>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, ...) volatile, true, false>
{
    typedef _Class volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, ...);
};

template <class _Rp, class _Class, class _P0, class _P1>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1) volatile, true, false>
{
    typedef _Class volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1);
};

template <class _Rp, class _Class, class _P0, class _P1>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, ...) volatile, true, false>
{
    typedef _Class volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1, ...);
};

template <class _Rp, class _Class, class _P0, class _P1, class _P2>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2) volatile, true, false>
{
    typedef _Class volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1, _P2);
};

template <class _Rp, class _Class, class _P0, class _P1, class _P2>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2, ...) volatile, true, false>
{
    typedef _Class volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1, _P2, ...);
};

template <class _Rp, class _Class>
struct __member_pointer_traits_imp<_Rp (_Class::*)() const volatile, true, false>
{
    typedef _Class const volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) ();
};

template <class _Rp, class _Class>
struct __member_pointer_traits_imp<_Rp (_Class::*)(...) const volatile, true, false>
{
    typedef _Class const volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (...);
};

template <class _Rp, class _Class, class _P0>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0) const volatile, true, false>
{
    typedef _Class const volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0);
};

template <class _Rp, class _Class, class _P0>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, ...) const volatile, true, false>
{
    typedef _Class const volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, ...);
};

template <class _Rp, class _Class, class _P0, class _P1>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1) const volatile, true, false>
{
    typedef _Class const volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1);
};

template <class _Rp, class _Class, class _P0, class _P1>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, ...) const volatile, true, false>
{
    typedef _Class const volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1, ...);
};

template <class _Rp, class _Class, class _P0, class _P1, class _P2>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2) const volatile, true, false>
{
    typedef _Class const volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1, _P2);
};

template <class _Rp, class _Class, class _P0, class _P1, class _P2>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_P0, _P1, _P2, ...) const volatile, true, false>
{
    typedef _Class const volatile _ClassType;
    typedef _Rp _ReturnType;
    typedef _Rp (_FnType) (_P0, _P1, _P2, ...);
};



template <class _Rp, class _Class>
struct __member_pointer_traits_imp<_Rp _Class::*, false, true>
{
    typedef _Class _ClassType;
    typedef _Rp _ReturnType;
};

template <class _MP>
struct __member_pointer_traits
    : public __member_pointer_traits_imp<typename remove_cv<_MP>::type,
                    is_member_function_pointer<_MP>::value,
                    is_member_object_pointer<_MP>::value>
{



};


template <class _DecayedFp>
struct __member_pointer_class_type {};

template <class _Ret, class _ClassType>
struct __member_pointer_class_type<_Ret _ClassType::*> {
  typedef _ClassType type;
};



template <class _Callable> class result_of;



template <class _Fn, bool, bool>
class __result_of
{
};

template <class _Fn>
class __result_of<_Fn(), true, false>
{
public:
    typedef __decltype(declval<_Fn>()()) type;
};

template <class _Fn, class _A0>
class __result_of<_Fn(_A0), true, false>
{
public:
    typedef __decltype(declval<_Fn>()(declval<_A0>())) type;
};

template <class _Fn, class _A0, class _A1>
class __result_of<_Fn(_A0, _A1), true, false>
{
public:
    typedef __decltype(declval<_Fn>()(declval<_A0>(), declval<_A1>())) type;
};

template <class _Fn, class _A0, class _A1, class _A2>
class __result_of<_Fn(_A0, _A1, _A2), true, false>
{
public:
    typedef __decltype(declval<_Fn>()(declval<_A0>(), declval<_A1>(), declval<_A2>())) type;
};

template <class _MP, class _Tp, bool _IsMemberFunctionPtr>
struct __result_of_mp;



template <class _MP, class _Tp>
struct __result_of_mp<_MP, _Tp, true>
    : public __identity<typename __member_pointer_traits<_MP>::_ReturnType>
{
};



template <class _MP, class _Tp, bool>
struct __result_of_mdp;

template <class _Rp, class _Class, class _Tp>
struct __result_of_mdp<_Rp _Class::*, _Tp, false>
{
    typedef typename __apply_cv<__decltype(*std::__1::declval<_Tp>()), _Rp>::type& type;
};

template <class _Rp, class _Class, class _Tp>
struct __result_of_mdp<_Rp _Class::*, _Tp, true>
{
    typedef typename __apply_cv<_Tp, _Rp>::type& type;
};

template <class _Rp, class _Class, class _Tp>
struct __result_of_mp<_Rp _Class::*, _Tp, false>
    : public __result_of_mdp<_Rp _Class::*, _Tp,
            is_base_of<_Class, typename remove_reference<_Tp>::type>::value>
{
};



template <class _Fn, class _Tp>
class __result_of<_Fn(_Tp), false, true>
    : public __result_of_mp<typename remove_reference<_Fn>::type,
                            _Tp,
                            is_member_function_pointer<typename remove_reference<_Fn>::type>::value>
{
};

template <class _Fn, class _Tp, class _A0>
class __result_of<_Fn(_Tp, _A0), false, true>
    : public __result_of_mp<typename remove_reference<_Fn>::type,
                            _Tp,
                            is_member_function_pointer<typename remove_reference<_Fn>::type>::value>
{
};

template <class _Fn, class _Tp, class _A0, class _A1>
class __result_of<_Fn(_Tp, _A0, _A1), false, true>
    : public __result_of_mp<typename remove_reference<_Fn>::type,
                            _Tp,
                            is_member_function_pointer<typename remove_reference<_Fn>::type>::value>
{
};

template <class _Fn, class _Tp, class _A0, class _A1, class _A2>
class __result_of<_Fn(_Tp, _A0, _A1, _A2), false, true>
    : public __result_of_mp<typename remove_reference<_Fn>::type,
                            _Tp,
                            is_member_function_pointer<typename remove_reference<_Fn>::type>::value>
{
};



template <class _Fn>
class __attribute__ ((__type_visibility__("default"))) result_of<_Fn()>
    : public __result_of<_Fn(),
                         is_class<typename remove_reference<_Fn>::type>::value ||
                         is_function<typename remove_pointer<typename remove_reference<_Fn>::type>::type>::value,
                         is_member_pointer<typename remove_reference<_Fn>::type>::value
                        >
{
};

template <class _Fn, class _A0>
class __attribute__ ((__type_visibility__("default"))) result_of<_Fn(_A0)>
    : public __result_of<_Fn(_A0),
                         is_class<typename remove_reference<_Fn>::type>::value ||
                         is_function<typename remove_pointer<typename remove_reference<_Fn>::type>::type>::value,
                         is_member_pointer<typename remove_reference<_Fn>::type>::value
                        >
{
};

template <class _Fn, class _A0, class _A1>
class __attribute__ ((__type_visibility__("default"))) result_of<_Fn(_A0, _A1)>
    : public __result_of<_Fn(_A0, _A1),
                         is_class<typename remove_reference<_Fn>::type>::value ||
                         is_function<typename remove_pointer<typename remove_reference<_Fn>::type>::type>::value,
                         is_member_pointer<typename remove_reference<_Fn>::type>::value
                        >
{
};

template <class _Fn, class _A0, class _A1, class _A2>
class __attribute__ ((__type_visibility__("default"))) result_of<_Fn(_A0, _A1, _A2)>
    : public __result_of<_Fn(_A0, _A1, _A2),
                         is_class<typename remove_reference<_Fn>::type>::value ||
                         is_function<typename remove_pointer<typename remove_reference<_Fn>::type>::type>::value,
                         is_member_pointer<typename remove_reference<_Fn>::type>::value
                        >
{
};





namespace __is_construct
{
struct __nat {};
}
# 3059 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp, class ..._Args>
struct __attribute__ ((__type_visibility__("default"))) is_constructible
    : public integral_constant<bool, __is_constructible(_Tp, _Args...)>
    {};
# 3250 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_default_constructible
    : public is_constructible<_Tp>
    {};
# 3262 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_copy_constructible
    : public is_constructible<_Tp,
                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};
# 3274 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_move_constructible



    : public is_copy_constructible<_Tp>

    {};
# 3344 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp, class _A0 = __is_construct::__nat,
                     class _A1 = __is_construct::__nat>
struct __attribute__ ((__type_visibility__("default"))) is_trivially_constructible
    : false_type
{
};



template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_trivially_constructible<_Tp, __is_construct::__nat,
                                                       __is_construct::__nat>
    : integral_constant<bool, __is_trivially_constructible(_Tp)>
{
};

template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_trivially_constructible<_Tp, _Tp,
                                                       __is_construct::__nat>
    : integral_constant<bool, __is_trivially_constructible(_Tp, _Tp)>
{
};

template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_trivially_constructible<_Tp, const _Tp&,
                                                       __is_construct::__nat>
    : integral_constant<bool, __is_trivially_constructible(_Tp, const _Tp&)>
{
};

template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_trivially_constructible<_Tp, _Tp&,
                                                       __is_construct::__nat>
    : integral_constant<bool, __is_trivially_constructible(_Tp, _Tp&)>
{
};
# 3422 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>
    {};
# 3433 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_trivially_copy_constructible
    : public is_trivially_constructible<_Tp, typename add_lvalue_reference<const _Tp>::type>
    {};
# 3444 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_trivially_move_constructible



    : public is_trivially_copy_constructible<_Tp>

    {};
# 3461 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp, class _Arg>
struct is_trivially_assignable
    : integral_constant<bool, __is_trivially_assignable(_Tp, _Arg)>
{
};
# 3502 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_trivially_copy_assignable
    : public is_trivially_assignable<typename add_lvalue_reference<_Tp>::type,
                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};
# 3513 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_trivially_move_assignable
    : public is_trivially_assignable<typename add_lvalue_reference<_Tp>::type,



                                     typename add_lvalue_reference<_Tp>::type>

    {};
# 3531 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_trivially_destructible
    : public integral_constant<bool, is_destructible<_Tp>::value && __has_trivial_destructor(_Tp)> {};
# 3659 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp, class _A0 = __is_construct::__nat,
                     class _A1 = __is_construct::__nat>
struct __attribute__ ((__type_visibility__("default"))) is_nothrow_constructible
    : false_type
{
};

template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_nothrow_constructible<_Tp, __is_construct::__nat,
                                                       __is_construct::__nat>

    : integral_constant<bool, __has_nothrow_constructor(_Tp)>



{
};

template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_nothrow_constructible<_Tp, _Tp,
                                                       __is_construct::__nat>

    : integral_constant<bool, __has_nothrow_copy(_Tp)>



{
};

template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_nothrow_constructible<_Tp, const _Tp&,
                                                       __is_construct::__nat>

    : integral_constant<bool, __has_nothrow_copy(_Tp)>



{
};

template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_nothrow_constructible<_Tp, _Tp&,
                                                       __is_construct::__nat>

    : integral_constant<bool, __has_nothrow_copy(_Tp)>



{
};
# 3720 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_nothrow_default_constructible
    : public is_nothrow_constructible<_Tp>
    {};
# 3731 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_nothrow_copy_constructible
    : public is_nothrow_constructible<_Tp,
                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};
# 3742 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_nothrow_move_constructible



    : public is_nothrow_copy_constructible<_Tp>

    {};
# 3781 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp, class _Arg>
struct __attribute__ ((__type_visibility__("default"))) is_nothrow_assignable
    : public false_type {};

template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_nothrow_assignable<_Tp&, _Tp>

    : integral_constant<bool, __has_nothrow_assign(_Tp)> {};




template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_nothrow_assignable<_Tp&, _Tp&>

    : integral_constant<bool, __has_nothrow_assign(_Tp)> {};




template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_nothrow_assignable<_Tp&, const _Tp&>

    : integral_constant<bool, __has_nothrow_assign(_Tp)> {};
# 3830 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_nothrow_copy_assignable
    : public is_nothrow_assignable<typename add_lvalue_reference<_Tp>::type,
                  typename add_lvalue_reference<typename add_const<_Tp>::type>::type> {};
# 3841 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_nothrow_move_assignable
    : public is_nothrow_assignable<typename add_lvalue_reference<_Tp>::type,



                                     typename add_lvalue_reference<_Tp>::type>

    {};
# 3903 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __libcpp_nothrow_destructor
    : public integral_constant<bool, is_scalar<_Tp>::value ||
                                     is_reference<_Tp>::value> {};

template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_nothrow_destructible
    : public __libcpp_nothrow_destructor<typename remove_all_extents<_Tp>::type> {};

template <class _Tp>
struct __attribute__ ((__type_visibility__("default"))) is_nothrow_destructible<_Tp[]>
    : public false_type {};
# 3925 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_pod
    : public integral_constant<bool, __is_pod(_Tp)> {};
# 3945 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_literal_type

    : public integral_constant<bool, __is_literal(_Tp)>




    {};
# 3961 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_standard_layout

    : public integral_constant<bool, __is_standard_layout(_Tp)>



    {};
# 3976 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_trivially_copyable

    : public integral_constant<bool, __is_trivially_copyable(_Tp)>





    {};
# 3993 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __attribute__ ((__type_visibility__("default"))) is_trivial

    : public integral_constant<bool, __is_trivial(_Tp)>




    {};






template <class _Tp> struct __is_reference_wrapper_impl : public false_type {};
template <class _Tp> struct __is_reference_wrapper_impl<reference_wrapper<_Tp> > : public true_type {};
template <class _Tp> struct __is_reference_wrapper
    : public __is_reference_wrapper_impl<typename remove_cv<_Tp>::type> {};
# 4440 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp> struct __is_swappable;
template <class _Tp> struct __is_nothrow_swappable;

template <class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))







void

swap(_Tp& __x, _Tp& __y)

{
    _Tp __t(std::__1::move(__x));
    __x = std::__1::move(__y);
    __y = std::__1::move(__t);
}

template<class _Tp, size_t _Np>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename enable_if<
    __is_swappable<_Tp>::value
>::type
swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np]) ;

template <class _ForwardIterator1, class _ForwardIterator2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
void
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)



{
    swap(*__a, *__b);
}



namespace __detail
{


template <class _Tp, class _Up = _Tp,
          bool _NotVoid = !is_void<_Tp>::value && !is_void<_Up>::value>
struct __swappable_with
{
    template <class _LHS, class _RHS>
    static __decltype(swap(std::__1::declval<_LHS>(), std::__1::declval<_RHS>()))
    __test_swap(int);
    template <class, class>
    static __nat __test_swap(long);


    typedef __decltype((__test_swap<_Tp, _Up>(0))) __swap1;
    typedef __decltype((__test_swap<_Up, _Tp>(0))) __swap2;

    static const bool value = !is_same<__swap1, __nat>::value
                           && !is_same<__swap2, __nat>::value;
};

template <class _Tp, class _Up>
struct __swappable_with<_Tp, _Up, false> : false_type {};

template <class _Tp, class _Up = _Tp, bool _Swappable = __swappable_with<_Tp, _Up>::value>
struct __nothrow_swappable_with {
  static const bool value =




      false;

};

template <class _Tp, class _Up>
struct __nothrow_swappable_with<_Tp, _Up, false> : false_type {};

}

template <class _Tp>
struct __is_swappable
    : public integral_constant<bool, __detail::__swappable_with<_Tp&>::value>
{
};

template <class _Tp>
struct __is_nothrow_swappable
    : public integral_constant<bool, __detail::__nothrow_swappable_with<_Tp&>::value>
{
};
# 4589 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp>
struct underlying_type
{
    typedef __underlying_type(_Tp) type;
};
# 4612 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
template <class _Tp, bool = is_enum<_Tp>::value>
struct __sfinae_underlying_type
{
    typedef typename underlying_type<_Tp>::type type;
    typedef __decltype(((type)1) + 0) __promoted_type;
};

template <class _Tp>
struct __sfinae_underlying_type<_Tp, false> {};

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
int __convert_to_integral(int __val) { return __val; }

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
unsigned __convert_to_integral(unsigned __val) { return __val; }

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
long __convert_to_integral(long __val) { return __val; }

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
unsigned long __convert_to_integral(unsigned long __val) { return __val; }

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
long long __convert_to_integral(long long __val) { return __val; }

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
unsigned long long __convert_to_integral(unsigned long long __val) {return __val; }


inline __attribute__ ((__visibility__("hidden"), __always_inline__))
__int128_t __convert_to_integral(__int128_t __val) { return __val; }

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
__uint128_t __convert_to_integral(__uint128_t __val) { return __val; }


template <class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename __sfinae_underlying_type<_Tp>::__promoted_type
__convert_to_integral(_Tp __val) { return __val; }
# 4740 "/Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits" 3
} }
# 26 "/usr/local/include/wx-3.0/wx/strvararg.h" 2








class wxCStrData;
class wxString;
# 136 "/usr/local/include/wx-3.0/wx/strvararg.h"
class wxFormatString
{
public:
    wxFormatString(const char *str)
        : m_char(wxScopedCharBuffer::CreateNonOwned(str)), m_str(__null), m_cstr(__null) {}
    wxFormatString(const wchar_t *str)
        : m_wchar(wxScopedWCharBuffer::CreateNonOwned(str)), m_str(__null), m_cstr(__null) {}
    wxFormatString(const wxString& str)
        : m_str(&str), m_cstr(__null) {}
    wxFormatString(const wxCStrData& str)
        : m_str(__null), m_cstr(&str) {}
    wxFormatString(const wxScopedCharBuffer& str)
        : m_char(str), m_str(__null), m_cstr(__null) {}
    wxFormatString(const wxScopedWCharBuffer& str)
        : m_wchar(str), m_str(__null), m_cstr(__null) {}





    enum ArgumentType
    {

        Arg_Unused = 0,



        Arg_Char = 0x0001,
        Arg_Pointer = 0x0002,
        Arg_String = 0x0004 | Arg_Pointer,

        Arg_Int = 0x0008 | Arg_Char,



        Arg_LongInt = 0x0010,




        Arg_LongLongInt = 0x0020,


        Arg_Double = 0x0040,
        Arg_LongDouble = 0x0080,




        Arg_Size_t = Arg_LongInt,






        Arg_IntPtr = 0x0200,
        Arg_ShortIntPtr = 0x0400,
        Arg_LongIntPtr = 0x0800,

        Arg_Unknown = 0x8000
    };





    ArgumentType GetArgumentType(unsigned n) const;



    wxString InputAsString() const;


    operator const char*() const
        { return const_cast<wxFormatString*>(this)->AsChar(); }
private:




    const char* InputAsChar();
    const char* AsChar();
    wxScopedCharBuffer m_convertedChar;
# 232 "/usr/local/include/wx-3.0/wx/strvararg.h"
private:
    wxScopedCharBuffer m_char;
    wxScopedWCharBuffer m_wchar;




    const wxString * const m_str;
    const wxCStrData * const m_cstr;

    private: wxFormatString& operator=(const wxFormatString&);
};



struct wxFormatStringArgument
{
    wxFormatStringArgument(const wxFormatString *s = __null) : m_str(s) {}
    const wxFormatString *m_str;


    wxFormatStringArgument operator,(const wxFormatStringArgument& a) const
    {
        do { if ( wxTheAssertHandler && !(m_str == __null || a.m_str == __null) && (wxOnAssert("/usr/local/include/wx-3.0/wx/strvararg.h", 256, __FUNCTION__, "m_str == NULL || a.m_str == NULL", "can't have two format strings in vararg function"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );

        return wxFormatStringArgument(m_str ? m_str : a.m_str);
    }

    operator const wxFormatString*() const { return m_str; }
};

template<typename T>
struct wxFormatStringArgumentFinder
{
    static wxFormatStringArgument find(T)
    {

        return wxFormatStringArgument();
    }
};

template<>
struct wxFormatStringArgumentFinder<const wxFormatString&>
{
    static wxFormatStringArgument find(const wxFormatString& arg)
        { return wxFormatStringArgument(&arg); }
};

template<>
struct wxFormatStringArgumentFinder<wxFormatString>
    : public wxFormatStringArgumentFinder<const wxFormatString&> {};



template<>
struct wxFormatStringArgumentFinder<wxString>
    : public wxFormatStringArgumentFinder<const wxString&> {};

template<>
struct wxFormatStringArgumentFinder<wxScopedCharBuffer>
    : public wxFormatStringArgumentFinder<const wxScopedCharBuffer&> {};

template<>
struct wxFormatStringArgumentFinder<wxScopedWCharBuffer>
    : public wxFormatStringArgumentFinder<const wxScopedWCharBuffer&> {};

template<>
struct wxFormatStringArgumentFinder<wxCharBuffer>
    : public wxFormatStringArgumentFinder<const wxCharBuffer&> {};

template<>
struct wxFormatStringArgumentFinder<wxWCharBuffer>
    : public wxFormatStringArgumentFinder<const wxWCharBuffer&> {};
# 337 "/usr/local/include/wx-3.0/wx/strvararg.h"
template<bool IsEnum>
struct wxFormatStringSpecifierNonPodType {};

template<>
struct wxFormatStringSpecifierNonPodType<true>
{
    enum { value = wxFormatString::Arg_Int };
};

template<typename T>
struct wxFormatStringSpecifier
{

    typedef std::is_enum<T> is_enum;



    enum { value = wxFormatStringSpecifierNonPodType<is_enum::value>::value };
};
# 381 "/usr/local/include/wx-3.0/wx/strvararg.h"
template<typename T>
struct wxFormatStringSpecifier<T*>
{
    enum { value = wxFormatString::Arg_Pointer };
};

template<typename T>
struct wxFormatStringSpecifier<const T*>
{
    enum { value = wxFormatString::Arg_Pointer };
};
# 401 "/usr/local/include/wx-3.0/wx/strvararg.h"
template<> struct wxFormatStringSpecifier<bool> { enum { value = wxFormatString::Arg_Int }; };
template<> struct wxFormatStringSpecifier<int> { enum { value = wxFormatString::Arg_Int }; };
template<> struct wxFormatStringSpecifier<unsigned int> { enum { value = wxFormatString::Arg_Int }; };
template<> struct wxFormatStringSpecifier<short int> { enum { value = wxFormatString::Arg_Int }; };
template<> struct wxFormatStringSpecifier<short unsigned int> { enum { value = wxFormatString::Arg_Int }; };
template<> struct wxFormatStringSpecifier<long int> { enum { value = wxFormatString::Arg_LongInt }; };
template<> struct wxFormatStringSpecifier<long unsigned int> { enum { value = wxFormatString::Arg_LongInt }; };

template<> struct wxFormatStringSpecifier<long long> { enum { value = wxFormatString::Arg_LongLongInt }; };
template<> struct wxFormatStringSpecifier<unsigned long long> { enum { value = wxFormatString::Arg_LongLongInt }; };

template<> struct wxFormatStringSpecifier<float> { enum { value = wxFormatString::Arg_Double }; };
template<> struct wxFormatStringSpecifier<double> { enum { value = wxFormatString::Arg_Double }; };
template<> struct wxFormatStringSpecifier<long double> { enum { value = wxFormatString::Arg_LongDouble }; };


template<> struct wxFormatStringSpecifier<wchar_t> { enum { value = wxFormatString::Arg_Char | wxFormatString::Arg_Int }; };



template<> struct wxFormatStringSpecifier<char> { enum { value = wxFormatString::Arg_Char | wxFormatString::Arg_Int }; };
template<> struct wxFormatStringSpecifier<signed char> { enum { value = wxFormatString::Arg_Char | wxFormatString::Arg_Int }; };
template<> struct wxFormatStringSpecifier<unsigned char> { enum { value = wxFormatString::Arg_Char | wxFormatString::Arg_Int }; };


template<> struct wxFormatStringSpecifier<char*> { enum { value = wxFormatString::Arg_String }; };
template<> struct wxFormatStringSpecifier<unsigned char*> { enum { value = wxFormatString::Arg_String }; };
template<> struct wxFormatStringSpecifier<signed char*> { enum { value = wxFormatString::Arg_String }; };
template<> struct wxFormatStringSpecifier<const char*> { enum { value = wxFormatString::Arg_String }; };
template<> struct wxFormatStringSpecifier<const unsigned char*> { enum { value = wxFormatString::Arg_String }; };
template<> struct wxFormatStringSpecifier<const signed char*> { enum { value = wxFormatString::Arg_String }; };
template<> struct wxFormatStringSpecifier<wchar_t*> { enum { value = wxFormatString::Arg_String }; };
template<> struct wxFormatStringSpecifier<const wchar_t*> { enum { value = wxFormatString::Arg_String }; };

template<> struct wxFormatStringSpecifier<int*> { enum { value = wxFormatString::Arg_IntPtr | wxFormatString::Arg_Pointer }; };
template<> struct wxFormatStringSpecifier<short int*> { enum { value = wxFormatString::Arg_ShortIntPtr | wxFormatString::Arg_Pointer }; };
template<> struct wxFormatStringSpecifier<long int*> { enum { value = wxFormatString::Arg_LongIntPtr | wxFormatString::Arg_Pointer }; };







template<typename T>
struct wxArgNormalizer
{




    wxArgNormalizer(T value,
                    const wxFormatString *fmt, unsigned index)
        : m_value(value)
    {
        do { if ( !fmt ) break; const int argtype = fmt->GetArgumentType(index); do { if ( wxTheAssertHandler && !((argtype & (wxFormatStringSpecifier<T>::value)) == argtype) && (wxOnAssert("/usr/local/include/wx-3.0/wx/strvararg.h", 456, __FUNCTION__, "(argtype & (wxFormatStringSpecifier<T>::value)) == argtype", "format specifier doesn't match argument type"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); } while ( (void)0, 0 );
    }




    T get() const { return m_value; }

    T m_value;
};





template<typename T>
struct wxArgNormalizerWchar : public wxArgNormalizer<T>
{
    wxArgNormalizerWchar(T value,
                         const wxFormatString *fmt, unsigned index)
        : wxArgNormalizer<T>(value, fmt, index) {}
};
# 504 "/usr/local/include/wx-3.0/wx/strvararg.h"
template<typename CharType>
struct wxArgNormalizerWithBuffer
{
    typedef wxScopedCharTypeBuffer<CharType> CharBuffer;

    wxArgNormalizerWithBuffer() {}
    wxArgNormalizerWithBuffer(const CharBuffer& buf,
                              const wxFormatString *fmt,
                              unsigned index)
        : m_value(buf)
    {
        do { if ( !fmt ) break; const int argtype = fmt->GetArgumentType(index); do { if ( wxTheAssertHandler && !((argtype & (wxFormatString::Arg_String)) == argtype) && (wxOnAssert("/usr/local/include/wx-3.0/wx/strvararg.h", 515, __FUNCTION__, "(argtype & (wxFormatString::Arg_String)) == argtype", "format specifier doesn't match argument type"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); } while ( (void)0, 0 );
    }

    const CharType *get() const { return m_value; }

    CharBuffer m_value;
};


template<>
struct wxArgNormalizerWchar<const wxString&>
{
    wxArgNormalizerWchar(const wxString& s,
                          const wxFormatString *fmt,
                          unsigned index)
        : m_value(s)
    {
        do { if ( !fmt ) break; const int argtype = fmt->GetArgumentType(index); do { if ( wxTheAssertHandler && !((argtype & (wxFormatString::Arg_String)) == argtype) && (wxOnAssert("/usr/local/include/wx-3.0/wx/strvararg.h", 532, __FUNCTION__, "(argtype & (wxFormatString::Arg_String)) == argtype", "format specifier doesn't match argument type"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); } while ( (void)0, 0 );
    }

    const wxStringCharType *get() const;

    const wxString& m_value;
};


template<>
struct wxArgNormalizerWchar<const wxCStrData&>
{
    wxArgNormalizerWchar(const wxCStrData& value,
                          const wxFormatString *fmt,
                          unsigned index)
        : m_value(value)
    {
        do { if ( !fmt ) break; const int argtype = fmt->GetArgumentType(index); do { if ( wxTheAssertHandler && !((argtype & (wxFormatString::Arg_String)) == argtype) && (wxOnAssert("/usr/local/include/wx-3.0/wx/strvararg.h", 549, __FUNCTION__, "(argtype & (wxFormatString::Arg_String)) == argtype", "format specifier doesn't match argument type"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); } while ( (void)0, 0 );
    }

    const wxStringCharType *get() const;

    const wxCStrData& m_value;
};
# 641 "/usr/local/include/wx-3.0/wx/strvararg.h"
template<>
struct wxArgNormalizerWchar<const wchar_t*>
    : public wxArgNormalizerWithBuffer<char>
{
    wxArgNormalizerWchar(const wchar_t* s,
                         const wxFormatString *fmt, unsigned index)
        : wxArgNormalizerWithBuffer<char>(wxGet_wxConvLibc().cWC2MB(s), fmt, index) {}
};
# 681 "/usr/local/include/wx-3.0/wx/strvararg.h"
template<> struct wxArgNormalizerWchar<wxString> : public wxArgNormalizerWchar<const wxString&> { wxArgNormalizerWchar(const wxString& value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wxString&>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<wxCStrData> : public wxArgNormalizerWchar<const wxCStrData&> { wxArgNormalizerWchar(const wxCStrData& value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wxCStrData&>(value, fmt, index) {} };


template<> struct wxArgNormalizerWchar<char*> : public wxArgNormalizerWchar<const char*> { wxArgNormalizerWchar(const char* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const char*>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<wchar_t*> : public wxArgNormalizerWchar<const wchar_t*> { wxArgNormalizerWchar(const wchar_t* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wchar_t*>(value, fmt, index) {} };


template<> struct wxArgNormalizerWchar<wxScopedCharBuffer> : public wxArgNormalizerWchar<const char*> { wxArgNormalizerWchar(const char* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const char*>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const wxScopedCharBuffer&> : public wxArgNormalizerWchar<const char*> { wxArgNormalizerWchar(const char* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const char*>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<wxScopedWCharBuffer> : public wxArgNormalizerWchar<const wchar_t*> { wxArgNormalizerWchar(const wchar_t* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wchar_t*>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const wxScopedWCharBuffer&> : public wxArgNormalizerWchar<const wchar_t*> { wxArgNormalizerWchar(const wchar_t* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wchar_t*>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<wxCharBuffer> : public wxArgNormalizerWchar<const char*> { wxArgNormalizerWchar(const char* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const char*>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const wxCharBuffer&> : public wxArgNormalizerWchar<const char*> { wxArgNormalizerWchar(const char* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const char*>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<wxWCharBuffer> : public wxArgNormalizerWchar<const wchar_t*> { wxArgNormalizerWchar(const wchar_t* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wchar_t*>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const wxWCharBuffer&> : public wxArgNormalizerWchar<const wchar_t*> { wxArgNormalizerWchar(const wchar_t* value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wchar_t*>(value, fmt, index) {} };
# 751 "/usr/local/include/wx-3.0/wx/strvararg.h"
template<>
struct wxArgNormalizer<const wxUniChar&> : public wxArgNormalizer<wchar_t>
{
    wxArgNormalizer(const wxUniChar& s,
                    const wxFormatString *fmt, unsigned index)
        : wxArgNormalizer<wchar_t>(((wchar_t)(s.GetValue())), fmt, index) {}
};
# 818 "/usr/local/include/wx-3.0/wx/strvararg.h"
template<> struct wxArgNormalizerWchar<wxUniChar> : public wxArgNormalizerWchar<const wxUniChar&> { wxArgNormalizerWchar(const wxUniChar& value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wxUniChar&>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const wxUniCharRef&> : public wxArgNormalizerWchar<const wxUniChar&> { wxArgNormalizerWchar(const wxUniChar& value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wxUniChar&>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<wxUniCharRef> : public wxArgNormalizerWchar<const wxUniChar&> { wxArgNormalizerWchar(const wxUniChar& value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<const wxUniChar&>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const wchar_t&> : public wxArgNormalizerWchar<wchar_t> { wxArgNormalizerWchar(wchar_t value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<wchar_t>(value, fmt, index) {} };

template<> struct wxArgNormalizerWchar<const char&> : public wxArgNormalizerWchar<char> { wxArgNormalizerWchar(char value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<char>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const unsigned char&> : public wxArgNormalizerWchar<unsigned char> { wxArgNormalizerWchar(unsigned char value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<unsigned char>(value, fmt, index) {} };
template<> struct wxArgNormalizerWchar<const signed char&> : public wxArgNormalizerWchar<signed char> { wxArgNormalizerWchar(signed char value, const wxFormatString *fmt, unsigned index) : wxArgNormalizerWchar<signed char>(value, fmt, index) {} };
# 840 "/usr/local/include/wx-3.0/wx/strvararg.h"
struct wxArgNormalizedString
{
    wxArgNormalizedString(const void* ptr) : m_ptr(ptr) {}


    bool IsValid() const { return m_ptr != __null; }
    operator bool() const { return IsValid(); }


    wxString GetString() const;
    operator wxString() const;

private:
    const void *m_ptr;
};
# 47 "/usr/local/include/wx-3.0/wx/string.h" 2



# 1 "/usr/local/include/wx-3.0/wx/stringops.h" 1
# 27 "/usr/local/include/wx-3.0/wx/stringops.h"
struct wxStringOperationsWchar
{

    template <typename Iterator>
    static void IncIter(Iterator& i) { ++i; }


    template <typename Iterator>
    static void DecIter(Iterator& i) { --i; }


    template <typename Iterator>
    static Iterator AddToIter(const Iterator& i, ptrdiff_t n)
        { return i + n; }


    template <typename Iterator>
    static ptrdiff_t DiffIters(const Iterator& i1, const Iterator& i2)
        { return i1 - i2; }



    static wxChar EncodeChar(const wxUniChar& ch) { return (wxChar)ch; }

    static wxUniChar DecodeChar(const wxStringImpl::const_iterator& i)
        { return *i; }
};
# 169 "/usr/local/include/wx-3.0/wx/stringops.h"
typedef wxStringOperationsWchar wxStringOperations;
# 51 "/usr/local/include/wx-3.0/wx/string.h" 2
# 85 "/usr/local/include/wx-3.0/wx/string.h"
class wxString;







namespace wxPrivate
{
    template <typename T> struct wxStringAsBufHelper;
}
# 153 "/usr/local/include/wx-3.0/wx/string.h"
class wxCStrData
{
private:

    wxCStrData(const wxString *str, size_t offset = 0, bool owned = false)
        : m_str(str), m_offset(offset), m_owned(owned) {}

public:


    inline wxCStrData(char *buf);
    inline wxCStrData(wchar_t *buf);
    inline wxCStrData(const wxCStrData& data);

    inline ~wxCStrData();
# 178 "/usr/local/include/wx-3.0/wx/string.h"
    inline const wchar_t* AsWChar() const;
    operator const wchar_t*() const { return AsWChar(); }

    inline const char* AsChar() const;
    const unsigned char* AsUnsignedChar() const
        { return (const unsigned char *) AsChar(); }
    operator const char*() const { return AsChar(); }
    operator const unsigned char*() const { return AsUnsignedChar(); }

    operator const void*() const { return AsChar(); }


    const wxScopedCharBuffer AsCharBuf() const
    {
        return wxScopedCharBuffer::CreateNonOwned(AsChar());
    }

    const wxScopedWCharBuffer AsWCharBuf() const
    {
        return wxScopedWCharBuffer::CreateNonOwned(AsWChar());
    }

    inline wxString AsString() const;



    const wxStringCharType *AsInternal() const;


    inline wxUniChar operator[](size_t n) const;
    wxUniChar operator[](int n) const { return operator[](size_t(n)); }
    wxUniChar operator[](long n) const { return operator[](size_t(n)); }

    wxUniChar operator[](unsigned int n) const { return operator[](size_t(n)); }







    wxCStrData operator+(int n) const
        { return wxCStrData(m_str, m_offset + n, m_owned); }
    wxCStrData operator+(long n) const
        { return wxCStrData(m_str, m_offset + n, m_owned); }
    wxCStrData operator+(size_t n) const
        { return wxCStrData(m_str, m_offset + n, m_owned); }




    wxCStrData operator-(ptrdiff_t n) const
    {
        do { if ( wxTheAssertHandler && !(n <= (ptrdiff_t)m_offset) && (wxOnAssert("/usr/local/include/wx-3.0/wx/string.h", 232, __FUNCTION__, "n <= (ptrdiff_t)m_offset", "attempt to construct address before the beginning of the string"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );

        return wxCStrData(m_str, m_offset - n, m_owned);
    }



    inline wxUniChar operator*() const;

private:

    const wxString *m_str;






    size_t m_offset;

    bool m_owned;

    friend class wxString;
};
# 393 "/usr/local/include/wx-3.0/wx/string.h"
class wxString



{



public:

  static const size_t npos;

private:







  wxString& operator=(int);





  wxString(int);




  template<typename T>
  struct SubstrBufFromType
  {
      T data;
      size_t len;

      SubstrBufFromType(const T& data_, size_t len_)
          : data(data_), len(len_)
      {
          do { if ( wxTheAssertHandler && !(len != npos) && (wxOnAssert("/usr/local/include/wx-3.0/wx/string.h", 433, __FUNCTION__, "len != npos", "must have real length"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
      }
  };
# 445 "/usr/local/include/wx-3.0/wx/string.h"
  typedef SubstrBufFromType<const char*> SubstrBufFromMB;
  typedef SubstrBufFromType<wxScopedCharBuffer> SubstrBufFromWC;
# 464 "/usr/local/include/wx-3.0/wx/string.h"
  static SubstrBufFromWC ConvertStr(const wchar_t *pwz, size_t nLength,
                                    const wxMBConv& conv);
# 482 "/usr/local/include/wx-3.0/wx/string.h"
  static const char* ImplStr(const char* str,
                             const wxMBConv& = wxGet_wxConvLibc())
    { return str ? str : ""; }
  static const SubstrBufFromMB ImplStr(const char* str, size_t n,
                                       const wxMBConv& = wxGet_wxConvLibc())
    { return SubstrBufFromMB(str, (str && n == npos) ? wxStrlen(str) : n); }
  static wxScopedCharBuffer ImplStr(const wchar_t* str)
    { return ConvertStr(str, npos, wxGet_wxConvLibc()).data; }
  static SubstrBufFromWC ImplStr(const wchar_t* str, size_t n)
    { return ConvertStr(str, n, wxGet_wxConvLibc()); }




  static size_t PosToImpl(size_t pos) { return pos; }
  static void PosLenToImpl(size_t pos, size_t len,
                           size_t *implPos, size_t *implLen)
    { *implPos = pos; *implLen = len; }
  static size_t LenToImpl(size_t len) { return len; }
  static size_t PosFromImpl(size_t pos) { return pos; }
# 812 "/usr/local/include/wx-3.0/wx/string.h"
public:

  typedef wxUniChar value_type;
  typedef wxUniChar char_type;
  typedef wxUniCharRef reference;
  typedef wxChar* pointer;
  typedef const wxChar* const_pointer;

  typedef size_t size_type;
  typedef wxUniChar const_reference;
# 905 "/usr/local/include/wx-3.0/wx/string.h"
  class const_iterator;
# 1026 "/usr/local/include/wx-3.0/wx/string.h"
  class iterator
  {
      private: typedef wxStringImpl::iterator underlying_iterator; public: typedef wxUniChar value_type; typedef ptrdiff_t difference_type; typedef wxUniCharRef reference; typedef wxChar* pointer; reference operator[](size_t n) const { return *(*this + n); } iterator& operator++() { wxStringOperations::IncIter(m_cur); return *this; } iterator& operator--() { wxStringOperations::DecIter(m_cur); return *this; } iterator operator++(int) { iterator tmp = *this; wxStringOperations::IncIter(m_cur); return tmp; } iterator operator--(int) { iterator tmp = *this; wxStringOperations::DecIter(m_cur); return tmp; } iterator& operator+=(ptrdiff_t n) { m_cur = wxStringOperations::AddToIter(m_cur, n); return *this; } iterator& operator-=(ptrdiff_t n) { m_cur = wxStringOperations::AddToIter(m_cur, -n); return *this; } difference_type operator-(const iterator& i) const { return wxStringOperations::DiffIters(m_cur, i.m_cur); } bool operator==(const iterator& i) const { return m_cur == i.m_cur; } bool operator!=(const iterator& i) const { return m_cur != i.m_cur; } bool operator<(const iterator& i) const { return m_cur < i.m_cur; } bool operator>(const iterator& i) const { return m_cur > i.m_cur; } bool operator<=(const iterator& i) const { return m_cur <= i.m_cur; } bool operator>=(const iterator& i) const { return m_cur >= i.m_cur; } private: underlying_iterator impl() const { return m_cur; } friend class wxString; friend class wxCStrData; private: underlying_iterator m_cur;

  public:
      iterator() {}
      iterator(const iterator& i) : m_cur(i.m_cur) {}

      reference operator*()
        { return wxUniCharRef::CreateForString(m_cur); }

      iterator operator+(ptrdiff_t n) const
        { return iterator(wxStringOperations::AddToIter(m_cur, n)); }
      iterator operator-(ptrdiff_t n) const
        { return iterator(wxStringOperations::AddToIter(m_cur, -n)); }



      bool operator==(const const_iterator& i) const;
      bool operator!=(const const_iterator& i) const;
      bool operator<(const const_iterator& i) const;
      bool operator>(const const_iterator& i) const;
      bool operator<=(const const_iterator& i) const;
      bool operator>=(const const_iterator& i) const;

  private:

      iterator(underlying_iterator ptr) : m_cur(ptr) {}
      iterator(wxString *, underlying_iterator ptr) : m_cur(ptr) {}

      friend class const_iterator;
  };

  class const_iterator
  {


      private: typedef wxStringImpl::const_iterator underlying_iterator; public: typedef wxUniChar value_type; typedef ptrdiff_t difference_type; typedef wxUniChar reference; typedef const wxChar* pointer; reference operator[](size_t n) const { return *(*this + n); } const_iterator& operator++() { wxStringOperations::IncIter(m_cur); return *this; } const_iterator& operator--() { wxStringOperations::DecIter(m_cur); return *this; } const_iterator operator++(int) { const_iterator tmp = *this; wxStringOperations::IncIter(m_cur); return tmp; } const_iterator operator--(int) { const_iterator tmp = *this; wxStringOperations::DecIter(m_cur); return tmp; } const_iterator& operator+=(ptrdiff_t n) { m_cur = wxStringOperations::AddToIter(m_cur, n); return *this; } const_iterator& operator-=(ptrdiff_t n) { m_cur = wxStringOperations::AddToIter(m_cur, -n); return *this; } difference_type operator-(const const_iterator& i) const { return wxStringOperations::DiffIters(m_cur, i.m_cur); } bool operator==(const const_iterator& i) const { return m_cur == i.m_cur; } bool operator!=(const const_iterator& i) const { return m_cur != i.m_cur; } bool operator<(const const_iterator& i) const { return m_cur < i.m_cur; } bool operator>(const const_iterator& i) const { return m_cur > i.m_cur; } bool operator<=(const const_iterator& i) const { return m_cur <= i.m_cur; } bool operator>=(const const_iterator& i) const { return m_cur >= i.m_cur; } private: underlying_iterator impl() const { return m_cur; } friend class wxString; friend class wxCStrData; private: underlying_iterator m_cur;

  public:
      const_iterator() {}
      const_iterator(const const_iterator& i) : m_cur(i.m_cur) {}
      const_iterator(const iterator& i) : m_cur(i.m_cur) {}

      reference operator*() const
        { return wxStringOperations::DecodeChar(m_cur); }

      const_iterator operator+(ptrdiff_t n) const
        { return const_iterator(wxStringOperations::AddToIter(m_cur, n)); }
      const_iterator operator-(ptrdiff_t n) const
        { return const_iterator(wxStringOperations::AddToIter(m_cur, -n)); }






  private:

      const_iterator(underlying_iterator ptr) : m_cur(ptr) {}
      const_iterator(const wxString *, underlying_iterator ptr)
          : m_cur(ptr) {}
  };

  iterator GetIterForNthChar(size_t n) { return begin() + n; }
  const_iterator GetIterForNthChar(size_t n) const { return begin() + n; }
# 1105 "/usr/local/include/wx-3.0/wx/string.h"
  ptrdiff_t IterOffsetInMBStr(const const_iterator& i) const
  {
      const wxString str(begin(), i);




      size_t ofs = wxGet_wxConvLibc().FromWChar(__null, 0, str.wc_str(), str.length());
      return ofs == ((size_t)-1) ? 0 : static_cast<ptrdiff_t>(ofs);
  }

  friend class iterator;
  friend class const_iterator;

  template <typename T>
  class reverse_iterator_impl
  {
  public:
      typedef T iterator_type;


      typedef typename T::value_type value_type;
      typedef typename T::difference_type difference_type;
      typedef typename T::reference reference;
      typedef typename T::pointer *pointer;

      reverse_iterator_impl() {}
      reverse_iterator_impl(iterator_type i) : m_cur(i) {}
      reverse_iterator_impl(const reverse_iterator_impl& ri)
          : m_cur(ri.m_cur) {}

      iterator_type base() const { return m_cur; }

      reference operator*() const { return *(m_cur-1); }
      reference operator[](size_t n) const { return *(*this + n); }

      reverse_iterator_impl& operator++()
        { --m_cur; return *this; }
      reverse_iterator_impl operator++(int)
        { reverse_iterator_impl tmp = *this; --m_cur; return tmp; }
      reverse_iterator_impl& operator--()
        { ++m_cur; return *this; }
      reverse_iterator_impl operator--(int)
        { reverse_iterator_impl tmp = *this; ++m_cur; return tmp; }


      reverse_iterator_impl operator+(ptrdiff_t n) const
        { return reverse_iterator_impl<T>(m_cur - n); }
      reverse_iterator_impl operator-(ptrdiff_t n) const
        { return reverse_iterator_impl<T>(m_cur + n); }
      reverse_iterator_impl operator+=(ptrdiff_t n)
        { m_cur -= n; return *this; }
      reverse_iterator_impl operator-=(ptrdiff_t n)
        { m_cur += n; return *this; }

      unsigned operator-(const reverse_iterator_impl& i) const
        { return i.m_cur - m_cur; }

      bool operator==(const reverse_iterator_impl& ri) const
        { return m_cur == ri.m_cur; }
      bool operator!=(const reverse_iterator_impl& ri) const
        { return !(*this == ri); }

      bool operator<(const reverse_iterator_impl& i) const
        { return m_cur > i.m_cur; }
      bool operator>(const reverse_iterator_impl& i) const
        { return m_cur < i.m_cur; }
      bool operator<=(const reverse_iterator_impl& i) const
        { return m_cur >= i.m_cur; }
      bool operator>=(const reverse_iterator_impl& i) const
        { return m_cur <= i.m_cur; }

  private:
      iterator_type m_cur;
  };

  typedef reverse_iterator_impl<iterator> reverse_iterator;
  typedef reverse_iterator_impl<const_iterator> const_reverse_iterator;

private:


  static const_iterator CreateConstIterator(const wxCStrData& data)
  {
      return const_iterator(data.m_str,
                            (data.m_str->begin() + data.m_offset).impl());
  }
# 1208 "/usr/local/include/wx-3.0/wx/string.h"
  wxString(const wxStringImpl& src) : m_impl(src) { }


  static wxString FromImpl(const wxStringImpl& src) { return wxString(src); }


public:


  wxString() {}


  wxString(const wxString& stringSrc) : m_impl(stringSrc.m_impl) { }


  wxString(wxUniChar ch, size_t nRepeat = 1 )
    { assign(nRepeat, ch); }
  wxString(size_t nRepeat, wxUniChar ch)
    { assign(nRepeat, ch); }
  wxString(wxUniCharRef ch, size_t nRepeat = 1)
    { assign(nRepeat, ch); }
  wxString(size_t nRepeat, wxUniCharRef ch)
    { assign(nRepeat, ch); }
  wxString(char ch, size_t nRepeat = 1)
    { assign(nRepeat, ch); }
  wxString(size_t nRepeat, char ch)
    { assign(nRepeat, ch); }
  wxString(wchar_t ch, size_t nRepeat = 1)
    { assign(nRepeat, ch); }
  wxString(size_t nRepeat, wchar_t ch)
    { assign(nRepeat, ch); }


  wxString(const char *psz)
    : m_impl(ImplStr(psz)) {}
  wxString(const char *psz, const wxMBConv& conv)
    : m_impl(ImplStr(psz, conv)) {}
  wxString(const char *psz, size_t nLength)
    { assign(psz, nLength); }
  wxString(const char *psz, const wxMBConv& conv, size_t nLength)
  {
    SubstrBufFromMB str(ImplStr(psz, nLength, conv));
    m_impl.assign(str.data, str.len);
  }


  wxString(const unsigned char *psz)
    : m_impl(ImplStr((const char*)psz)) {}
  wxString(const unsigned char *psz, const wxMBConv& conv)
    : m_impl(ImplStr((const char*)psz, conv)) {}
  wxString(const unsigned char *psz, size_t nLength)
    { assign((const char*)psz, nLength); }
  wxString(const unsigned char *psz, const wxMBConv& conv, size_t nLength)
  {
    SubstrBufFromMB str(ImplStr((const char*)psz, nLength, conv));
    m_impl.assign(str.data, str.len);
  }


  wxString(const wchar_t *pwz)
    : m_impl(ImplStr(pwz)) {}
  wxString(const wchar_t *pwz, const wxMBConv& )
    : m_impl(ImplStr(pwz)) {}
  wxString(const wchar_t *pwz, size_t nLength)
    { assign(pwz, nLength); }
  wxString(const wchar_t *pwz, const wxMBConv& , size_t nLength)
    { assign(pwz, nLength); }

  wxString(const wxScopedCharBuffer& buf)
    { assign(buf.data(), buf.length()); }
  wxString(const wxScopedWCharBuffer& buf)
    { assign(buf.data(), buf.length()); }




  wxString(const wxCStrData& cstr)
      : m_impl(cstr.AsString().m_impl.c_str()) { }



  wxString(const wxCStrData& cstr, size_t nLength)
      : m_impl(cstr.AsString().Mid(0, nLength).m_impl) {}



  wxString(const wxString& str, size_t nLength)
    { assign(str, nLength); }
# 1384 "/usr/local/include/wx-3.0/wx/string.h"
  wxString Clone() const
  {


      return wxString::FromImpl(wxStringImpl(m_impl.c_str(), m_impl.length()));
  }


  const_iterator begin() const { return const_iterator(this, m_impl.begin()); }
  iterator begin() { return iterator(this, m_impl.begin()); }

  const_iterator end() const { return const_iterator(this, m_impl.end()); }
  iterator end() { return iterator(this, m_impl.end()); }


  const_reverse_iterator rbegin() const
    { return const_reverse_iterator(end()); }
  reverse_iterator rbegin()
    { return reverse_iterator(end()); }

  const_reverse_iterator rend() const
    { return const_reverse_iterator(begin()); }
  reverse_iterator rend()
    { return reverse_iterator(begin()); }
# 1438 "/usr/local/include/wx-3.0/wx/string.h"
  size_t length() const { return m_impl.length(); }


  size_type size() const { return length(); }
  size_type max_size() const { return npos; }

  bool empty() const { return m_impl.empty(); }


  size_type capacity() const { return m_impl.capacity(); }
  void reserve(size_t sz) { m_impl.reserve(sz); }

  void resize(size_t nSize, wxUniChar ch = '\0')
  {
    const size_t len = length();
    if ( nSize == len)
        return;
# 1475 "/usr/local/include/wx-3.0/wx/string.h"
    {
                                           ;

        m_impl.resize(nSize, (wxStringCharType)ch);
    }
  }

  wxString substr(size_t nStart = 0, size_t nLen = npos) const
  {
    size_t pos, len;
    PosLenToImpl(nStart, nLen, &pos, &len);
    return FromImpl(m_impl.substr(pos, len));
  }



  size_t Len() const { return length(); }

  bool IsEmpty() const { return empty(); }

  bool operator!() const { return empty(); }

  wxString& Truncate(size_t uiLen);

  void Empty() { clear(); }

  void Clear() { clear(); }



  bool IsAscii() const;

  bool IsNumber() const;

  bool IsWord() const;



    wxUniChar at(size_t n) const
      { return wxStringOperations::DecodeChar(m_impl.begin() + PosToImpl(n)); }
    wxUniChar GetChar(size_t n) const
      { return at(n); }

    wxUniCharRef at(size_t n)
      { return *GetIterForNthChar(n); }
    wxUniCharRef GetWritableChar(size_t n)
      { return at(n); }

    void SetChar(size_t n, wxUniChar ch)
      { at(n) = ch; }


    wxUniChar Last() const
    {
      do { if ( wxTheAssertHandler && !(!empty()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/string.h", 1529, __FUNCTION__, "!empty()", "wxString: index out of bounds"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
      return *rbegin();
    }


    wxUniCharRef Last()
    {
      do { if ( wxTheAssertHandler && !(!empty()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/string.h", 1536, __FUNCTION__, "!empty()", "wxString: index out of bounds"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
      return *rbegin();
    }





    wxUniChar operator[](int n) const
      { return at(n); }
    wxUniChar operator[](long n) const
      { return at(n); }
    wxUniChar operator[](size_t n) const
      { return at(n); }

    wxUniChar operator[](unsigned int n) const
      { return at(n); }



    wxUniCharRef operator[](int n)
      { return at(n); }
    wxUniCharRef operator[](long n)
      { return at(n); }
    wxUniCharRef operator[](size_t n)
      { return at(n); }

    wxUniCharRef operator[](unsigned int n)
      { return at(n); }
# 1610 "/usr/local/include/wx-3.0/wx/string.h"
    wxCStrData c_str() const { return wxCStrData(this); }
    wxCStrData data() const { return c_str(); }


    operator wxCStrData() const { return c_str(); }
# 1623 "/usr/local/include/wx-3.0/wx/string.h"
    operator const char*() const { return c_str(); }
    operator const wchar_t*() const { return c_str(); }




    operator const void*() const { return c_str(); }



    const wxCStrData GetData() const { return c_str(); }



    const wxStringCharType *wx_str() const { return m_impl.c_str(); }




    wxWritableCharBuffer char_str(const wxMBConv& conv = wxGet_wxConvLibc()) const
        { return mb_str(conv); }
    wxWritableWCharBuffer wchar_str() const { return wc_str(); }
# 1654 "/usr/local/include/wx-3.0/wx/string.h"
    template <typename T>
    wxCharTypeBuffer<T> tchar_str(size_t *len = __null,
                                  T * = __null) const
    {





        if ( len )
            *len = length();

        return wxCharTypeBuffer<T>::CreateNonOwned(wx_str(), length());

    }
# 1682 "/usr/local/include/wx-3.0/wx/string.h"
    static wxString FromAscii(const char *ascii) { return wxString( ascii ); }
    static wxString FromAscii(const char *ascii, size_t len)
        { return wxString( ascii, len ); }
    static wxString FromAscii(char ascii) { return wxString( ascii ); }
    const char *ToAscii() const { return c_str(); }




    static wxString FromAscii(const unsigned char *ascii)
        { return FromAscii((const char *)ascii); }
    static wxString FromAscii(const unsigned char *ascii, size_t len)
        { return FromAscii((const char *)ascii, len); }
# 1753 "/usr/local/include/wx-3.0/wx/string.h"
    static wxString FromUTF8(const char *utf8)
      { return wxString(wxMBConvUTF8().cMB2WC(utf8)); }
    static wxString FromUTF8(const char *utf8, size_t len)
    {
        size_t wlen;
        wxScopedWCharBuffer buf(wxMBConvUTF8().cMB2WC(utf8, len == npos ? ((size_t)-1) : len, &wlen));
        return wxString(buf.data(), wlen);
    }
    static wxString FromUTF8Unchecked(const char *utf8, size_t len = npos)
    {
        size_t wlen;
        wxScopedWCharBuffer buf
                            (
                              wxMBConvUTF8().cMB2WC
                                             (
                                               utf8,
                                               len == npos ? ((size_t)-1) : len,
                                               &wlen
                                             )
                            );
        do { if ( wxTheAssertHandler && !(!utf8 || !*utf8 || wlen) && (wxOnAssert("/usr/local/include/wx-3.0/wx/string.h", 1774, __FUNCTION__, "!utf8 || !*utf8 || wlen", "string must be valid UTF-8"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );


        return wxString(buf.data(), wlen);
    }
    const wxScopedCharBuffer utf8_str() const
      { return wxMBConvUTF8().cWC2MB(wc_str()); }


    const wxScopedCharBuffer ToUTF8() const { return utf8_str(); }
# 1794 "/usr/local/include/wx-3.0/wx/string.h"
    static wxString From8BitData(const char *data, size_t len)
      { return wxString(data, len); }

    static wxString From8BitData(const char *data)
      { return wxString(data); }
    const wxScopedCharBuffer To8BitData() const
        { return wxScopedCharBuffer::CreateNonOwned(wx_str(), length()); }
# 1852 "/usr/local/include/wx-3.0/wx/string.h"
    const char* mb_str() const { return wx_str(); }


    const char* mb_str(const wxMBConv& ) const { return wx_str(); }

    const wxChar* mbc_str() const { return mb_str(); }

    const wxScopedWCharBuffer wc_str(const wxMBConv& conv = wxGet_wxConvLibc()) const
        { return AsWCharBuf(conv); }

    const wxScopedCharBuffer fn_str() const
        { return (*wxConvFileName).cWC2WX( wc_str( wxGet_wxConvLibc() ) ); }







    const char* t_str() const { return wx_str(); }





  wxString& operator=(const wxString& stringSrc)
  {
    if ( this != &stringSrc )
    {
                                   ;

        m_impl = stringSrc.m_impl;
    }

    return *this;
  }

  wxString& operator=(const wxCStrData& cstr)
    { return *this = cstr.AsString(); }

  wxString& operator=(wxUniChar ch)
  {
                               ;






        m_impl = (wxStringCharType)ch;
    return *this;
  }

  wxString& operator=(wxUniCharRef ch)
    { return operator=((wxUniChar)ch); }
  wxString& operator=(char ch)
    { return operator=(wxUniChar(ch)); }
  wxString& operator=(unsigned char ch)
    { return operator=(wxUniChar(ch)); }
  wxString& operator=(wchar_t ch)
    { return operator=(wxUniChar(ch)); }
# 1940 "/usr/local/include/wx-3.0/wx/string.h"
  wxString& operator=(const char *psz)
  {
                                 ;

      m_impl = ImplStr(psz);

      return *this;
  }

  wxString& operator=(const wchar_t *pwz)
  {
                                 ;

      m_impl = ImplStr(pwz);

      return *this;
  }


  wxString& operator=(const unsigned char *psz)
    { return operator=((const char*)psz); }


  wxString& operator=(const wxScopedWCharBuffer& s)
    { return assign(s); }

  wxString& operator=(const wxScopedCharBuffer& s)
    { return assign(s); }
# 1977 "/usr/local/include/wx-3.0/wx/string.h"
  wxString& operator<<(const wxString& s)
  {





    append(s);
    return *this;
  }

  wxString& operator<<(const char *psz)
    { append(psz); return *this; }
  wxString& operator<<(const wchar_t *pwz)
    { append(pwz); return *this; }
  wxString& operator<<(const wxCStrData& psz)
    { append(psz.AsString()); return *this; }

  wxString& operator<<(wxUniChar ch) { append(1, ch); return *this; }
  wxString& operator<<(wxUniCharRef ch) { append(1, ch); return *this; }
  wxString& operator<<(char ch) { append(1, ch); return *this; }
  wxString& operator<<(unsigned char ch) { append(1, ch); return *this; }
  wxString& operator<<(wchar_t ch) { append(1, ch); return *this; }


  wxString& operator<<(const wxScopedWCharBuffer& s)
    { return append(s); }
  wxString& operator<<(const wxScopedCharBuffer& s)
    { return append(s); }


  wxString& Append(const wxString& s)
    {

        if ( empty() )
            *this = s;
        else
            append(s);
        return *this;
    }
  wxString& Append(const char* psz)
    { append(psz); return *this; }
  wxString& Append(const wchar_t* pwz)
    { append(pwz); return *this; }
  wxString& Append(const wxCStrData& psz)
    { append(psz); return *this; }
  wxString& Append(const wxScopedCharBuffer& psz)
    { append(psz); return *this; }
  wxString& Append(const wxScopedWCharBuffer& psz)
    { append(psz); return *this; }
  wxString& Append(const char* psz, size_t nLen)
    { append(psz, nLen); return *this; }
  wxString& Append(const wchar_t* pwz, size_t nLen)
    { append(pwz, nLen); return *this; }
  wxString& Append(const wxCStrData& psz, size_t nLen)
    { append(psz, nLen); return *this; }
  wxString& Append(const wxScopedCharBuffer& psz, size_t nLen)
    { append(psz, nLen); return *this; }
  wxString& Append(const wxScopedWCharBuffer& psz, size_t nLen)
    { append(psz, nLen); return *this; }

  wxString& Append(wxUniChar ch, size_t count = 1u)
    { append(count, ch); return *this; }
  wxString& Append(wxUniCharRef ch, size_t count = 1u)
    { append(count, ch); return *this; }
  wxString& Append(char ch, size_t count = 1u)
    { append(count, ch); return *this; }
  wxString& Append(unsigned char ch, size_t count = 1u)
    { append(count, ch); return *this; }
  wxString& Append(wchar_t ch, size_t count = 1u)
    { append(count, ch); return *this; }


  wxString& Prepend(const wxString& str)
    { *this = str + *this; return *this; }



  friend wxString operator+(const wxString& string1,
                                             const wxString& string2);

  friend wxString operator+(const wxString& string, wxUniChar ch);

  friend wxString operator+(wxUniChar ch, const wxString& string);

  friend wxString operator+(const wxString& string,
                                             const char *psz);
  friend wxString operator+(const wxString& string,
                                             const wchar_t *pwz);

  friend wxString operator+(const char *psz,
                                             const wxString& string);
  friend wxString operator+(const wchar_t *pwz,
                                             const wxString& string);



  wxString& operator<<(int i)
    { return (*this) << Format("%d", i); }

  wxString& operator<<(unsigned int ui)
    { return (*this) << Format("%u", ui); }

  wxString& operator<<(long l)
    { return (*this) << Format("%ld", l); }

  wxString& operator<<(unsigned long ul)
    { return (*this) << Format("%lu", ul); }


  wxString& operator<<(long long ll)
    {
      return (*this) << Format("%" "ll" "d", ll);
    }

  wxString& operator<<(unsigned long long ull)
    {
      return (*this) << Format("%" "ll" "u" , ull);
    }


  wxString& operator<<(float f)
    { return (*this) << Format("%f", f); }

  wxString& operator<<(double d)
    { return (*this) << Format("%g", d); }



  int Cmp(const char *psz) const
    { return compare(psz); }
  int Cmp(const wchar_t *pwz) const
    { return compare(pwz); }
  int Cmp(const wxString& s) const
    { return compare(s); }
  int Cmp(const wxCStrData& s) const
    { return compare(s); }
  int Cmp(const wxScopedCharBuffer& s) const
    { return compare(s); }
  int Cmp(const wxScopedWCharBuffer& s) const
    { return compare(s); }

  int CmpNoCase(const wxString& s) const;



  bool IsSameAs(const wxString& str, bool compareWithCase = true) const
  {


      if ( length() != str.length() )
          return false;

      return (compareWithCase ? Cmp(str) : CmpNoCase(str)) == 0;
  }
  bool IsSameAs(const char *str, bool compareWithCase = true) const
    { return (compareWithCase ? Cmp(str) : CmpNoCase(str)) == 0; }
  bool IsSameAs(const wchar_t *str, bool compareWithCase = true) const
    { return (compareWithCase ? Cmp(str) : CmpNoCase(str)) == 0; }

  bool IsSameAs(const wxCStrData& str, bool compareWithCase = true) const
    { return IsSameAs(str.AsString(), compareWithCase); }
  bool IsSameAs(const wxScopedCharBuffer& str, bool compareWithCase = true) const
    { return IsSameAs(str.data(), compareWithCase); }
  bool IsSameAs(const wxScopedWCharBuffer& str, bool compareWithCase = true) const
    { return IsSameAs(str.data(), compareWithCase); }

  bool IsSameAs(wxUniChar c, bool compareWithCase = true) const;

  bool IsSameAs(wxUniCharRef c, bool compareWithCase = true) const
    { return IsSameAs(wxUniChar(c), compareWithCase); }
  bool IsSameAs(char c, bool compareWithCase = true) const
    { return IsSameAs(wxUniChar(c), compareWithCase); }
  bool IsSameAs(unsigned char c, bool compareWithCase = true) const
    { return IsSameAs(wxUniChar(c), compareWithCase); }
  bool IsSameAs(wchar_t c, bool compareWithCase = true) const
    { return IsSameAs(wxUniChar(c), compareWithCase); }
  bool IsSameAs(int c, bool compareWithCase = true) const
    { return IsSameAs(wxUniChar(c), compareWithCase); }




  wxString Mid(size_t nFirst, size_t nCount = npos) const;


  wxString operator()(size_t start, size_t len) const
    { return Mid(start, len); }




  bool StartsWith(const wxString& prefix, wxString *rest = __null) const;



  bool EndsWith(const wxString& suffix, wxString *rest = __null) const;


  wxString Left(size_t nCount) const;

  wxString Right(size_t nCount) const;



  wxString BeforeFirst(wxUniChar ch, wxString *rest = __null) const;



  wxString BeforeLast(wxUniChar ch, wxString *rest = __null) const;


  wxString AfterFirst(wxUniChar ch) const;


  wxString AfterLast(wxUniChar ch) const;


  wxString Before(wxUniChar ch) const { return BeforeLast(ch); }
  wxString After(wxUniChar ch) const { return AfterFirst(ch); }



  wxString& MakeUpper();

  wxString Upper() const { return wxString(*this).MakeUpper(); }

  wxString& MakeLower();

  wxString Lower() const { return wxString(*this).MakeLower(); }


  wxString& MakeCapitalized();


  wxString Capitalize() const { return wxString(*this).MakeCapitalized(); }



  wxString& Trim(bool bFromRight = true);

  wxString& Pad(size_t nCount, wxUniChar chPad = ' ', bool bFromRight = true);



  int Find(wxUniChar ch, bool bFromEnd = false) const;
  int Find(wxUniCharRef ch, bool bFromEnd = false) const
    { return Find(wxUniChar(ch), bFromEnd); }
  int Find(char ch, bool bFromEnd = false) const
    { return Find(wxUniChar(ch), bFromEnd); }
  int Find(unsigned char ch, bool bFromEnd = false) const
    { return Find(wxUniChar(ch), bFromEnd); }
  int Find(wchar_t ch, bool bFromEnd = false) const
    { return Find(wxUniChar(ch), bFromEnd); }

  int Find(const wxString& sub) const
  {
    size_type idx = find(sub);
    return (idx == npos) ? (-1) : (int)idx;
  }
  int Find(const char *sub) const
  {
    size_type idx = find(sub);
    return (idx == npos) ? (-1) : (int)idx;
  }
  int Find(const wchar_t *sub) const
  {
    size_type idx = find(sub);
    return (idx == npos) ? (-1) : (int)idx;
  }

  int Find(const wxCStrData& sub) const
    { return Find(sub.AsString()); }
  int Find(const wxScopedCharBuffer& sub) const
    { return Find(sub.data()); }
  int Find(const wxScopedWCharBuffer& sub) const
    { return Find(sub.data()); }



  size_t Replace(const wxString& strOld,
                 const wxString& strNew,
                 bool bReplaceAll = true);


  bool Matches(const wxString& mask) const;







  bool ToLong(long *val, int base = 10) const;

  bool ToULong(unsigned long *val, int base = 10) const;


  bool ToLongLong(long long *val, int base = 10) const;

  bool ToULongLong(unsigned long long *val, int base = 10) const;


  bool ToDouble(double *val) const;



  bool ToCLong(long *val, int base = 10) const;

  bool ToCULong(unsigned long *val, int base = 10) const;

  bool ToCDouble(double *val) const;




  static wxString FromDouble(double val, int precision = -1);

  static wxString FromCDouble(double val, int precision = -1);






  inline int Printf(const wxFormatString& f1) { return DoPrintfWchar(f1); } template<typename T1> int Printf(const wxFormatString& f1, T1 a1) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int Printf(const wxFormatString& f1, T1 a1, T2 a2) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }
# 2317 "/usr/local/include/wx-3.0/wx/string.h"
  int PrintfV(const wxString& format, va_list argptr);




  inline static wxString Format(const wxFormatString& f1) { return DoFormatWchar(f1); } template<typename T1> static wxString Format(const wxFormatString& f1, T1 a1) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> static wxString Format(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoFormatWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }
# 2337 "/usr/local/include/wx-3.0/wx/string.h"
  static wxString FormatV(const wxString& format, va_list argptr);




  bool Alloc(size_t nLen) { reserve(nLen); return capacity() >= nLen; }


  bool Shrink();
# 2360 "/usr/local/include/wx-3.0/wx/string.h"
  wxString SubString(size_t from, size_t to) const
      { return Mid(from, (to - from + 1)); }

  enum caseCompare {exact, ignoreCase};

  enum stripType {leading = 0x1, trailing = 0x2, both = 0x3};





  inline int sprintf(const wxFormatString& f1) { return DoPrintfWchar(f1); } template<typename T1> int sprintf(const wxFormatString& f1, T1 a1) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int sprintf(const wxFormatString& f1, T1 a1, T2 a2) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int sprintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }
# 2387 "/usr/local/include/wx-3.0/wx/string.h"
  int CompareTo(const wxChar* psz, caseCompare cmp = exact) const
    { return cmp == exact ? Cmp(psz) : CmpNoCase(psz); }


  size_t Length() const { return length(); }

  int Freq(wxUniChar ch) const;

  void LowerCase() { MakeLower(); }

  void UpperCase() { MakeUpper(); }

  wxString Strip(stripType w = trailing) const;


  size_t Index(const wxChar* psz) const { return Find(psz); }
  size_t Index(wxUniChar ch) const { return Find(ch); }

  wxString& Remove(size_t pos) { return Truncate(pos); }
  wxString& RemoveLast(size_t n = 1) { return Truncate(length() - n); }

  wxString& Remove(size_t nStart, size_t nLen)
      { return (wxString&)erase( nStart, nLen ); }


  int First( wxUniChar ch ) const { return Find(ch); }
  int First( wxUniCharRef ch ) const { return Find(ch); }
  int First( char ch ) const { return Find(ch); }
  int First( unsigned char ch ) const { return Find(ch); }
  int First( wchar_t ch ) const { return Find(ch); }
  int First( const wxString& str ) const { return Find(str); }
  int Last( wxUniChar ch ) const { return Find(ch, true); }
  bool Contains(const wxString& str) const { return Find(str) != (-1); }


  bool IsNull() const { return empty(); }




  wxString(const wxString& str, size_t nPos, size_t nLen)
      { assign(str, nPos, nLen); }

  wxString(const_iterator first, const_iterator last)
      : m_impl(first.impl(), last.impl()) { }



  wxString(const char *first, const char *last)
  {
      SubstrBufFromMB str(ImplStr(first, last - first));
      m_impl.assign(str.data, str.len);
  }
  wxString(const wchar_t *first, const wchar_t *last)
  {
      SubstrBufFromWC str(ImplStr(first, last - first));
      m_impl.assign(str.data, str.len);
  }

  wxString(const wxCStrData& first, const wxCStrData& last)
      : m_impl(CreateConstIterator(first).impl(),
               CreateConstIterator(last).impl())
  {
      do { if ( wxTheAssertHandler && !(first.m_str == last.m_str) && (wxOnAssert("/usr/local/include/wx-3.0/wx/string.h", 2451, __FUNCTION__, "first.m_str == last.m_str", "pointers must be into the same string"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );

  }




  wxString& append(const wxString& str, size_t pos, size_t n)
  {
                                      ;

      size_t from, len;
      str.PosLenToImpl(pos, n, &from, &len);
      m_impl.append(str.m_impl, from, len);
      return *this;
  }

  wxString& append(const wxString& str)
  {
                                                 ;

      m_impl.append(str.m_impl);
      return *this;
  }


  wxString& append(const char *sz)
  {
                                         ;

      m_impl.append(ImplStr(sz));
      return *this;
  }

  wxString& append(const wchar_t *sz)
  {
                                         ;

      m_impl.append(ImplStr(sz));
      return *this;
  }

  wxString& append(const char *sz, size_t n)
  {
                                         ;

      SubstrBufFromMB str(ImplStr(sz, n));
      m_impl.append(str.data, str.len);
      return *this;
  }
  wxString& append(const wchar_t *sz, size_t n)
  {
                                      ;

      SubstrBufFromWC str(ImplStr(sz, n));
      m_impl.append(str.data, str.len);
      return *this;
  }

  wxString& append(const wxCStrData& str)
    { return append(str.AsString()); }
  wxString& append(const wxScopedCharBuffer& str)
    { return append(str.data(), str.length()); }
  wxString& append(const wxScopedWCharBuffer& str)
    { return append(str.data(), str.length()); }
  wxString& append(const wxCStrData& str, size_t n)
    { return append(str.AsString(), 0, n); }
  wxString& append(const wxScopedCharBuffer& str, size_t n)
    { return append(str.data(), n); }
  wxString& append(const wxScopedWCharBuffer& str, size_t n)
    { return append(str.data(), n); }


  wxString& append(size_t n, wxUniChar ch)
  {
# 2534 "/usr/local/include/wx-3.0/wx/string.h"
      {
                                          ;

          m_impl.append(n, (wxStringCharType)ch);
      }

      return *this;
  }

  wxString& append(size_t n, wxUniCharRef ch)
    { return append(n, wxUniChar(ch)); }
  wxString& append(size_t n, char ch)
    { return append(n, wxUniChar(ch)); }
  wxString& append(size_t n, unsigned char ch)
    { return append(n, wxUniChar(ch)); }
  wxString& append(size_t n, wchar_t ch)
    { return append(n, wxUniChar(ch)); }


  wxString& append(const_iterator first, const_iterator last)
  {
                                         ;

      m_impl.append(first.impl(), last.impl());
      return *this;
  }

  wxString& append(const char *first, const char *last)
    { return append(first, last - first); }
  wxString& append(const wchar_t *first, const wchar_t *last)
    { return append(first, last - first); }
  wxString& append(const wxCStrData& first, const wxCStrData& last)
    { return append(CreateConstIterator(first), CreateConstIterator(last)); }



  wxString& assign(const wxString& str)
  {
                                              ;

      m_impl = str.m_impl;

      return *this;
  }



  wxString& assign(const wxString& str, size_t len)
  {
# 2595 "/usr/local/include/wx-3.0/wx/string.h"
      m_impl.assign(str.m_impl, 0, str.LenToImpl(len));

      return *this;
  }


  wxString& assign(const wxString& str, size_t pos, size_t n)
  {
      size_t from, len;
      str.PosLenToImpl(pos, n, &from, &len);
      m_impl.assign(str.m_impl, from, len);



                                   ;

      return *this;
  }


  wxString& assign(const char *sz)
  {
                                 ;

      m_impl.assign(ImplStr(sz));

      return *this;
  }

  wxString& assign(const wchar_t *sz)
  {
                                 ;

      m_impl.assign(ImplStr(sz));

      return *this;
  }

  wxString& assign(const char *sz, size_t n)
  {
                                 ;

      SubstrBufFromMB str(ImplStr(sz, n));
      m_impl.assign(str.data, str.len);

      return *this;
  }

  wxString& assign(const wchar_t *sz, size_t n)
  {
                                   ;

      SubstrBufFromWC str(ImplStr(sz, n));
      m_impl.assign(str.data, str.len);

      return *this;
  }

  wxString& assign(const wxCStrData& str)
    { return assign(str.AsString()); }
  wxString& assign(const wxScopedCharBuffer& str)
    { return assign(str.data(), str.length()); }
  wxString& assign(const wxScopedWCharBuffer& str)
    { return assign(str.data(), str.length()); }
  wxString& assign(const wxCStrData& str, size_t len)
    { return assign(str.AsString(), len); }
  wxString& assign(const wxScopedCharBuffer& str, size_t len)
    { return assign(str.data(), len); }
  wxString& assign(const wxScopedWCharBuffer& str, size_t len)
    { return assign(str.data(), len); }


  wxString& assign(size_t n, wxUniChar ch)
  {
                                   ;






          m_impl.assign(n, (wxStringCharType)ch);

      return *this;
  }

  wxString& assign(size_t n, wxUniCharRef ch)
    { return assign(n, wxUniChar(ch)); }
  wxString& assign(size_t n, char ch)
    { return assign(n, wxUniChar(ch)); }
  wxString& assign(size_t n, unsigned char ch)
    { return assign(n, wxUniChar(ch)); }
  wxString& assign(size_t n, wchar_t ch)
    { return assign(n, wxUniChar(ch)); }


  wxString& assign(const_iterator first, const_iterator last)
  {
                                 ;

      m_impl.assign(first.impl(), last.impl());

      return *this;
  }

  wxString& assign(const char *first, const char *last)
    { return assign(first, last - first); }
  wxString& assign(const wchar_t *first, const wchar_t *last)
    { return assign(first, last - first); }
  wxString& assign(const wxCStrData& first, const wxCStrData& last)
    { return assign(CreateConstIterator(first), CreateConstIterator(last)); }



  int compare(const wxString& str) const;
  int compare(const char* sz) const;
  int compare(const wchar_t* sz) const;
  int compare(const wxCStrData& str) const
    { return compare(str.AsString()); }
  int compare(const wxScopedCharBuffer& str) const
    { return compare(str.data()); }
  int compare(const wxScopedWCharBuffer& str) const
    { return compare(str.data()); }

  int compare(size_t nStart, size_t nLen, const wxString& str) const;

  int compare(size_t nStart, size_t nLen,
              const wxString& str, size_t nStart2, size_t nLen2) const;

  int compare(size_t nStart, size_t nLen,
              const char* sz, size_t nCount = npos) const;
  int compare(size_t nStart, size_t nLen,
              const wchar_t* sz, size_t nCount = npos) const;


  wxString& insert(size_t nPos, const wxString& str)
    { insert(GetIterForNthChar(nPos), str.begin(), str.end()); return *this; }

  wxString& insert(size_t nPos, const wxString& str, size_t nStart, size_t n)
  {
                                      ;

      size_t from, len;
      str.PosLenToImpl(nStart, n, &from, &len);
      m_impl.insert(PosToImpl(nPos), str.m_impl, from, len);

      return *this;
  }


  wxString& insert(size_t nPos, const char *sz)
  {
                                 ;

      m_impl.insert(PosToImpl(nPos), ImplStr(sz));

      return *this;
  }

  wxString& insert(size_t nPos, const wchar_t *sz)
  {
                                 ;

      m_impl.insert(PosToImpl(nPos), ImplStr(sz)); return *this;
  }

  wxString& insert(size_t nPos, const char *sz, size_t n)
  {
                                      ;

      SubstrBufFromMB str(ImplStr(sz, n));
      m_impl.insert(PosToImpl(nPos), str.data, str.len);

      return *this;
  }

  wxString& insert(size_t nPos, const wchar_t *sz, size_t n)
  {
                                      ;

      SubstrBufFromWC str(ImplStr(sz, n));
      m_impl.insert(PosToImpl(nPos), str.data, str.len);

      return *this;
  }


  wxString& insert(size_t nPos, size_t n, wxUniChar ch)
  {
                                      ;






          m_impl.insert(PosToImpl(nPos), n, (wxStringCharType)ch);
      return *this;
  }

  iterator insert(iterator it, wxUniChar ch)
  {
                                      ;
# 2808 "/usr/local/include/wx-3.0/wx/string.h"
          return iterator(this, m_impl.insert(it.impl(), (wxStringCharType)ch));
  }

  void insert(iterator it, const_iterator first, const_iterator last)
  {
                                 ;

      m_impl.insert(it.impl(), first.impl(), last.impl());
  }


  void insert(iterator it, const char *first, const char *last)
    { insert(it - begin(), first, last - first); }
  void insert(iterator it, const wchar_t *first, const wchar_t *last)
    { insert(it - begin(), first, last - first); }
  void insert(iterator it, const wxCStrData& first, const wxCStrData& last)
    { insert(it, CreateConstIterator(first), CreateConstIterator(last)); }


  void insert(iterator it, size_type n, wxUniChar ch)
  {
                                      ;






          m_impl.insert(it.impl(), n, (wxStringCharType)ch);
  }


  wxString& erase(size_type pos = 0, size_type n = npos)
  {
                                 ;

      size_t from, len;
      PosLenToImpl(pos, n, &from, &len);
      m_impl.erase(from, len);

      return *this;
  }


  iterator erase(iterator first, iterator last)
  {
                                 ;

      return iterator(this, m_impl.erase(first.impl(), last.impl()));
  }

  iterator erase(iterator first)
  {
                                       ;

      return iterator(this, m_impl.erase(first.impl()));
  }




  void clear()
  {
                                   ;

      m_impl.clear();
  }



  wxString& replace(size_t nStart, size_t nLen, const char* sz)
  {
                                 ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);
      m_impl.replace(from, len, ImplStr(sz));

      return *this;
  }

  wxString& replace(size_t nStart, size_t nLen, const wchar_t* sz)
  {
                                 ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);
      m_impl.replace(from, len, ImplStr(sz));

      return *this;
  }


  wxString& replace(size_t nStart, size_t nLen, const wxString& str)
  {
                                 ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);
      m_impl.replace(from, len, str.m_impl);

      return *this;
  }


  wxString& replace(size_t nStart, size_t nLen, size_t nCount, wxUniChar ch)
  {
                                 ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);





          m_impl.replace(from, len, nCount, (wxStringCharType)ch);

      return *this;
  }


  wxString& replace(size_t nStart, size_t nLen,
                    const wxString& str, size_t nStart2, size_t nLen2)
  {
                                 ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);

      size_t from2, len2;
      str.PosLenToImpl(nStart2, nLen2, &from2, &len2);

      m_impl.replace(from, len, str.m_impl, from2, len2);

      return *this;
  }


  wxString& replace(size_t nStart, size_t nLen,
                    const char* sz, size_t nCount)
  {
                                 ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);

      SubstrBufFromMB str(ImplStr(sz, nCount));

      m_impl.replace(from, len, str.data, str.len);

      return *this;
  }

  wxString& replace(size_t nStart, size_t nLen,
                    const wchar_t* sz, size_t nCount)
  {
                                 ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);

      SubstrBufFromWC str(ImplStr(sz, nCount));

      m_impl.replace(from, len, str.data, str.len);

      return *this;
  }

  wxString& replace(size_t nStart, size_t nLen,
                    const wxString& s, size_t nCount)
  {
                                 ;

      size_t from, len;
      PosLenToImpl(nStart, nLen, &from, &len);
      m_impl.replace(from, len, s.m_impl.c_str(), s.LenToImpl(nCount));

      return *this;
  }

  wxString& replace(iterator first, iterator last, const char* s)
  {
                                 ;

      m_impl.replace(first.impl(), last.impl(), ImplStr(s));

      return *this;
  }

  wxString& replace(iterator first, iterator last, const wchar_t* s)
  {
                                 ;

      m_impl.replace(first.impl(), last.impl(), ImplStr(s));

      return *this;
  }

  wxString& replace(iterator first, iterator last, const char* s, size_type n)
  {
                                 ;

      SubstrBufFromMB str(ImplStr(s, n));
      m_impl.replace(first.impl(), last.impl(), str.data, str.len);

      return *this;
  }

  wxString& replace(iterator first, iterator last, const wchar_t* s, size_type n)
  {
                                 ;

      SubstrBufFromWC str(ImplStr(s, n));
      m_impl.replace(first.impl(), last.impl(), str.data, str.len);

      return *this;
  }

  wxString& replace(iterator first, iterator last, const wxString& s)
  {
                                 ;

      m_impl.replace(first.impl(), last.impl(), s.m_impl);

      return *this;
  }

  wxString& replace(iterator first, iterator last, size_type n, wxUniChar ch)
  {
                                 ;







          m_impl.replace(first.impl(), last.impl(), n, (wxStringCharType)ch);

      return *this;
  }

  wxString& replace(iterator first, iterator last,
                    const_iterator first1, const_iterator last1)
  {
                                 ;

      m_impl.replace(first.impl(), last.impl(), first1.impl(), last1.impl());

      return *this;
  }

  wxString& replace(iterator first, iterator last,
                    const char *first1, const char *last1)
    { replace(first, last, first1, last1 - first1); return *this; }
  wxString& replace(iterator first, iterator last,
                    const wchar_t *first1, const wchar_t *last1)
    { replace(first, last, first1, last1 - first1); return *this; }


  void swap(wxString& str)
  {
# 3079 "/usr/local/include/wx-3.0/wx/string.h"
      m_impl.swap(str.m_impl);
  }


  size_t find(const wxString& str, size_t nStart = 0) const
    { return PosFromImpl(m_impl.find(str.m_impl, PosToImpl(nStart))); }


  size_t find(const char* sz, size_t nStart = 0, size_t n = npos) const
  {
      SubstrBufFromMB str(ImplStr(sz, n));
      return PosFromImpl(m_impl.find(str.data, PosToImpl(nStart), str.len));
  }
  size_t find(const wchar_t* sz, size_t nStart = 0, size_t n = npos) const
  {
      SubstrBufFromWC str(ImplStr(sz, n));
      return PosFromImpl(m_impl.find(str.data, PosToImpl(nStart), str.len));
  }
  size_t find(const wxScopedCharBuffer& s, size_t nStart = 0, size_t n = npos) const
    { return find(s.data(), nStart, n); }
  size_t find(const wxScopedWCharBuffer& s, size_t nStart = 0, size_t n = npos) const
    { return find(s.data(), nStart, n); }
  size_t find(const wxCStrData& s, size_t nStart = 0, size_t n = npos) const
    { return find(s.AsWChar(), nStart, n); }


  size_t find(wxUniChar ch, size_t nStart = 0) const
  {






        return PosFromImpl(m_impl.find((wxStringCharType)ch,
                                       PosToImpl(nStart)));

  }
  size_t find(wxUniCharRef ch, size_t nStart = 0) const
    { return find(wxUniChar(ch), nStart); }
  size_t find(char ch, size_t nStart = 0) const
    { return find(wxUniChar(ch), nStart); }
  size_t find(unsigned char ch, size_t nStart = 0) const
    { return find(wxUniChar(ch), nStart); }
  size_t find(wchar_t ch, size_t nStart = 0) const
    { return find(wxUniChar(ch), nStart); }




  size_t rfind(const wxString& str, size_t nStart = npos) const
    { return PosFromImpl(m_impl.rfind(str.m_impl, PosToImpl(nStart))); }


  size_t rfind(const char* sz, size_t nStart = npos, size_t n = npos) const
  {
      SubstrBufFromMB str(ImplStr(sz, n));
      return PosFromImpl(m_impl.rfind(str.data, PosToImpl(nStart), str.len));
  }
  size_t rfind(const wchar_t* sz, size_t nStart = npos, size_t n = npos) const
  {
      SubstrBufFromWC str(ImplStr(sz, n));
      return PosFromImpl(m_impl.rfind(str.data, PosToImpl(nStart), str.len));
  }
  size_t rfind(const wxScopedCharBuffer& s, size_t nStart = npos, size_t n = npos) const
    { return rfind(s.data(), nStart, n); }
  size_t rfind(const wxScopedWCharBuffer& s, size_t nStart = npos, size_t n = npos) const
    { return rfind(s.data(), nStart, n); }
  size_t rfind(const wxCStrData& s, size_t nStart = npos, size_t n = npos) const
    { return rfind(s.AsWChar(), nStart, n); }

  size_t rfind(wxUniChar ch, size_t nStart = npos) const
  {






        return PosFromImpl(m_impl.rfind((wxStringCharType)ch,
                                        PosToImpl(nStart)));
  }
  size_t rfind(wxUniCharRef ch, size_t nStart = npos) const
    { return rfind(wxUniChar(ch), nStart); }
  size_t rfind(char ch, size_t nStart = npos) const
    { return rfind(wxUniChar(ch), nStart); }
  size_t rfind(unsigned char ch, size_t nStart = npos) const
    { return rfind(wxUniChar(ch), nStart); }
  size_t rfind(wchar_t ch, size_t nStart = npos) const
    { return rfind(wxUniChar(ch), nStart); }
# 3231 "/usr/local/include/wx-3.0/wx/string.h"
  size_t find_first_of(const wxString& str, size_t nStart = 0) const



    { return find_first_of(str.mb_str(), nStart); }


  size_t find_first_of(const char* sz, size_t nStart = 0) const;
  size_t find_first_of(const wchar_t* sz, size_t nStart = 0) const;
  size_t find_first_of(const char* sz, size_t nStart, size_t n) const;
  size_t find_first_of(const wchar_t* sz, size_t nStart, size_t n) const;

  size_t find_first_of(wxUniChar c, size_t nStart = 0) const
    { return find(c, nStart); }

  size_t find_last_of (const wxString& str, size_t nStart = npos) const



    { return find_last_of(str.mb_str(), nStart); }


  size_t find_last_of (const char* sz, size_t nStart = npos) const;
  size_t find_last_of (const wchar_t* sz, size_t nStart = npos) const;
  size_t find_last_of(const char* sz, size_t nStart, size_t n) const;
  size_t find_last_of(const wchar_t* sz, size_t nStart, size_t n) const;

  size_t find_last_of(wxUniChar c, size_t nStart = npos) const
    { return rfind(c, nStart); }




  size_t find_first_not_of(const wxString& str, size_t nStart = 0) const



    { return find_first_not_of(str.mb_str(), nStart); }


  size_t find_first_not_of(const char* sz, size_t nStart = 0) const;
  size_t find_first_not_of(const wchar_t* sz, size_t nStart = 0) const;
  size_t find_first_not_of(const char* sz, size_t nStart, size_t n) const;
  size_t find_first_not_of(const wchar_t* sz, size_t nStart, size_t n) const;

  size_t find_first_not_of(wxUniChar ch, size_t nStart = 0) const;

  size_t find_last_not_of(const wxString& str, size_t nStart = npos) const



    { return find_last_not_of(str.mb_str(), nStart); }


  size_t find_last_not_of(const char* sz, size_t nStart = npos) const;
  size_t find_last_not_of(const wchar_t* sz, size_t nStart = npos) const;
  size_t find_last_not_of(const char* sz, size_t nStart, size_t n) const;
  size_t find_last_not_of(const wchar_t* sz, size_t nStart, size_t n) const;

  size_t find_last_not_of(wxUniChar ch, size_t nStart = npos) const;




  size_t find_first_of(wxUniCharRef ch, size_t nStart = 0) const
    { return find_first_of(wxUniChar(ch), nStart); }
  size_t find_first_of(char ch, size_t nStart = 0) const
    { return find_first_of(wxUniChar(ch), nStart); }
  size_t find_first_of(unsigned char ch, size_t nStart = 0) const
    { return find_first_of(wxUniChar(ch), nStart); }
  size_t find_first_of(wchar_t ch, size_t nStart = 0) const
    { return find_first_of(wxUniChar(ch), nStart); }
  size_t find_last_of(wxUniCharRef ch, size_t nStart = npos) const
    { return find_last_of(wxUniChar(ch), nStart); }
  size_t find_last_of(char ch, size_t nStart = npos) const
    { return find_last_of(wxUniChar(ch), nStart); }
  size_t find_last_of(unsigned char ch, size_t nStart = npos) const
    { return find_last_of(wxUniChar(ch), nStart); }
  size_t find_last_of(wchar_t ch, size_t nStart = npos) const
    { return find_last_of(wxUniChar(ch), nStart); }
  size_t find_first_not_of(wxUniCharRef ch, size_t nStart = 0) const
    { return find_first_not_of(wxUniChar(ch), nStart); }
  size_t find_first_not_of(char ch, size_t nStart = 0) const
    { return find_first_not_of(wxUniChar(ch), nStart); }
  size_t find_first_not_of(unsigned char ch, size_t nStart = 0) const
    { return find_first_not_of(wxUniChar(ch), nStart); }
  size_t find_first_not_of(wchar_t ch, size_t nStart = 0) const
    { return find_first_not_of(wxUniChar(ch), nStart); }
  size_t find_last_not_of(wxUniCharRef ch, size_t nStart = npos) const
    { return find_last_not_of(wxUniChar(ch), nStart); }
  size_t find_last_not_of(char ch, size_t nStart = npos) const
    { return find_last_not_of(wxUniChar(ch), nStart); }
  size_t find_last_not_of(unsigned char ch, size_t nStart = npos) const
    { return find_last_not_of(wxUniChar(ch), nStart); }
  size_t find_last_not_of(wchar_t ch, size_t nStart = npos) const
    { return find_last_not_of(wxUniChar(ch), nStart); }


  size_t find_first_of(const wxCStrData& sz, size_t nStart = 0) const
    { return find_first_of(sz.AsString(), nStart); }
  size_t find_first_of(const wxScopedCharBuffer& sz, size_t nStart = 0) const
    { return find_first_of(sz.data(), nStart); }
  size_t find_first_of(const wxScopedWCharBuffer& sz, size_t nStart = 0) const
    { return find_first_of(sz.data(), nStart); }
  size_t find_first_of(const wxCStrData& sz, size_t nStart, size_t n) const
    { return find_first_of(sz.AsWChar(), nStart, n); }
  size_t find_first_of(const wxScopedCharBuffer& sz, size_t nStart, size_t n) const
    { return find_first_of(sz.data(), nStart, n); }
  size_t find_first_of(const wxScopedWCharBuffer& sz, size_t nStart, size_t n) const
    { return find_first_of(sz.data(), nStart, n); }

  size_t find_last_of(const wxCStrData& sz, size_t nStart = 0) const
    { return find_last_of(sz.AsString(), nStart); }
  size_t find_last_of(const wxScopedCharBuffer& sz, size_t nStart = 0) const
    { return find_last_of(sz.data(), nStart); }
  size_t find_last_of(const wxScopedWCharBuffer& sz, size_t nStart = 0) const
    { return find_last_of(sz.data(), nStart); }
  size_t find_last_of(const wxCStrData& sz, size_t nStart, size_t n) const
    { return find_last_of(sz.AsWChar(), nStart, n); }
  size_t find_last_of(const wxScopedCharBuffer& sz, size_t nStart, size_t n) const
    { return find_last_of(sz.data(), nStart, n); }
  size_t find_last_of(const wxScopedWCharBuffer& sz, size_t nStart, size_t n) const
    { return find_last_of(sz.data(), nStart, n); }

  size_t find_first_not_of(const wxCStrData& sz, size_t nStart = 0) const
    { return find_first_not_of(sz.AsString(), nStart); }
  size_t find_first_not_of(const wxScopedCharBuffer& sz, size_t nStart = 0) const
    { return find_first_not_of(sz.data(), nStart); }
  size_t find_first_not_of(const wxScopedWCharBuffer& sz, size_t nStart = 0) const
    { return find_first_not_of(sz.data(), nStart); }
  size_t find_first_not_of(const wxCStrData& sz, size_t nStart, size_t n) const
    { return find_first_not_of(sz.AsWChar(), nStart, n); }
  size_t find_first_not_of(const wxScopedCharBuffer& sz, size_t nStart, size_t n) const
    { return find_first_not_of(sz.data(), nStart, n); }
  size_t find_first_not_of(const wxScopedWCharBuffer& sz, size_t nStart, size_t n) const
    { return find_first_not_of(sz.data(), nStart, n); }

  size_t find_last_not_of(const wxCStrData& sz, size_t nStart = 0) const
    { return find_last_not_of(sz.AsString(), nStart); }
  size_t find_last_not_of(const wxScopedCharBuffer& sz, size_t nStart = 0) const
    { return find_last_not_of(sz.data(), nStart); }
  size_t find_last_not_of(const wxScopedWCharBuffer& sz, size_t nStart = 0) const
    { return find_last_not_of(sz.data(), nStart); }
  size_t find_last_not_of(const wxCStrData& sz, size_t nStart, size_t n) const
    { return find_last_not_of(sz.AsWChar(), nStart, n); }
  size_t find_last_not_of(const wxScopedCharBuffer& sz, size_t nStart, size_t n) const
    { return find_last_not_of(sz.data(), nStart, n); }
  size_t find_last_not_of(const wxScopedWCharBuffer& sz, size_t nStart, size_t n) const
    { return find_last_not_of(sz.data(), nStart, n); }


  wxString& operator+=(const wxString& s)
  {
                                         ;

      m_impl += s.m_impl;
      return *this;
  }

  wxString& operator+=(const char *psz)
  {
                                         ;

      m_impl += ImplStr(psz);
      return *this;
  }
  wxString& operator+=(const wchar_t *pwz)
  {
                                         ;

      m_impl += ImplStr(pwz);
      return *this;
  }
  wxString& operator+=(const wxCStrData& s)
  {
                                         ;

      m_impl += s.AsString().m_impl;
      return *this;
  }
  wxString& operator+=(const wxScopedCharBuffer& s)
    { return append(s); }
  wxString& operator+=(const wxScopedWCharBuffer& s)
    { return append(s); }

  wxString& operator+=(wxUniChar ch)
  {
                                      ;






          m_impl += (wxStringCharType)ch;
      return *this;
  }
  wxString& operator+=(wxUniCharRef ch) { return *this += wxUniChar(ch); }
  wxString& operator+=(int ch) { return *this += wxUniChar(ch); }
  wxString& operator+=(char ch) { return *this += wxUniChar(ch); }
  wxString& operator+=(unsigned char ch) { return *this += wxUniChar(ch); }
  wxString& operator+=(wchar_t ch) { return *this += wxUniChar(ch); }

private:


  wxStringCharType *DoGetWriteBuf(size_t nLen)
  {
      return m_impl.DoGetWriteBuf(nLen);
  }

  void DoUngetWriteBuf()
  {
                                 ;

      m_impl.DoUngetWriteBuf();
  }

  void DoUngetWriteBuf(size_t nLen)
  {
                                 ;

      m_impl.DoUngetWriteBuf(nLen);
  }




  int DoPrintfWchar(const wxChar *format, ...);
  static wxString DoFormatWchar(const wxChar *format, ...);
# 3470 "/usr/local/include/wx-3.0/wx/string.h"
  bool IsValid() const { return m_impl.GetStringData()->IsValid(); }


private:
  wxStringImpl m_impl;
# 3483 "/usr/local/include/wx-3.0/wx/string.h"
  template<typename T>
  struct ConvertedBuffer
  {


      ConvertedBuffer() : m_str(__null) {}
      ~ConvertedBuffer()
          { free(m_str); }

      bool Extend(size_t len)
      {

          void * const str = realloc(m_str, sizeof(T)*(len + 1));
          if ( !str )
              return false;

          m_str = static_cast<T *>(str);
          m_len = len;

          return true;
      }

      const wxScopedCharTypeBuffer<T> AsScopedBuffer() const
      {
          return wxScopedCharTypeBuffer<T>::CreateNonOwned(m_str, m_len);
      }

      T *m_str;
      size_t m_len;
  };
# 3571 "/usr/local/include/wx-3.0/wx/string.h"
  const wchar_t *AsWChar(const wxMBConv& conv) const;


  wxScopedWCharBuffer AsWCharBuf(const wxMBConv& conv) const
  {
      if ( !AsWChar(conv) )
          return wxScopedWCharBuffer::CreateNonOwned(L"", 0);

      return m_convertedToWChar.AsScopedBuffer();
  }

  ConvertedBuffer<wchar_t> m_convertedToWChar;
# 3606 "/usr/local/include/wx-3.0/wx/string.h"
  friend class wxCStrData;
  friend class wxStringInternalBuffer;
  friend class wxStringInternalBufferLength;
};







inline wxString::iterator operator+(ptrdiff_t n, wxString::iterator i)
  { return i + n; }
inline wxString::const_iterator operator+(ptrdiff_t n, wxString::const_iterator i)
  { return i + n; }
inline wxString::reverse_iterator operator+(ptrdiff_t n, wxString::reverse_iterator i)
  { return i + n; }
inline wxString::const_reverse_iterator operator+(ptrdiff_t n, wxString::const_reverse_iterator i)
  { return i + n; }





wxString operator+(const wxString& string1, const wxString& string2);
wxString operator+(const wxString& string, const char *psz);
wxString operator+(const wxString& string, const wchar_t *pwz);
wxString operator+(const char *psz, const wxString& string);
wxString operator+(const wchar_t *pwz, const wxString& string);

wxString operator+(const wxString& string, wxUniChar ch);
wxString operator+(wxUniChar ch, const wxString& string);

inline wxString operator+(const wxString& string, wxUniCharRef ch)
    { return string + (wxUniChar)ch; }
inline wxString operator+(const wxString& string, char ch)
    { return string + wxUniChar(ch); }
inline wxString operator+(const wxString& string, wchar_t ch)
    { return string + wxUniChar(ch); }
inline wxString operator+(wxUniCharRef ch, const wxString& string)
    { return (wxUniChar)ch + string; }
inline wxString operator+(char ch, const wxString& string)
    { return wxUniChar(ch) + string; }
inline wxString operator+(wchar_t ch, const wxString& string)
    { return wxUniChar(ch) + string; }
# 3659 "/usr/local/include/wx-3.0/wx/string.h"
namespace wxPrivate
{
# 3716 "/usr/local/include/wx-3.0/wx/string.h"
}
# 3725 "/usr/local/include/wx-3.0/wx/string.h"
class wxStringInternalBuffer
{
public:
    typedef wxStringCharType CharType;

    wxStringInternalBuffer(wxString& str, size_t lenWanted = 1024)
        : m_str(str), m_buf(__null)
        { m_buf = m_str.DoGetWriteBuf(lenWanted); }

    ~wxStringInternalBuffer() { m_str.DoUngetWriteBuf(); }

    operator wxStringCharType*() const { return m_buf; }

private:
    wxString& m_str;
    wxStringCharType *m_buf;

    private: wxStringInternalBuffer(const wxStringInternalBuffer&); wxStringInternalBuffer& operator=(const wxStringInternalBuffer&);
};

class wxStringInternalBufferLength
{
public:
    typedef wxStringCharType CharType;

    wxStringInternalBufferLength(wxString& str, size_t lenWanted = 1024)
        : m_str(str), m_buf(__null), m_len(0), m_lenSet(false)
    {
        m_buf = m_str.DoGetWriteBuf(lenWanted);
        do { if ( wxTheAssertHandler && !(m_buf != __null) && (wxOnAssert("/usr/local/include/wx-3.0/wx/string.h", 3754, __FUNCTION__, "m_buf != __null", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
    }

    ~wxStringInternalBufferLength()
    {
        do { if ( wxTheAssertHandler && !(m_lenSet) && (wxOnAssert("/usr/local/include/wx-3.0/wx/string.h", 3759, __FUNCTION__, "m_lenSet", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
        m_str.DoUngetWriteBuf(m_len);
    }

    operator wxStringCharType*() const { return m_buf; }
    void SetLength(size_t length) { m_len = length; m_lenSet = true; }

private:
    wxString& m_str;
    wxStringCharType *m_buf;
    size_t m_len;
    bool m_lenSet;

    private: wxStringInternalBufferLength(const wxStringInternalBufferLength&); wxStringInternalBufferLength& operator=(const wxStringInternalBufferLength&);
};



template<typename T>
class wxStringTypeBufferBase
{
public:
    typedef T CharType;

    wxStringTypeBufferBase(wxString& str, size_t lenWanted = 1024)
        : m_str(str), m_buf(lenWanted)
    {






        size_t len;
        const wxCharTypeBuffer<CharType> buf(str.tchar_str(&len, (CharType *)__null));
        if ( buf )
        {
            if ( len > lenWanted )
            {


                m_buf.data()[lenWanted] = 0;
                len = lenWanted - 1;
            }

            memcpy(m_buf.data(), buf, (len + 1)*sizeof(CharType));
        }


    }

    operator CharType*() { return m_buf.data(); }

protected:
    wxString& m_str;
    wxCharTypeBuffer<CharType> m_buf;
};

template<typename T>
class wxStringTypeBufferLengthBase : public wxStringTypeBufferBase<T>
{
public:
    wxStringTypeBufferLengthBase(wxString& str, size_t lenWanted = 1024)
        : wxStringTypeBufferBase<T>(str, lenWanted),
          m_len(0),
          m_lenSet(false)
        { }

    ~wxStringTypeBufferLengthBase()
    {
        do { if ( wxTheAssertHandler && !(this->m_lenSet) && (wxOnAssert("/usr/local/include/wx-3.0/wx/string.h", 3829, __FUNCTION__, "this->m_lenSet", "forgot to call SetLength()"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
    }

    void SetLength(size_t length) { m_len = length; m_lenSet = true; }

protected:
    size_t m_len;
    bool m_lenSet;
};

template<typename T>
class wxStringTypeBuffer : public wxStringTypeBufferBase<T>
{
public:
    wxStringTypeBuffer(wxString& str, size_t lenWanted = 1024)
        : wxStringTypeBufferBase<T>(str, lenWanted)
        { }

    ~wxStringTypeBuffer()
    {
        this->m_str.assign(this->m_buf.data());
    }

    private: wxStringTypeBuffer(const wxStringTypeBuffer&); wxStringTypeBuffer& operator=(const wxStringTypeBuffer&);
};

template<typename T>
class wxStringTypeBufferLength : public wxStringTypeBufferLengthBase<T>
{
public:
    wxStringTypeBufferLength(wxString& str, size_t lenWanted = 1024)
        : wxStringTypeBufferLengthBase<T>(str, lenWanted)
        { }

    ~wxStringTypeBufferLength()
    {
        this->m_str.assign(this->m_buf.data(), this->m_len);
    }

    private: wxStringTypeBufferLength(const wxStringTypeBufferLength&); wxStringTypeBufferLength& operator=(const wxStringTypeBufferLength&);
};
# 3911 "/usr/local/include/wx-3.0/wx/string.h"
typedef wxStringInternalBuffer wxStringBuffer;
typedef wxStringInternalBufferLength wxStringBufferLength;
# 3985 "/usr/local/include/wx-3.0/wx/string.h"
inline bool operator ==(const wxChar * x, const wxString& y) { return 0 == y.Cmp(x); } inline bool operator !=(const wxChar * x, const wxString& y) { return 0 != y.Cmp(x); } inline bool operator >=(const wxChar * x, const wxString& y) { return 0 >= y.Cmp(x); } inline bool operator <=(const wxChar * x, const wxString& y) { return 0 <= y.Cmp(x); } inline bool operator >(const wxChar * x, const wxString& y) { return 0 > y.Cmp(x); } inline bool operator <(const wxChar * x, const wxString& y) { return 0 < y.Cmp(x); } inline bool operator ==(const wxString& y, const wxChar * x) { return 0 == y.Cmp(x); } inline bool operator !=(const wxString& y, const wxChar * x) { return 0 != y.Cmp(x); } inline bool operator >=(const wxString& y, const wxChar * x) { return 0 <= y.Cmp(x); } inline bool operator <=(const wxString& y, const wxChar * x) { return 0 >= y.Cmp(x); } inline bool operator >(const wxString& y, const wxChar * x) { return 0 < y.Cmp(x); } inline bool operator <(const wxString& y, const wxChar * x) { return 0 > y.Cmp(x); }



inline bool operator==(const wxString& s1, const wxString& s2)
    { return s1.IsSameAs(s2); }
inline bool operator!=(const wxString& s1, const wxString& s2)
    { return !s1.IsSameAs(s2); }
inline bool operator< (const wxString& s1, const wxString& s2)
    { return s1.Cmp(s2) < 0; }
inline bool operator> (const wxString& s1, const wxString& s2)
    { return s1.Cmp(s2) > 0; }
inline bool operator<=(const wxString& s1, const wxString& s2)
    { return s1.Cmp(s2) <= 0; }
inline bool operator>=(const wxString& s1, const wxString& s2)
    { return s1.Cmp(s2) >= 0; }

inline bool operator==(const wxString& s1, const wxCStrData& s2)
    { return s1 == s2.AsString(); }
inline bool operator==(const wxCStrData& s1, const wxString& s2)
    { return s1.AsString() == s2; }
inline bool operator!=(const wxString& s1, const wxCStrData& s2)
    { return s1 != s2.AsString(); }
inline bool operator!=(const wxCStrData& s1, const wxString& s2)
    { return s1.AsString() != s2; }

inline bool operator==(const wxString& s1, const wxScopedWCharBuffer& s2)
    { return (s1.Cmp((const wchar_t *)s2) == 0); }
inline bool operator==(const wxScopedWCharBuffer& s1, const wxString& s2)
    { return (s2.Cmp((const wchar_t *)s1) == 0); }
inline bool operator!=(const wxString& s1, const wxScopedWCharBuffer& s2)
    { return (s1.Cmp((const wchar_t *)s2) != 0); }
inline bool operator!=(const wxScopedWCharBuffer& s1, const wxString& s2)
    { return (s2.Cmp((const wchar_t *)s1) != 0); }

inline bool operator==(const wxString& s1, const wxScopedCharBuffer& s2)
    { return (s1.Cmp((const char *)s2) == 0); }
inline bool operator==(const wxScopedCharBuffer& s1, const wxString& s2)
    { return (s2.Cmp((const char *)s1) == 0); }
inline bool operator!=(const wxString& s1, const wxScopedCharBuffer& s2)
    { return (s1.Cmp((const char *)s2) != 0); }
inline bool operator!=(const wxScopedCharBuffer& s1, const wxString& s2)
    { return (s2.Cmp((const char *)s1) != 0); }

inline wxString operator+(const wxString& string, const wxScopedWCharBuffer& buf)
    { return string + (const wchar_t *)buf; }
inline wxString operator+(const wxScopedWCharBuffer& buf, const wxString& string)
    { return (const wchar_t *)buf + string; }

inline wxString operator+(const wxString& string, const wxScopedCharBuffer& buf)
    { return string + (const char *)buf; }
inline wxString operator+(const wxScopedCharBuffer& buf, const wxString& string)
    { return (const char *)buf + string; }


inline bool operator==(const wxUniChar& c, const wxString& s) { return s.IsSameAs(c); }
inline bool operator==(const wxUniCharRef& c, const wxString& s) { return s.IsSameAs(c); }
inline bool operator==(char c, const wxString& s) { return s.IsSameAs(c); }
inline bool operator==(wchar_t c, const wxString& s) { return s.IsSameAs(c); }
inline bool operator==(int c, const wxString& s) { return s.IsSameAs(c); }
inline bool operator==(const wxString& s, const wxUniChar& c) { return s.IsSameAs(c); }
inline bool operator==(const wxString& s, const wxUniCharRef& c) { return s.IsSameAs(c); }
inline bool operator==(const wxString& s, char c) { return s.IsSameAs(c); }
inline bool operator==(const wxString& s, wchar_t c) { return s.IsSameAs(c); }
inline bool operator!=(const wxUniChar& c, const wxString& s) { return !s.IsSameAs(c); }
inline bool operator!=(const wxUniCharRef& c, const wxString& s) { return !s.IsSameAs(c); }
inline bool operator!=(char c, const wxString& s) { return !s.IsSameAs(c); }
inline bool operator!=(wchar_t c, const wxString& s) { return !s.IsSameAs(c); }
inline bool operator!=(int c, const wxString& s) { return !s.IsSameAs(c); }
inline bool operator!=(const wxString& s, const wxUniChar& c) { return !s.IsSameAs(c); }
inline bool operator!=(const wxString& s, const wxUniCharRef& c) { return !s.IsSameAs(c); }
inline bool operator!=(const wxString& s, char c) { return !s.IsSameAs(c); }
inline bool operator!=(const wxString& s, wchar_t c) { return !s.IsSameAs(c); }



inline bool wxString::iterator::operator==(const const_iterator& i) const
    { return i == *this; }
inline bool wxString::iterator::operator!=(const const_iterator& i) const
    { return i != *this; }
inline bool wxString::iterator::operator<(const const_iterator& i) const
    { return i > *this; }
inline bool wxString::iterator::operator>(const const_iterator& i) const
    { return i < *this; }
inline bool wxString::iterator::operator<=(const const_iterator& i) const
    { return i >= *this; }
inline bool wxString::iterator::operator>=(const const_iterator& i) const
    { return i <= *this; }
# 4093 "/usr/local/include/wx-3.0/wx/string.h"
inline bool operator ==(const wchar_t * x, const wxCStrData& y) { return x == y.AsWChar(); } inline bool operator !=(const wchar_t * x, const wxCStrData& y) { return x != y.AsWChar(); } inline bool operator >=(const wchar_t * x, const wxCStrData& y) { return x >= y.AsWChar(); } inline bool operator <=(const wchar_t * x, const wxCStrData& y) { return x <= y.AsWChar(); } inline bool operator >(const wchar_t * x, const wxCStrData& y) { return x > y.AsWChar(); } inline bool operator <(const wchar_t * x, const wxCStrData& y) { return x < y.AsWChar(); } inline bool operator ==(const wxCStrData& y, const wchar_t * x) { return x == y.AsWChar(); } inline bool operator !=(const wxCStrData& y, const wchar_t * x) { return x != y.AsWChar(); } inline bool operator >=(const wxCStrData& y, const wchar_t * x) { return x <= y.AsWChar(); } inline bool operator <=(const wxCStrData& y, const wchar_t * x) { return x >= y.AsWChar(); } inline bool operator >(const wxCStrData& y, const wchar_t * x) { return x < y.AsWChar(); } inline bool operator <(const wxCStrData& y, const wchar_t * x) { return x > y.AsWChar(); }
inline bool operator ==(const char * x, const wxCStrData& y) { return x == y.AsChar(); } inline bool operator !=(const char * x, const wxCStrData& y) { return x != y.AsChar(); } inline bool operator >=(const char * x, const wxCStrData& y) { return x >= y.AsChar(); } inline bool operator <=(const char * x, const wxCStrData& y) { return x <= y.AsChar(); } inline bool operator >(const char * x, const wxCStrData& y) { return x > y.AsChar(); } inline bool operator <(const char * x, const wxCStrData& y) { return x < y.AsChar(); } inline bool operator ==(const wxCStrData& y, const char * x) { return x == y.AsChar(); } inline bool operator !=(const wxCStrData& y, const char * x) { return x != y.AsChar(); } inline bool operator >=(const wxCStrData& y, const char * x) { return x <= y.AsChar(); } inline bool operator <=(const wxCStrData& y, const char * x) { return x >= y.AsChar(); } inline bool operator >(const wxCStrData& y, const char * x) { return x < y.AsChar(); } inline bool operator <(const wxCStrData& y, const char * x) { return x > y.AsChar(); }
# 4128 "/usr/local/include/wx-3.0/wx/string.h"
inline wxCStrData::wxCStrData(char *buf)
    : m_str(new wxString(buf)), m_offset(0), m_owned(true) {}
inline wxCStrData::wxCStrData(wchar_t *buf)
    : m_str(new wxString(buf)), m_offset(0), m_owned(true) {}

inline wxCStrData::wxCStrData(const wxCStrData& data)
    : m_str(data.m_owned ? new wxString(*data.m_str) : data.m_str),
      m_offset(data.m_offset),
      m_owned(data.m_owned)
{
}

inline wxCStrData::~wxCStrData()
{
    if ( m_owned )
        delete const_cast<wxString*>(m_str);
}



inline const wchar_t* wxCStrData::AsWChar() const
{
    const wchar_t * const p =





        m_str->AsWChar(wxGet_wxConvLibc());
# 4166 "/usr/local/include/wx-3.0/wx/string.h"
    if ( !p )
    {







        return L"";
    }


    return p + m_offset;
}

inline const char* wxCStrData::AsChar() const
{





    const char * const p = m_str->mb_str();


    return p + m_offset;
}

inline wxString wxCStrData::AsString() const
{
    if ( m_offset == 0 )
        return *m_str;
    else
        return m_str->Mid(m_offset);
}

inline const wxStringCharType *wxCStrData::AsInternal() const
{



    return m_str->wx_str() + m_offset;

}

inline wxUniChar wxCStrData::operator*() const
{
    if ( m_str->empty() )
        return wxUniChar('\0');
    else
        return (*m_str)[m_offset];
}

inline wxUniChar wxCStrData::operator[](size_t n) const
{


    return (*m_str)[m_offset + n];
}







inline size_t operator-(const char *p, const wxCStrData& cs)
{
    return p - cs.AsChar();
}

inline size_t operator-(const wchar_t *p, const wxCStrData& cs)
{
    return p - cs.AsWChar();
}






inline wxCharBuffer::wxCharBuffer(const wxCStrData& cstr)
                    : wxCharTypeBufferBase(cstr.AsCharBuf())
{
}

inline wxWCharBuffer::wxWCharBuffer(const wxCStrData& cstr)
                    : wxCharTypeBufferBase(cstr.AsWCharBuf())
{
}
# 4312 "/usr/local/include/wx-3.0/wx/string.h"
template<bool (T)(const wxUniChar& c)>
    inline bool wxStringCheck(const wxString& val)
    {
        for ( wxString::const_iterator i = val.begin();
              i != val.end();
              ++i )
            if (T(*i) == 0)
                return false;
        return true;
    }
# 16 "/usr/local/include/wx-3.0/wx/memory.h" 2
# 1 "/usr/local/include/wx-3.0/wx/msgout.h" 1
# 32 "/usr/local/include/wx-3.0/wx/msgout.h"
class wxMessageOutputBase
{
public:
    virtual ~wxMessageOutputBase() { }



    inline void Printf(const wxFormatString& f1) { DoPrintfWchar(f1); } template<typename T1> void Printf(const wxFormatString& f1, T1 a1) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> void Printf(const wxFormatString& f1, T1 a1, T2 a2) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void Printf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); DoPrintfWchar(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }
# 55 "/usr/local/include/wx-3.0/wx/msgout.h"
    virtual void Output(const wxString& str) = 0;

protected:



    virtual void DoPrintfWchar(const wxChar *format, ...) = 0;




};
# 75 "/usr/local/include/wx-3.0/wx/msgout.h"
class wxMessageOutput : public wxMessageOutputBase
{
public:
    virtual ~wxMessageOutput() { }



    static wxMessageOutput* Get();


    static wxMessageOutput* Set(wxMessageOutput* msgout);

protected:

    virtual void DoPrintfWchar(const wxChar *format, ...);





private:
    static wxMessageOutput* ms_msgOut;
};
# 107 "/usr/local/include/wx-3.0/wx/msgout.h"
class wxMessageOutputStderr : public wxMessageOutput
{
public:
    wxMessageOutputStderr(FILE *fp = __stderrp) : m_fp(fp) { }

    virtual void Output(const wxString& str);

protected:


    wxString AppendLineFeedIfNeeded(const wxString& str);

    FILE *m_fp;
};






enum wxMessageOutputFlags
{
    wxMSGOUT_PREFER_STDERR = 0,
    wxMSGOUT_PREFER_MSGBOX = 1
};

class wxMessageOutputBest : public wxMessageOutputStderr
{
public:
    wxMessageOutputBest(wxMessageOutputFlags flags = wxMSGOUT_PREFER_STDERR)
        : m_flags(flags) { }

    virtual void Output(const wxString& str);

private:
    wxMessageOutputFlags m_flags;
};
# 165 "/usr/local/include/wx-3.0/wx/msgout.h"
class wxMessageOutputDebug : public wxMessageOutputStderr
{
public:
    wxMessageOutputDebug() { }

    virtual void Output(const wxString& str);
};





class wxMessageOutputLog : public wxMessageOutput
{
public:
    wxMessageOutputLog() { }

    virtual void Output(const wxString& str);
};
# 17 "/usr/local/include/wx-3.0/wx/memory.h" 2
# 20 "/usr/local/include/wx-3.0/wx/object.h" 2
# 56 "/usr/local/include/wx-3.0/wx/object.h"
# 1 "/usr/local/include/wx-3.0/wx/xti.h" 1
# 57 "/usr/local/include/wx-3.0/wx/object.h" 2
# 1 "/usr/local/include/wx-3.0/wx/rtti.h" 1
# 27 "/usr/local/include/wx-3.0/wx/rtti.h"
class wxObject;
class wxString;
class wxClassInfo;
class wxHashTable;
class wxObject;
class wxPluginLibrary;
class wxHashTable_Node;





typedef wxObject *(*wxObjectConstructorFn)(void);

class wxClassInfo
{
    friend class wxObject;
    friend wxObject *wxCreateDynamicObject(const wxString& name);
public:
    wxClassInfo( const wxChar *className,
                 const wxClassInfo *baseInfo1,
                 const wxClassInfo *baseInfo2,
                 int size,
                 wxObjectConstructorFn ctor )
        : m_className(className)
        , m_objectSize(size)
        , m_objectConstructor(ctor)
        , m_baseInfo1(baseInfo1)
        , m_baseInfo2(baseInfo2)
        , m_next(sm_first)
        {
            sm_first = this;
            Register();
        }

    ~wxClassInfo();

    wxObject *CreateObject() const
        { return m_objectConstructor ? (*m_objectConstructor)() : 0; }
    bool IsDynamic() const { return (__null != m_objectConstructor); }

    const wxChar *GetClassName() const { return m_className; }
    const wxChar *GetBaseClassName1() const
        { return m_baseInfo1 ? m_baseInfo1->GetClassName() : __null; }
    const wxChar *GetBaseClassName2() const
        { return m_baseInfo2 ? m_baseInfo2->GetClassName() : __null; }
    const wxClassInfo *GetBaseClass1() const { return m_baseInfo1; }
    const wxClassInfo *GetBaseClass2() const { return m_baseInfo2; }
    int GetSize() const { return m_objectSize; }

    wxObjectConstructorFn GetConstructor() const
        { return m_objectConstructor; }
    static const wxClassInfo *GetFirst() { return sm_first; }
    const wxClassInfo *GetNext() const { return m_next; }
    static wxClassInfo *FindClass(const wxString& className);




    bool IsKindOf(const wxClassInfo *info) const
    {
        return info != 0 &&
               ( info == this ||
                 ( m_baseInfo1 && m_baseInfo1->IsKindOf(info) ) ||
                 ( m_baseInfo2 && m_baseInfo2->IsKindOf(info) ) );
    }

    class const_iterator { typedef wxHashTable_Node Node; public: typedef const wxClassInfo* value_type; typedef const value_type& const_reference; typedef const_iterator itor; typedef value_type* ptr_type; Node* m_node; wxHashTable* m_table; public: typedef const_reference reference_type; typedef ptr_type pointer_type; const_iterator(Node* node, wxHashTable* table) : m_node(node), m_table(table) { } const_iterator() : m_node(__null), m_table(__null) { } value_type operator*() const; itor& operator++(); const itor operator++(int); bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; static const_iterator begin_classinfo(); static const_iterator end_classinfo();

private:
    const wxChar *m_className;
    int m_objectSize;
    wxObjectConstructorFn m_objectConstructor;



    const wxClassInfo *m_baseInfo1;
    const wxClassInfo *m_baseInfo2;




    static wxClassInfo *sm_first;
    wxClassInfo *m_next;

    static wxHashTable *sm_classTable;

protected:

    void Register();
    void Unregister();

    private: wxClassInfo(const wxClassInfo&); wxClassInfo& operator=(const wxClassInfo&);
};

                 wxObject *wxCreateDynamicObject(const wxString& name);
# 199 "/usr/local/include/wx-3.0/wx/rtti.h"
# 1 "/usr/local/include/wx-3.0/wx/flags.h" 1
# 20 "/usr/local/include/wx-3.0/wx/flags.h"
template <class T> class wxBitset
{
    friend class wxEnumData ;
public:

    wxBitset() { m_data = 0; }



    wxBitset(unsigned long val) { m_data = val ; }


    wxBitset(const wxBitset &src) { m_data = src.m_data; }


    wxBitset(const T el) { m_data |= 1 << el; }


    unsigned long to_ulong() const { return m_data ; }


    wxBitset &operator =(const wxBitset &rhs)
    {
        m_data = rhs.m_data;
        return *this;
    }



    wxBitset &operator |=(const wxBitset &rhs)
    {
        m_data |= rhs.m_data;
        return *this;
    }



    wxBitset &operator ^=(const wxBitset &rhs)
    {
        m_data ^= rhs.m_data;
        return *this;
    }



    wxBitset &operator &=(const wxBitset &rhs)
    {
        m_data &= rhs.m_data;
        return *this;
    }



    wxBitset operator |(const wxBitset &bitset2) const
    {
        wxBitset<T> s;
        s.m_data = m_data | bitset2.m_data;
        return s;
    }



    wxBitset operator ^(const wxBitset &bitset2) const
    {
        wxBitset<T> s;
        s.m_data = m_data ^ bitset2.m_data;
        return s;
    }



    wxBitset operator &(const wxBitset &bitset2) const
    {
        wxBitset<T> s;
        s.m_data = m_data & bitset2.m_data;
        return s;
    }


    wxBitset& set(const T el)
    {
        m_data |= 1 << el;
        return *this;
    }


    wxBitset& reset(const T el)
    {
        m_data &= ~(1 << el);
        return *this;
    }


    wxBitset& reset()
    {
        m_data = 0;
        return *this;
    }


    bool test(const T el) const
    {
        return (m_data & (1 << el)) ? true : false;
    }


    bool none() const
    {
        return m_data == 0;
    }


    bool any() const
    {
        return m_data != 0;
    }


    bool operator ==(const wxBitset &rhs) const
    {
        return m_data == rhs.m_data;
    }


    bool operator !=(const wxBitset &rhs) const
    {
        return !operator==(rhs);
    }

    bool operator[] (const T el) const { return test(el) ; }

private :
    unsigned long m_data;
};
# 200 "/usr/local/include/wx-3.0/wx/rtti.h" 2
# 58 "/usr/local/include/wx-3.0/wx/object.h" 2
# 157 "/usr/local/include/wx-3.0/wx/object.h"
template <class T>
inline T *wxCheckCast(const void *ptr, T * = __null)
{
    do { if ( wxTheAssertHandler && !(((T *) wxCheckDynamicCast( const_cast<wxObject *>(static_cast<const wxObject *>( const_cast<T *>(static_cast<const T *>(ptr)))), &T::ms_classInfo))) && (wxOnAssert("/usr/local/include/wx-3.0/wx/object.h", 160, __FUNCTION__, "wxDynamicCast(ptr, T)", "wxStaticCast() used incorrectly"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
    return const_cast<T *>(static_cast<const T *>(ptr));
}
# 241 "/usr/local/include/wx-3.0/wx/object.h"
class wxRefCounter
{
public:
    wxRefCounter() { m_count = 1; }

    int GetRefCount() const { return m_count; }

    void IncRef() { m_count++; }
    void DecRef();

protected:


    virtual ~wxRefCounter() { }

private:

    int m_count;





    private: wxRefCounter(const wxRefCounter&); wxRefCounter& operator=(const wxRefCounter&);
};





typedef wxRefCounter wxObjectRefData;






template <class T>
class wxObjectDataPtr
{
public:
    typedef T element_type;

               wxObjectDataPtr(T *ptr = __null) : m_ptr(ptr) {}


    wxObjectDataPtr(const wxObjectDataPtr<T> &tocopy)
        : m_ptr(tocopy.m_ptr)
    {
        if (m_ptr)
            m_ptr->IncRef();
    }

    ~wxObjectDataPtr()
    {
        if (m_ptr)
            m_ptr->DecRef();
    }

    T *get() const { return m_ptr; }



    typedef T *(wxObjectDataPtr<T>::*unspecified_bool_type)() const;
    operator unspecified_bool_type() const
    {
        return m_ptr ? &wxObjectDataPtr<T>::get : __null;
    }

    T& operator*() const
    {
        do { if ( wxTheAssertHandler && !(m_ptr != __null) && (wxOnAssert("/usr/local/include/wx-3.0/wx/object.h", 312, __FUNCTION__, "m_ptr != __null", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
        return *(m_ptr);
    }

    T *operator->() const
    {
        do { if ( wxTheAssertHandler && !(m_ptr != __null) && (wxOnAssert("/usr/local/include/wx-3.0/wx/object.h", 318, __FUNCTION__, "m_ptr != __null", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
        return get();
    }

    void reset(T *ptr)
    {
        if (m_ptr)
            m_ptr->DecRef();
        m_ptr = ptr;
    }

    wxObjectDataPtr& operator=(const wxObjectDataPtr &tocopy)
    {
        if (m_ptr)
            m_ptr->DecRef();
        m_ptr = tocopy.m_ptr;
        if (m_ptr)
            m_ptr->IncRef();
        return *this;
    }

    wxObjectDataPtr& operator=(T *ptr)
    {
        if (m_ptr)
            m_ptr->DecRef();
        m_ptr = ptr;
        return *this;
    }

private:
    T *m_ptr;
};





class wxObject
{
    public: static wxClassInfo ms_classInfo; virtual wxClassInfo *GetClassInfo() const;

public:
    wxObject() { m_refData = __null; }
    virtual ~wxObject() { UnRef(); }

    wxObject(const wxObject& other)
    {
         m_refData = other.m_refData;
         if (m_refData)
             m_refData->IncRef();
    }

    wxObject& operator=(const wxObject& other)
    {
        if ( this != &other )
        {
            Ref(other);
        }
        return *this;
    }

    bool IsKindOf(const wxClassInfo *info) const;
# 415 "/usr/local/include/wx-3.0/wx/object.h"
    wxObjectRefData *GetRefData() const { return m_refData; }
    void SetRefData(wxObjectRefData *data) { m_refData = data; }


    void Ref(const wxObject& clone);


    void UnRef();


    void UnShare() { AllocExclusive(); }


    bool IsSameAs(const wxObject& o) const { return m_refData == o.m_refData; }

protected:



    void AllocExclusive();





    virtual wxObjectRefData *CreateRefData() const;


    virtual wxObjectRefData *CloneRefData(const wxObjectRefData *data) const;

    wxObjectRefData *m_refData;
};

inline wxObject *wxCheckDynamicCast(wxObject *obj, wxClassInfo *classInfo)
{
    return obj && obj->GetClassInfo()->IsKindOf(classInfo) ? obj : __null;
}


# 1 "/usr/local/include/wx-3.0/wx/xti2.h" 1
# 454 "/usr/local/include/wx-3.0/wx/object.h" 2
# 16 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 1 "/usr/local/include/wx-3.0/wx/dynarray.h" 1
# 68 "/usr/local/include/wx-3.0/wx/dynarray.h"
extern "C"
{
typedef int ( *CMPFUNC)(const void* pItem1, const void* pItem2);
}
# 837 "/usr/local/include/wx-3.0/wx/dynarray.h"
typedef const void * _wxArraywxBaseArrayPtrVoid; class wxBaseArrayPtrVoid { typedef CMPFUNC SCMPFUNC; public: wxBaseArrayPtrVoid(); wxBaseArrayPtrVoid(const wxBaseArrayPtrVoid& array); wxBaseArrayPtrVoid& operator=(const wxBaseArrayPtrVoid& src); ~wxBaseArrayPtrVoid(); void Empty() { m_nCount = 0; } void Clear(); void Alloc(size_t n) { if ( n > m_nSize ) Realloc(n); } void Shrink(); size_t GetCount() const { return m_nCount; } void SetCount(size_t n, _wxArraywxBaseArrayPtrVoid defval = _wxArraywxBaseArrayPtrVoid()); bool IsEmpty() const { return m_nCount == 0; } size_t Count() const { return m_nCount; } typedef _wxArraywxBaseArrayPtrVoid base_type; protected: _wxArraywxBaseArrayPtrVoid& Item(size_t uiIndex) const { do { if ( wxTheAssertHandler && !(uiIndex < m_nCount) && (wxOnAssert("/usr/local/include/wx-3.0/wx/dynarray.h", 838, __FUNCTION__, "uiIndex < m_nCount", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return m_pItems[uiIndex]; } _wxArraywxBaseArrayPtrVoid& operator[](size_t uiIndex) const { return Item(uiIndex); } int Index(_wxArraywxBaseArrayPtrVoid lItem, bool bFromEnd = false) const; int Index(_wxArraywxBaseArrayPtrVoid lItem, CMPFUNC fnCompare) const; size_t IndexForInsert(_wxArraywxBaseArrayPtrVoid lItem, CMPFUNC fnCompare) const; void Add(_wxArraywxBaseArrayPtrVoid lItem, size_t nInsert = 1); size_t Add(_wxArraywxBaseArrayPtrVoid lItem, CMPFUNC fnCompare); void Insert(_wxArraywxBaseArrayPtrVoid lItem, size_t uiIndex, size_t nInsert = 1); void Remove(_wxArraywxBaseArrayPtrVoid lItem); void RemoveAt(size_t uiIndex, size_t nRemove = 1); void Sort(CMPFUNC fnCompare); typedef _wxArraywxBaseArrayPtrVoid value_type; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef ptrdiff_t difference_type; typedef size_t size_type; void assign(const_iterator first, const_iterator last); void assign(size_type n, const_reference v); size_type capacity() const { return m_nSize; } iterator erase(iterator first, iterator last) { size_type idx = first - begin(); RemoveAt(idx, last - first); return begin() + idx; } iterator erase(iterator it) { return erase(it, it + 1); } void insert(iterator it, size_type n, const value_type& v) { Insert(v, it - begin(), n); } iterator insert(iterator it, const value_type& v = value_type()) { size_type idx = it - begin(); Insert(v, idx); return begin() + idx; } void insert(iterator it, const_iterator first, const_iterator last); void pop_back() { RemoveAt(size() - 1); } void push_back(const value_type& v) { Add(v); } void reserve(size_type n) { Alloc(n); } void resize(size_type count, value_type defval = value_type()) { if ( count < m_nCount ) m_nCount = count; else SetCount(count, defval); } iterator begin() { return m_pItems; } iterator end() { return m_pItems + m_nCount; } const_iterator begin() const { return m_pItems; } const_iterator end() const { return m_pItems + m_nCount; } void swap(wxBaseArrayPtrVoid& other) { wxSwap(m_nSize, other.m_nSize); wxSwap(m_nCount, other.m_nCount); wxSwap(m_pItems, other.m_pItems); } public: void clear() { Clear(); } bool empty() const { return IsEmpty(); } size_type max_size() const { return 2147483647; } size_type size() const { return GetCount(); } private: void Grow(size_t nIncrement = 0); bool Realloc(size_t nSize); size_t m_nSize, m_nCount; _wxArraywxBaseArrayPtrVoid *m_pItems; };

typedef char _wxArraywxBaseArrayChar; class wxBaseArrayChar { typedef CMPFUNC SCMPFUNC; public: wxBaseArrayChar(); wxBaseArrayChar(const wxBaseArrayChar& array); wxBaseArrayChar& operator=(const wxBaseArrayChar& src); ~wxBaseArrayChar(); void Empty() { m_nCount = 0; } void Clear(); void Alloc(size_t n) { if ( n > m_nSize ) Realloc(n); } void Shrink(); size_t GetCount() const { return m_nCount; } void SetCount(size_t n, _wxArraywxBaseArrayChar defval = _wxArraywxBaseArrayChar()); bool IsEmpty() const { return m_nCount == 0; } size_t Count() const { return m_nCount; } typedef _wxArraywxBaseArrayChar base_type; protected: _wxArraywxBaseArrayChar& Item(size_t uiIndex) const { do { if ( wxTheAssertHandler && !(uiIndex < m_nCount) && (wxOnAssert("/usr/local/include/wx-3.0/wx/dynarray.h", 839, __FUNCTION__, "uiIndex < m_nCount", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return m_pItems[uiIndex]; } _wxArraywxBaseArrayChar& operator[](size_t uiIndex) const { return Item(uiIndex); } int Index(_wxArraywxBaseArrayChar lItem, bool bFromEnd = false) const; int Index(_wxArraywxBaseArrayChar lItem, CMPFUNC fnCompare) const; size_t IndexForInsert(_wxArraywxBaseArrayChar lItem, CMPFUNC fnCompare) const; void Add(_wxArraywxBaseArrayChar lItem, size_t nInsert = 1); size_t Add(_wxArraywxBaseArrayChar lItem, CMPFUNC fnCompare); void Insert(_wxArraywxBaseArrayChar lItem, size_t uiIndex, size_t nInsert = 1); void Remove(_wxArraywxBaseArrayChar lItem); void RemoveAt(size_t uiIndex, size_t nRemove = 1); void Sort(CMPFUNC fnCompare); typedef _wxArraywxBaseArrayChar value_type; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef ptrdiff_t difference_type; typedef size_t size_type; void assign(const_iterator first, const_iterator last); void assign(size_type n, const_reference v); size_type capacity() const { return m_nSize; } iterator erase(iterator first, iterator last) { size_type idx = first - begin(); RemoveAt(idx, last - first); return begin() + idx; } iterator erase(iterator it) { return erase(it, it + 1); } void insert(iterator it, size_type n, const value_type& v) { Insert(v, it - begin(), n); } iterator insert(iterator it, const value_type& v = value_type()) { size_type idx = it - begin(); Insert(v, idx); return begin() + idx; } void insert(iterator it, const_iterator first, const_iterator last); void pop_back() { RemoveAt(size() - 1); } void push_back(const value_type& v) { Add(v); } void reserve(size_type n) { Alloc(n); } void resize(size_type count, value_type defval = value_type()) { if ( count < m_nCount ) m_nCount = count; else SetCount(count, defval); } iterator begin() { return m_pItems; } iterator end() { return m_pItems + m_nCount; } const_iterator begin() const { return m_pItems; } const_iterator end() const { return m_pItems + m_nCount; } void swap(wxBaseArrayChar& other) { wxSwap(m_nSize, other.m_nSize); wxSwap(m_nCount, other.m_nCount); wxSwap(m_pItems, other.m_pItems); } public: void clear() { Clear(); } bool empty() const { return IsEmpty(); } size_type max_size() const { return 2147483647; } size_type size() const { return GetCount(); } private: void Grow(size_t nIncrement = 0); bool Realloc(size_t nSize); size_t m_nSize, m_nCount; _wxArraywxBaseArrayChar *m_pItems; };
typedef short _wxArraywxBaseArrayShort; class wxBaseArrayShort { typedef CMPFUNC SCMPFUNC; public: wxBaseArrayShort(); wxBaseArrayShort(const wxBaseArrayShort& array); wxBaseArrayShort& operator=(const wxBaseArrayShort& src); ~wxBaseArrayShort(); void Empty() { m_nCount = 0; } void Clear(); void Alloc(size_t n) { if ( n > m_nSize ) Realloc(n); } void Shrink(); size_t GetCount() const { return m_nCount; } void SetCount(size_t n, _wxArraywxBaseArrayShort defval = _wxArraywxBaseArrayShort()); bool IsEmpty() const { return m_nCount == 0; } size_t Count() const { return m_nCount; } typedef _wxArraywxBaseArrayShort base_type; protected: _wxArraywxBaseArrayShort& Item(size_t uiIndex) const { do { if ( wxTheAssertHandler && !(uiIndex < m_nCount) && (wxOnAssert("/usr/local/include/wx-3.0/wx/dynarray.h", 840, __FUNCTION__, "uiIndex < m_nCount", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return m_pItems[uiIndex]; } _wxArraywxBaseArrayShort& operator[](size_t uiIndex) const { return Item(uiIndex); } int Index(_wxArraywxBaseArrayShort lItem, bool bFromEnd = false) const; int Index(_wxArraywxBaseArrayShort lItem, CMPFUNC fnCompare) const; size_t IndexForInsert(_wxArraywxBaseArrayShort lItem, CMPFUNC fnCompare) const; void Add(_wxArraywxBaseArrayShort lItem, size_t nInsert = 1); size_t Add(_wxArraywxBaseArrayShort lItem, CMPFUNC fnCompare); void Insert(_wxArraywxBaseArrayShort lItem, size_t uiIndex, size_t nInsert = 1); void Remove(_wxArraywxBaseArrayShort lItem); void RemoveAt(size_t uiIndex, size_t nRemove = 1); void Sort(CMPFUNC fnCompare); typedef _wxArraywxBaseArrayShort value_type; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef ptrdiff_t difference_type; typedef size_t size_type; void assign(const_iterator first, const_iterator last); void assign(size_type n, const_reference v); size_type capacity() const { return m_nSize; } iterator erase(iterator first, iterator last) { size_type idx = first - begin(); RemoveAt(idx, last - first); return begin() + idx; } iterator erase(iterator it) { return erase(it, it + 1); } void insert(iterator it, size_type n, const value_type& v) { Insert(v, it - begin(), n); } iterator insert(iterator it, const value_type& v = value_type()) { size_type idx = it - begin(); Insert(v, idx); return begin() + idx; } void insert(iterator it, const_iterator first, const_iterator last); void pop_back() { RemoveAt(size() - 1); } void push_back(const value_type& v) { Add(v); } void reserve(size_type n) { Alloc(n); } void resize(size_type count, value_type defval = value_type()) { if ( count < m_nCount ) m_nCount = count; else SetCount(count, defval); } iterator begin() { return m_pItems; } iterator end() { return m_pItems + m_nCount; } const_iterator begin() const { return m_pItems; } const_iterator end() const { return m_pItems + m_nCount; } void swap(wxBaseArrayShort& other) { wxSwap(m_nSize, other.m_nSize); wxSwap(m_nCount, other.m_nCount); wxSwap(m_pItems, other.m_pItems); } public: void clear() { Clear(); } bool empty() const { return IsEmpty(); } size_type max_size() const { return 2147483647; } size_type size() const { return GetCount(); } private: void Grow(size_t nIncrement = 0); bool Realloc(size_t nSize); size_t m_nSize, m_nCount; _wxArraywxBaseArrayShort *m_pItems; };
typedef int _wxArraywxBaseArrayInt; class wxBaseArrayInt { typedef CMPFUNC SCMPFUNC; public: wxBaseArrayInt(); wxBaseArrayInt(const wxBaseArrayInt& array); wxBaseArrayInt& operator=(const wxBaseArrayInt& src); ~wxBaseArrayInt(); void Empty() { m_nCount = 0; } void Clear(); void Alloc(size_t n) { if ( n > m_nSize ) Realloc(n); } void Shrink(); size_t GetCount() const { return m_nCount; } void SetCount(size_t n, _wxArraywxBaseArrayInt defval = _wxArraywxBaseArrayInt()); bool IsEmpty() const { return m_nCount == 0; } size_t Count() const { return m_nCount; } typedef _wxArraywxBaseArrayInt base_type; protected: _wxArraywxBaseArrayInt& Item(size_t uiIndex) const { do { if ( wxTheAssertHandler && !(uiIndex < m_nCount) && (wxOnAssert("/usr/local/include/wx-3.0/wx/dynarray.h", 841, __FUNCTION__, "uiIndex < m_nCount", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return m_pItems[uiIndex]; } _wxArraywxBaseArrayInt& operator[](size_t uiIndex) const { return Item(uiIndex); } int Index(_wxArraywxBaseArrayInt lItem, bool bFromEnd = false) const; int Index(_wxArraywxBaseArrayInt lItem, CMPFUNC fnCompare) const; size_t IndexForInsert(_wxArraywxBaseArrayInt lItem, CMPFUNC fnCompare) const; void Add(_wxArraywxBaseArrayInt lItem, size_t nInsert = 1); size_t Add(_wxArraywxBaseArrayInt lItem, CMPFUNC fnCompare); void Insert(_wxArraywxBaseArrayInt lItem, size_t uiIndex, size_t nInsert = 1); void Remove(_wxArraywxBaseArrayInt lItem); void RemoveAt(size_t uiIndex, size_t nRemove = 1); void Sort(CMPFUNC fnCompare); typedef _wxArraywxBaseArrayInt value_type; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef ptrdiff_t difference_type; typedef size_t size_type; void assign(const_iterator first, const_iterator last); void assign(size_type n, const_reference v); size_type capacity() const { return m_nSize; } iterator erase(iterator first, iterator last) { size_type idx = first - begin(); RemoveAt(idx, last - first); return begin() + idx; } iterator erase(iterator it) { return erase(it, it + 1); } void insert(iterator it, size_type n, const value_type& v) { Insert(v, it - begin(), n); } iterator insert(iterator it, const value_type& v = value_type()) { size_type idx = it - begin(); Insert(v, idx); return begin() + idx; } void insert(iterator it, const_iterator first, const_iterator last); void pop_back() { RemoveAt(size() - 1); } void push_back(const value_type& v) { Add(v); } void reserve(size_type n) { Alloc(n); } void resize(size_type count, value_type defval = value_type()) { if ( count < m_nCount ) m_nCount = count; else SetCount(count, defval); } iterator begin() { return m_pItems; } iterator end() { return m_pItems + m_nCount; } const_iterator begin() const { return m_pItems; } const_iterator end() const { return m_pItems + m_nCount; } void swap(wxBaseArrayInt& other) { wxSwap(m_nSize, other.m_nSize); wxSwap(m_nCount, other.m_nCount); wxSwap(m_pItems, other.m_pItems); } public: void clear() { Clear(); } bool empty() const { return IsEmpty(); } size_type max_size() const { return 2147483647; } size_type size() const { return GetCount(); } private: void Grow(size_t nIncrement = 0); bool Realloc(size_t nSize); size_t m_nSize, m_nCount; _wxArraywxBaseArrayInt *m_pItems; };
typedef long _wxArraywxBaseArrayLong; class wxBaseArrayLong { typedef CMPFUNC SCMPFUNC; public: wxBaseArrayLong(); wxBaseArrayLong(const wxBaseArrayLong& array); wxBaseArrayLong& operator=(const wxBaseArrayLong& src); ~wxBaseArrayLong(); void Empty() { m_nCount = 0; } void Clear(); void Alloc(size_t n) { if ( n > m_nSize ) Realloc(n); } void Shrink(); size_t GetCount() const { return m_nCount; } void SetCount(size_t n, _wxArraywxBaseArrayLong defval = _wxArraywxBaseArrayLong()); bool IsEmpty() const { return m_nCount == 0; } size_t Count() const { return m_nCount; } typedef _wxArraywxBaseArrayLong base_type; protected: _wxArraywxBaseArrayLong& Item(size_t uiIndex) const { do { if ( wxTheAssertHandler && !(uiIndex < m_nCount) && (wxOnAssert("/usr/local/include/wx-3.0/wx/dynarray.h", 842, __FUNCTION__, "uiIndex < m_nCount", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return m_pItems[uiIndex]; } _wxArraywxBaseArrayLong& operator[](size_t uiIndex) const { return Item(uiIndex); } int Index(_wxArraywxBaseArrayLong lItem, bool bFromEnd = false) const; int Index(_wxArraywxBaseArrayLong lItem, CMPFUNC fnCompare) const; size_t IndexForInsert(_wxArraywxBaseArrayLong lItem, CMPFUNC fnCompare) const; void Add(_wxArraywxBaseArrayLong lItem, size_t nInsert = 1); size_t Add(_wxArraywxBaseArrayLong lItem, CMPFUNC fnCompare); void Insert(_wxArraywxBaseArrayLong lItem, size_t uiIndex, size_t nInsert = 1); void Remove(_wxArraywxBaseArrayLong lItem); void RemoveAt(size_t uiIndex, size_t nRemove = 1); void Sort(CMPFUNC fnCompare); typedef _wxArraywxBaseArrayLong value_type; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef ptrdiff_t difference_type; typedef size_t size_type; void assign(const_iterator first, const_iterator last); void assign(size_type n, const_reference v); size_type capacity() const { return m_nSize; } iterator erase(iterator first, iterator last) { size_type idx = first - begin(); RemoveAt(idx, last - first); return begin() + idx; } iterator erase(iterator it) { return erase(it, it + 1); } void insert(iterator it, size_type n, const value_type& v) { Insert(v, it - begin(), n); } iterator insert(iterator it, const value_type& v = value_type()) { size_type idx = it - begin(); Insert(v, idx); return begin() + idx; } void insert(iterator it, const_iterator first, const_iterator last); void pop_back() { RemoveAt(size() - 1); } void push_back(const value_type& v) { Add(v); } void reserve(size_type n) { Alloc(n); } void resize(size_type count, value_type defval = value_type()) { if ( count < m_nCount ) m_nCount = count; else SetCount(count, defval); } iterator begin() { return m_pItems; } iterator end() { return m_pItems + m_nCount; } const_iterator begin() const { return m_pItems; } const_iterator end() const { return m_pItems + m_nCount; } void swap(wxBaseArrayLong& other) { wxSwap(m_nSize, other.m_nSize); wxSwap(m_nCount, other.m_nCount); wxSwap(m_pItems, other.m_pItems); } public: void clear() { Clear(); } bool empty() const { return IsEmpty(); } size_type max_size() const { return 2147483647; } size_type size() const { return GetCount(); } private: void Grow(size_t nIncrement = 0); bool Realloc(size_t nSize); size_t m_nSize, m_nCount; _wxArraywxBaseArrayLong *m_pItems; };
typedef size_t _wxArraywxBaseArraySizeT; class wxBaseArraySizeT { typedef CMPFUNC SCMPFUNC; public: wxBaseArraySizeT(); wxBaseArraySizeT(const wxBaseArraySizeT& array); wxBaseArraySizeT& operator=(const wxBaseArraySizeT& src); ~wxBaseArraySizeT(); void Empty() { m_nCount = 0; } void Clear(); void Alloc(size_t n) { if ( n > m_nSize ) Realloc(n); } void Shrink(); size_t GetCount() const { return m_nCount; } void SetCount(size_t n, _wxArraywxBaseArraySizeT defval = _wxArraywxBaseArraySizeT()); bool IsEmpty() const { return m_nCount == 0; } size_t Count() const { return m_nCount; } typedef _wxArraywxBaseArraySizeT base_type; protected: _wxArraywxBaseArraySizeT& Item(size_t uiIndex) const { do { if ( wxTheAssertHandler && !(uiIndex < m_nCount) && (wxOnAssert("/usr/local/include/wx-3.0/wx/dynarray.h", 843, __FUNCTION__, "uiIndex < m_nCount", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return m_pItems[uiIndex]; } _wxArraywxBaseArraySizeT& operator[](size_t uiIndex) const { return Item(uiIndex); } int Index(_wxArraywxBaseArraySizeT lItem, bool bFromEnd = false) const; int Index(_wxArraywxBaseArraySizeT lItem, CMPFUNC fnCompare) const; size_t IndexForInsert(_wxArraywxBaseArraySizeT lItem, CMPFUNC fnCompare) const; void Add(_wxArraywxBaseArraySizeT lItem, size_t nInsert = 1); size_t Add(_wxArraywxBaseArraySizeT lItem, CMPFUNC fnCompare); void Insert(_wxArraywxBaseArraySizeT lItem, size_t uiIndex, size_t nInsert = 1); void Remove(_wxArraywxBaseArraySizeT lItem); void RemoveAt(size_t uiIndex, size_t nRemove = 1); void Sort(CMPFUNC fnCompare); typedef _wxArraywxBaseArraySizeT value_type; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef ptrdiff_t difference_type; typedef size_t size_type; void assign(const_iterator first, const_iterator last); void assign(size_type n, const_reference v); size_type capacity() const { return m_nSize; } iterator erase(iterator first, iterator last) { size_type idx = first - begin(); RemoveAt(idx, last - first); return begin() + idx; } iterator erase(iterator it) { return erase(it, it + 1); } void insert(iterator it, size_type n, const value_type& v) { Insert(v, it - begin(), n); } iterator insert(iterator it, const value_type& v = value_type()) { size_type idx = it - begin(); Insert(v, idx); return begin() + idx; } void insert(iterator it, const_iterator first, const_iterator last); void pop_back() { RemoveAt(size() - 1); } void push_back(const value_type& v) { Add(v); } void reserve(size_type n) { Alloc(n); } void resize(size_type count, value_type defval = value_type()) { if ( count < m_nCount ) m_nCount = count; else SetCount(count, defval); } iterator begin() { return m_pItems; } iterator end() { return m_pItems + m_nCount; } const_iterator begin() const { return m_pItems; } const_iterator end() const { return m_pItems + m_nCount; } void swap(wxBaseArraySizeT& other) { wxSwap(m_nSize, other.m_nSize); wxSwap(m_nCount, other.m_nCount); wxSwap(m_pItems, other.m_pItems); } public: void clear() { Clear(); } bool empty() const { return IsEmpty(); } size_type max_size() const { return 2147483647; } size_type size() const { return GetCount(); } private: void Grow(size_t nIncrement = 0); bool Realloc(size_t nSize); size_t m_nSize, m_nCount; _wxArraywxBaseArraySizeT *m_pItems; };
typedef double _wxArraywxBaseArrayDouble; class wxBaseArrayDouble { typedef CMPFUNC SCMPFUNC; public: wxBaseArrayDouble(); wxBaseArrayDouble(const wxBaseArrayDouble& array); wxBaseArrayDouble& operator=(const wxBaseArrayDouble& src); ~wxBaseArrayDouble(); void Empty() { m_nCount = 0; } void Clear(); void Alloc(size_t n) { if ( n > m_nSize ) Realloc(n); } void Shrink(); size_t GetCount() const { return m_nCount; } void SetCount(size_t n, _wxArraywxBaseArrayDouble defval = _wxArraywxBaseArrayDouble()); bool IsEmpty() const { return m_nCount == 0; } size_t Count() const { return m_nCount; } typedef _wxArraywxBaseArrayDouble base_type; protected: _wxArraywxBaseArrayDouble& Item(size_t uiIndex) const { do { if ( wxTheAssertHandler && !(uiIndex < m_nCount) && (wxOnAssert("/usr/local/include/wx-3.0/wx/dynarray.h", 844, __FUNCTION__, "uiIndex < m_nCount", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return m_pItems[uiIndex]; } _wxArraywxBaseArrayDouble& operator[](size_t uiIndex) const { return Item(uiIndex); } int Index(_wxArraywxBaseArrayDouble lItem, bool bFromEnd = false) const; int Index(_wxArraywxBaseArrayDouble lItem, CMPFUNC fnCompare) const; size_t IndexForInsert(_wxArraywxBaseArrayDouble lItem, CMPFUNC fnCompare) const; void Add(_wxArraywxBaseArrayDouble lItem, size_t nInsert = 1); size_t Add(_wxArraywxBaseArrayDouble lItem, CMPFUNC fnCompare); void Insert(_wxArraywxBaseArrayDouble lItem, size_t uiIndex, size_t nInsert = 1); void Remove(_wxArraywxBaseArrayDouble lItem); void RemoveAt(size_t uiIndex, size_t nRemove = 1); void Sort(CMPFUNC fnCompare); typedef _wxArraywxBaseArrayDouble value_type; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef ptrdiff_t difference_type; typedef size_t size_type; void assign(const_iterator first, const_iterator last); void assign(size_type n, const_reference v); size_type capacity() const { return m_nSize; } iterator erase(iterator first, iterator last) { size_type idx = first - begin(); RemoveAt(idx, last - first); return begin() + idx; } iterator erase(iterator it) { return erase(it, it + 1); } void insert(iterator it, size_type n, const value_type& v) { Insert(v, it - begin(), n); } iterator insert(iterator it, const value_type& v = value_type()) { size_type idx = it - begin(); Insert(v, idx); return begin() + idx; } void insert(iterator it, const_iterator first, const_iterator last); void pop_back() { RemoveAt(size() - 1); } void push_back(const value_type& v) { Add(v); } void reserve(size_type n) { Alloc(n); } void resize(size_type count, value_type defval = value_type()) { if ( count < m_nCount ) m_nCount = count; else SetCount(count, defval); } iterator begin() { return m_pItems; } iterator end() { return m_pItems + m_nCount; } const_iterator begin() const { return m_pItems; } const_iterator end() const { return m_pItems + m_nCount; } void swap(wxBaseArrayDouble& other) { wxSwap(m_nSize, other.m_nSize); wxSwap(m_nCount, other.m_nCount); wxSwap(m_pItems, other.m_pItems); } public: void clear() { Clear(); } bool empty() const { return IsEmpty(); } size_type max_size() const { return 2147483647; } size_type size() const { return GetCount(); } private: void Grow(size_t nIncrement = 0); bool Realloc(size_t nSize); size_t m_nSize, m_nCount; _wxArraywxBaseArrayDouble *m_pItems; };
# 1021 "/usr/local/include/wx-3.0/wx/dynarray.h"
typedef short _wxArraywxArrayShort; struct wxAssert_wxArrayShort { unsigned int TypeTooBigToBeStoredInwxBaseArrayShort: sizeof(_wxArraywxArrayShort) <= sizeof(wxBaseArrayShort::base_type); }; typedef int ( *CMPFUNC_wxArraywxArrayShort)(_wxArraywxArrayShort *pItem1, _wxArraywxArrayShort *pItem2); class wxArrayShort : public wxBaseArrayShort { public: wxArrayShort() { } ~wxArrayShort() { } _wxArraywxArrayShort& operator[](size_t uiIndex) const { return (_wxArraywxArrayShort&)(wxBaseArrayShort::operator[](uiIndex)); } _wxArraywxArrayShort& Item(size_t uiIndex) const { return (_wxArraywxArrayShort&)(wxBaseArrayShort::operator[](uiIndex)); } _wxArraywxArrayShort& Last() const { return (_wxArraywxArrayShort&)(wxBaseArrayShort::operator[](GetCount() - 1)); } int Index(_wxArraywxArrayShort lItem, bool bFromEnd = false) const { return wxBaseArrayShort::Index((base_type)lItem, bFromEnd); } void Add(_wxArraywxArrayShort lItem, size_t nInsert = 1) { wxBaseArrayShort::Add((base_type)lItem, nInsert); } void Insert(_wxArraywxArrayShort lItem, size_t uiIndex, size_t nInsert = 1) { wxBaseArrayShort::Insert((base_type)lItem, uiIndex, nInsert) ; } void RemoveAt(size_t uiIndex, size_t nRemove = 1) { wxBaseArrayShort::RemoveAt(uiIndex, nRemove); } void Remove(_wxArraywxArrayShort lItem) { int iIndex = Index(lItem); if ( iIndex != (-1) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/dynarray.h", 1021, __FUNCTION__, "iIndex != (-1)", "removing inexistent element in wxArray::Remove"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct; wxBaseArrayShort::RemoveAt((size_t)iIndex); } void Sort(CMPFUNC_wxArraywxArrayShort fCmp) { wxBaseArrayShort::Sort((CMPFUNC)fCmp); } private: typedef wxBaseArrayShort::iterator biterator; typedef wxBaseArrayShort::const_iterator bconst_iterator; typedef wxBaseArrayShort::value_type bvalue_type; typedef wxBaseArrayShort::const_reference bconst_reference; public: typedef _wxArraywxArrayShort value_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef wxBaseArrayShort::difference_type difference_type; typedef wxBaseArrayShort::size_type size_type; class reverse_iterator { typedef _wxArraywxArrayShort value_type; typedef value_type& reference; typedef value_type* pointer; typedef reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; reverse_iterator() : m_ptr(__null) { } reverse_iterator(pointer ptr) : m_ptr(ptr) { } reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { reverse_iterator tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; class const_reverse_iterator { typedef _wxArraywxArrayShort value_type; typedef const value_type& reference; typedef const value_type* pointer; typedef const_reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; const_reverse_iterator() : m_ptr(__null) { } const_reverse_iterator(pointer ptr) : m_ptr(ptr) { } const_reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { itor tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; wxArrayShort(size_type n) { assign(n, value_type()); } wxArrayShort(size_type n, const_reference v) { assign(n, v); } wxArrayShort(const_iterator first, const_iterator last) { assign(first, last); } void assign(const_iterator first, const_iterator last) { wxBaseArrayShort::assign((bconst_iterator)first, (bconst_iterator)last); } void assign(size_type n, const_reference v) { wxBaseArrayShort::assign(n, (bconst_reference)v); } reference back() { return *(end() - 1); } const_reference back() const { return *(end() - 1); } iterator begin() { return (iterator)wxBaseArrayShort::begin(); } const_iterator begin() const { return (const_iterator)wxBaseArrayShort::begin(); } size_type capacity() const { return wxBaseArrayShort::capacity(); } iterator end() { return (iterator)wxBaseArrayShort::end(); } const_iterator end() const { return (const_iterator)wxBaseArrayShort::end(); } iterator erase(iterator first, iterator last) { return (iterator)wxBaseArrayShort::erase((biterator)first, (biterator)last); } iterator erase(iterator it) { return (iterator)wxBaseArrayShort::erase((biterator)it); } reference front() { return *begin(); } const_reference front() const { return *begin(); } void insert(iterator it, size_type n, const_reference v) { wxBaseArrayShort::insert((biterator)it, n, (bconst_reference)v); } iterator insert(iterator it, const_reference v = value_type()) { return (iterator)wxBaseArrayShort::insert((biterator)it, (bconst_reference)v); } void insert(iterator it, const_iterator first, const_iterator last) { wxBaseArrayShort::insert((biterator)it, (bconst_iterator)first, (bconst_iterator)last); } void pop_back() { wxBaseArrayShort::pop_back(); } void push_back(const_reference v) { wxBaseArrayShort::push_back((bconst_reference)v); } reverse_iterator rbegin() { return reverse_iterator(end() - 1); } const_reverse_iterator rbegin() const; reverse_iterator rend() { return reverse_iterator(begin() - 1); } const_reverse_iterator rend() const; void reserve(size_type n) { wxBaseArrayShort::reserve(n); } void resize(size_type n, value_type v = value_type()) { wxBaseArrayShort::resize(n, v); } void swap(wxArrayShort& other) { wxBaseArrayShort::swap(other); } };
typedef int _wxArraywxArrayInt; struct wxAssert_wxArrayInt { unsigned int TypeTooBigToBeStoredInwxBaseArrayInt: sizeof(_wxArraywxArrayInt) <= sizeof(wxBaseArrayInt::base_type); }; typedef int ( *CMPFUNC_wxArraywxArrayInt)(_wxArraywxArrayInt *pItem1, _wxArraywxArrayInt *pItem2); class wxArrayInt : public wxBaseArrayInt { public: wxArrayInt() { } ~wxArrayInt() { } _wxArraywxArrayInt& operator[](size_t uiIndex) const { return (_wxArraywxArrayInt&)(wxBaseArrayInt::operator[](uiIndex)); } _wxArraywxArrayInt& Item(size_t uiIndex) const { return (_wxArraywxArrayInt&)(wxBaseArrayInt::operator[](uiIndex)); } _wxArraywxArrayInt& Last() const { return (_wxArraywxArrayInt&)(wxBaseArrayInt::operator[](GetCount() - 1)); } int Index(_wxArraywxArrayInt lItem, bool bFromEnd = false) const { return wxBaseArrayInt::Index((base_type)lItem, bFromEnd); } void Add(_wxArraywxArrayInt lItem, size_t nInsert = 1) { wxBaseArrayInt::Add((base_type)lItem, nInsert); } void Insert(_wxArraywxArrayInt lItem, size_t uiIndex, size_t nInsert = 1) { wxBaseArrayInt::Insert((base_type)lItem, uiIndex, nInsert) ; } void RemoveAt(size_t uiIndex, size_t nRemove = 1) { wxBaseArrayInt::RemoveAt(uiIndex, nRemove); } void Remove(_wxArraywxArrayInt lItem) { int iIndex = Index(lItem); if ( iIndex != (-1) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/dynarray.h", 1022, __FUNCTION__, "iIndex != (-1)", "removing inexistent element in wxArray::Remove"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct; wxBaseArrayInt::RemoveAt((size_t)iIndex); } void Sort(CMPFUNC_wxArraywxArrayInt fCmp) { wxBaseArrayInt::Sort((CMPFUNC)fCmp); } private: typedef wxBaseArrayInt::iterator biterator; typedef wxBaseArrayInt::const_iterator bconst_iterator; typedef wxBaseArrayInt::value_type bvalue_type; typedef wxBaseArrayInt::const_reference bconst_reference; public: typedef _wxArraywxArrayInt value_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef wxBaseArrayInt::difference_type difference_type; typedef wxBaseArrayInt::size_type size_type; class reverse_iterator { typedef _wxArraywxArrayInt value_type; typedef value_type& reference; typedef value_type* pointer; typedef reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; reverse_iterator() : m_ptr(__null) { } reverse_iterator(pointer ptr) : m_ptr(ptr) { } reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { reverse_iterator tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; class const_reverse_iterator { typedef _wxArraywxArrayInt value_type; typedef const value_type& reference; typedef const value_type* pointer; typedef const_reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; const_reverse_iterator() : m_ptr(__null) { } const_reverse_iterator(pointer ptr) : m_ptr(ptr) { } const_reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { itor tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; wxArrayInt(size_type n) { assign(n, value_type()); } wxArrayInt(size_type n, const_reference v) { assign(n, v); } wxArrayInt(const_iterator first, const_iterator last) { assign(first, last); } void assign(const_iterator first, const_iterator last) { wxBaseArrayInt::assign((bconst_iterator)first, (bconst_iterator)last); } void assign(size_type n, const_reference v) { wxBaseArrayInt::assign(n, (bconst_reference)v); } reference back() { return *(end() - 1); } const_reference back() const { return *(end() - 1); } iterator begin() { return (iterator)wxBaseArrayInt::begin(); } const_iterator begin() const { return (const_iterator)wxBaseArrayInt::begin(); } size_type capacity() const { return wxBaseArrayInt::capacity(); } iterator end() { return (iterator)wxBaseArrayInt::end(); } const_iterator end() const { return (const_iterator)wxBaseArrayInt::end(); } iterator erase(iterator first, iterator last) { return (iterator)wxBaseArrayInt::erase((biterator)first, (biterator)last); } iterator erase(iterator it) { return (iterator)wxBaseArrayInt::erase((biterator)it); } reference front() { return *begin(); } const_reference front() const { return *begin(); } void insert(iterator it, size_type n, const_reference v) { wxBaseArrayInt::insert((biterator)it, n, (bconst_reference)v); } iterator insert(iterator it, const_reference v = value_type()) { return (iterator)wxBaseArrayInt::insert((biterator)it, (bconst_reference)v); } void insert(iterator it, const_iterator first, const_iterator last) { wxBaseArrayInt::insert((biterator)it, (bconst_iterator)first, (bconst_iterator)last); } void pop_back() { wxBaseArrayInt::pop_back(); } void push_back(const_reference v) { wxBaseArrayInt::push_back((bconst_reference)v); } reverse_iterator rbegin() { return reverse_iterator(end() - 1); } const_reverse_iterator rbegin() const; reverse_iterator rend() { return reverse_iterator(begin() - 1); } const_reverse_iterator rend() const; void reserve(size_type n) { wxBaseArrayInt::reserve(n); } void resize(size_type n, value_type v = value_type()) { wxBaseArrayInt::resize(n, v); } void swap(wxArrayInt& other) { wxBaseArrayInt::swap(other); } };
typedef double _wxArraywxArrayDouble; struct wxAssert_wxArrayDouble { unsigned int TypeTooBigToBeStoredInwxBaseArrayDouble: sizeof(_wxArraywxArrayDouble) <= sizeof(wxBaseArrayDouble::base_type); }; typedef int ( *CMPFUNC_wxArraywxArrayDouble)(_wxArraywxArrayDouble *pItem1, _wxArraywxArrayDouble *pItem2); class wxArrayDouble : public wxBaseArrayDouble { public: wxArrayDouble() { } ~wxArrayDouble() { } _wxArraywxArrayDouble& operator[](size_t uiIndex) const { return (_wxArraywxArrayDouble&)(wxBaseArrayDouble::operator[](uiIndex)); } _wxArraywxArrayDouble& Item(size_t uiIndex) const { return (_wxArraywxArrayDouble&)(wxBaseArrayDouble::operator[](uiIndex)); } _wxArraywxArrayDouble& Last() const { return (_wxArraywxArrayDouble&)(wxBaseArrayDouble::operator[](GetCount() - 1)); } int Index(_wxArraywxArrayDouble lItem, bool bFromEnd = false) const { return wxBaseArrayDouble::Index((base_type)lItem, bFromEnd); } void Add(_wxArraywxArrayDouble lItem, size_t nInsert = 1) { wxBaseArrayDouble::Add((base_type)lItem, nInsert); } void Insert(_wxArraywxArrayDouble lItem, size_t uiIndex, size_t nInsert = 1) { wxBaseArrayDouble::Insert((base_type)lItem, uiIndex, nInsert) ; } void RemoveAt(size_t uiIndex, size_t nRemove = 1) { wxBaseArrayDouble::RemoveAt(uiIndex, nRemove); } void Remove(_wxArraywxArrayDouble lItem) { int iIndex = Index(lItem); if ( iIndex != (-1) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/dynarray.h", 1023, __FUNCTION__, "iIndex != (-1)", "removing inexistent element in wxArray::Remove"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct; wxBaseArrayDouble::RemoveAt((size_t)iIndex); } void Sort(CMPFUNC_wxArraywxArrayDouble fCmp) { wxBaseArrayDouble::Sort((CMPFUNC)fCmp); } private: typedef wxBaseArrayDouble::iterator biterator; typedef wxBaseArrayDouble::const_iterator bconst_iterator; typedef wxBaseArrayDouble::value_type bvalue_type; typedef wxBaseArrayDouble::const_reference bconst_reference; public: typedef _wxArraywxArrayDouble value_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef wxBaseArrayDouble::difference_type difference_type; typedef wxBaseArrayDouble::size_type size_type; class reverse_iterator { typedef _wxArraywxArrayDouble value_type; typedef value_type& reference; typedef value_type* pointer; typedef reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; reverse_iterator() : m_ptr(__null) { } reverse_iterator(pointer ptr) : m_ptr(ptr) { } reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { reverse_iterator tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; class const_reverse_iterator { typedef _wxArraywxArrayDouble value_type; typedef const value_type& reference; typedef const value_type* pointer; typedef const_reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; const_reverse_iterator() : m_ptr(__null) { } const_reverse_iterator(pointer ptr) : m_ptr(ptr) { } const_reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { itor tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; wxArrayDouble(size_type n) { assign(n, value_type()); } wxArrayDouble(size_type n, const_reference v) { assign(n, v); } wxArrayDouble(const_iterator first, const_iterator last) { assign(first, last); } void assign(const_iterator first, const_iterator last) { wxBaseArrayDouble::assign((bconst_iterator)first, (bconst_iterator)last); } void assign(size_type n, const_reference v) { wxBaseArrayDouble::assign(n, (bconst_reference)v); } reference back() { return *(end() - 1); } const_reference back() const { return *(end() - 1); } iterator begin() { return (iterator)wxBaseArrayDouble::begin(); } const_iterator begin() const { return (const_iterator)wxBaseArrayDouble::begin(); } size_type capacity() const { return wxBaseArrayDouble::capacity(); } iterator end() { return (iterator)wxBaseArrayDouble::end(); } const_iterator end() const { return (const_iterator)wxBaseArrayDouble::end(); } iterator erase(iterator first, iterator last) { return (iterator)wxBaseArrayDouble::erase((biterator)first, (biterator)last); } iterator erase(iterator it) { return (iterator)wxBaseArrayDouble::erase((biterator)it); } reference front() { return *begin(); } const_reference front() const { return *begin(); } void insert(iterator it, size_type n, const_reference v) { wxBaseArrayDouble::insert((biterator)it, n, (bconst_reference)v); } iterator insert(iterator it, const_reference v = value_type()) { return (iterator)wxBaseArrayDouble::insert((biterator)it, (bconst_reference)v); } void insert(iterator it, const_iterator first, const_iterator last) { wxBaseArrayDouble::insert((biterator)it, (bconst_iterator)first, (bconst_iterator)last); } void pop_back() { wxBaseArrayDouble::pop_back(); } void push_back(const_reference v) { wxBaseArrayDouble::push_back((bconst_reference)v); } reverse_iterator rbegin() { return reverse_iterator(end() - 1); } const_reverse_iterator rbegin() const; reverse_iterator rend() { return reverse_iterator(begin() - 1); } const_reverse_iterator rend() const; void reserve(size_type n) { wxBaseArrayDouble::reserve(n); } void resize(size_type n, value_type v = value_type()) { wxBaseArrayDouble::resize(n, v); } void swap(wxArrayDouble& other) { wxBaseArrayDouble::swap(other); } };
typedef long _wxArraywxArrayLong; struct wxAssert_wxArrayLong { unsigned int TypeTooBigToBeStoredInwxBaseArrayLong: sizeof(_wxArraywxArrayLong) <= sizeof(wxBaseArrayLong::base_type); }; typedef int ( *CMPFUNC_wxArraywxArrayLong)(_wxArraywxArrayLong *pItem1, _wxArraywxArrayLong *pItem2); class wxArrayLong : public wxBaseArrayLong { public: wxArrayLong() { } ~wxArrayLong() { } _wxArraywxArrayLong& operator[](size_t uiIndex) const { return (_wxArraywxArrayLong&)(wxBaseArrayLong::operator[](uiIndex)); } _wxArraywxArrayLong& Item(size_t uiIndex) const { return (_wxArraywxArrayLong&)(wxBaseArrayLong::operator[](uiIndex)); } _wxArraywxArrayLong& Last() const { return (_wxArraywxArrayLong&)(wxBaseArrayLong::operator[](GetCount() - 1)); } int Index(_wxArraywxArrayLong lItem, bool bFromEnd = false) const { return wxBaseArrayLong::Index((base_type)lItem, bFromEnd); } void Add(_wxArraywxArrayLong lItem, size_t nInsert = 1) { wxBaseArrayLong::Add((base_type)lItem, nInsert); } void Insert(_wxArraywxArrayLong lItem, size_t uiIndex, size_t nInsert = 1) { wxBaseArrayLong::Insert((base_type)lItem, uiIndex, nInsert) ; } void RemoveAt(size_t uiIndex, size_t nRemove = 1) { wxBaseArrayLong::RemoveAt(uiIndex, nRemove); } void Remove(_wxArraywxArrayLong lItem) { int iIndex = Index(lItem); if ( iIndex != (-1) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/dynarray.h", 1024, __FUNCTION__, "iIndex != (-1)", "removing inexistent element in wxArray::Remove"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct; wxBaseArrayLong::RemoveAt((size_t)iIndex); } void Sort(CMPFUNC_wxArraywxArrayLong fCmp) { wxBaseArrayLong::Sort((CMPFUNC)fCmp); } private: typedef wxBaseArrayLong::iterator biterator; typedef wxBaseArrayLong::const_iterator bconst_iterator; typedef wxBaseArrayLong::value_type bvalue_type; typedef wxBaseArrayLong::const_reference bconst_reference; public: typedef _wxArraywxArrayLong value_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef wxBaseArrayLong::difference_type difference_type; typedef wxBaseArrayLong::size_type size_type; class reverse_iterator { typedef _wxArraywxArrayLong value_type; typedef value_type& reference; typedef value_type* pointer; typedef reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; reverse_iterator() : m_ptr(__null) { } reverse_iterator(pointer ptr) : m_ptr(ptr) { } reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { reverse_iterator tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; class const_reverse_iterator { typedef _wxArraywxArrayLong value_type; typedef const value_type& reference; typedef const value_type* pointer; typedef const_reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; const_reverse_iterator() : m_ptr(__null) { } const_reverse_iterator(pointer ptr) : m_ptr(ptr) { } const_reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { itor tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; wxArrayLong(size_type n) { assign(n, value_type()); } wxArrayLong(size_type n, const_reference v) { assign(n, v); } wxArrayLong(const_iterator first, const_iterator last) { assign(first, last); } void assign(const_iterator first, const_iterator last) { wxBaseArrayLong::assign((bconst_iterator)first, (bconst_iterator)last); } void assign(size_type n, const_reference v) { wxBaseArrayLong::assign(n, (bconst_reference)v); } reference back() { return *(end() - 1); } const_reference back() const { return *(end() - 1); } iterator begin() { return (iterator)wxBaseArrayLong::begin(); } const_iterator begin() const { return (const_iterator)wxBaseArrayLong::begin(); } size_type capacity() const { return wxBaseArrayLong::capacity(); } iterator end() { return (iterator)wxBaseArrayLong::end(); } const_iterator end() const { return (const_iterator)wxBaseArrayLong::end(); } iterator erase(iterator first, iterator last) { return (iterator)wxBaseArrayLong::erase((biterator)first, (biterator)last); } iterator erase(iterator it) { return (iterator)wxBaseArrayLong::erase((biterator)it); } reference front() { return *begin(); } const_reference front() const { return *begin(); } void insert(iterator it, size_type n, const_reference v) { wxBaseArrayLong::insert((biterator)it, n, (bconst_reference)v); } iterator insert(iterator it, const_reference v = value_type()) { return (iterator)wxBaseArrayLong::insert((biterator)it, (bconst_reference)v); } void insert(iterator it, const_iterator first, const_iterator last) { wxBaseArrayLong::insert((biterator)it, (bconst_iterator)first, (bconst_iterator)last); } void pop_back() { wxBaseArrayLong::pop_back(); } void push_back(const_reference v) { wxBaseArrayLong::push_back((bconst_reference)v); } reverse_iterator rbegin() { return reverse_iterator(end() - 1); } const_reverse_iterator rbegin() const; reverse_iterator rend() { return reverse_iterator(begin() - 1); } const_reverse_iterator rend() const; void reserve(size_type n) { wxBaseArrayLong::reserve(n); } void resize(size_type n, value_type v = value_type()) { wxBaseArrayLong::resize(n, v); } void swap(wxArrayLong& other) { wxBaseArrayLong::swap(other); } };
typedef void * _wxArraywxArrayPtrVoid; struct wxAssert_wxArrayPtrVoid { unsigned int TypeTooBigToBeStoredInwxBaseArrayPtrVoid: sizeof(_wxArraywxArrayPtrVoid) <= sizeof(wxBaseArrayPtrVoid::base_type); }; typedef int ( *CMPFUNC_wxArraywxArrayPtrVoid)(_wxArraywxArrayPtrVoid *pItem1, _wxArraywxArrayPtrVoid *pItem2); class wxArrayPtrVoid : public wxBaseArrayPtrVoid { public: wxArrayPtrVoid() { } ~wxArrayPtrVoid() { } _wxArraywxArrayPtrVoid& operator[](size_t uiIndex) const { return (_wxArraywxArrayPtrVoid&)(wxBaseArrayPtrVoid::operator[](uiIndex)); } _wxArraywxArrayPtrVoid& Item(size_t uiIndex) const { return (_wxArraywxArrayPtrVoid&)(wxBaseArrayPtrVoid::operator[](uiIndex)); } _wxArraywxArrayPtrVoid& Last() const { return (_wxArraywxArrayPtrVoid&)(wxBaseArrayPtrVoid::operator[](GetCount() - 1)); } int Index(_wxArraywxArrayPtrVoid lItem, bool bFromEnd = false) const { return wxBaseArrayPtrVoid::Index((base_type)lItem, bFromEnd); } void Add(_wxArraywxArrayPtrVoid lItem, size_t nInsert = 1) { wxBaseArrayPtrVoid::Add((base_type)lItem, nInsert); } void Insert(_wxArraywxArrayPtrVoid lItem, size_t uiIndex, size_t nInsert = 1) { wxBaseArrayPtrVoid::Insert((base_type)lItem, uiIndex, nInsert) ; } void RemoveAt(size_t uiIndex, size_t nRemove = 1) { wxBaseArrayPtrVoid::RemoveAt(uiIndex, nRemove); } void Remove(_wxArraywxArrayPtrVoid lItem) { int iIndex = Index(lItem); if ( iIndex != (-1) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/dynarray.h", 1025, __FUNCTION__, "iIndex != (-1)", "removing inexistent element in wxArray::Remove"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct; wxBaseArrayPtrVoid::RemoveAt((size_t)iIndex); } void Sort(CMPFUNC_wxArraywxArrayPtrVoid fCmp) { wxBaseArrayPtrVoid::Sort((CMPFUNC)fCmp); } private: typedef wxBaseArrayPtrVoid::iterator biterator; typedef wxBaseArrayPtrVoid::const_iterator bconst_iterator; typedef wxBaseArrayPtrVoid::value_type bvalue_type; typedef wxBaseArrayPtrVoid::const_reference bconst_reference; public: typedef _wxArraywxArrayPtrVoid value_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef wxBaseArrayPtrVoid::difference_type difference_type; typedef wxBaseArrayPtrVoid::size_type size_type; class reverse_iterator { typedef _wxArraywxArrayPtrVoid value_type; typedef value_type& reference; typedef value_type* pointer; typedef reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; reverse_iterator() : m_ptr(__null) { } reverse_iterator(pointer ptr) : m_ptr(ptr) { } reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { reverse_iterator tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; class const_reverse_iterator { typedef _wxArraywxArrayPtrVoid value_type; typedef const value_type& reference; typedef const value_type* pointer; typedef const_reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; const_reverse_iterator() : m_ptr(__null) { } const_reverse_iterator(pointer ptr) : m_ptr(ptr) { } const_reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { itor tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; wxArrayPtrVoid(size_type n) { assign(n, value_type()); } wxArrayPtrVoid(size_type n, const_reference v) { assign(n, v); } wxArrayPtrVoid(const_iterator first, const_iterator last) { assign(first, last); } void assign(const_iterator first, const_iterator last) { wxBaseArrayPtrVoid::assign((bconst_iterator)first, (bconst_iterator)last); } void assign(size_type n, const_reference v) { wxBaseArrayPtrVoid::assign(n, (bconst_reference)v); } reference back() { return *(end() - 1); } const_reference back() const { return *(end() - 1); } iterator begin() { return (iterator)wxBaseArrayPtrVoid::begin(); } const_iterator begin() const { return (const_iterator)wxBaseArrayPtrVoid::begin(); } size_type capacity() const { return wxBaseArrayPtrVoid::capacity(); } iterator end() { return (iterator)wxBaseArrayPtrVoid::end(); } const_iterator end() const { return (const_iterator)wxBaseArrayPtrVoid::end(); } iterator erase(iterator first, iterator last) { return (iterator)wxBaseArrayPtrVoid::erase((biterator)first, (biterator)last); } iterator erase(iterator it) { return (iterator)wxBaseArrayPtrVoid::erase((biterator)it); } reference front() { return *begin(); } const_reference front() const { return *begin(); } void insert(iterator it, size_type n, const_reference v) { wxBaseArrayPtrVoid::insert((biterator)it, n, (bconst_reference)v); } iterator insert(iterator it, const_reference v = value_type()) { return (iterator)wxBaseArrayPtrVoid::insert((biterator)it, (bconst_reference)v); } void insert(iterator it, const_iterator first, const_iterator last) { wxBaseArrayPtrVoid::insert((biterator)it, (bconst_iterator)first, (bconst_iterator)last); } void pop_back() { wxBaseArrayPtrVoid::pop_back(); } void push_back(const_reference v) { wxBaseArrayPtrVoid::push_back((bconst_reference)v); } reverse_iterator rbegin() { return reverse_iterator(end() - 1); } const_reverse_iterator rbegin() const; reverse_iterator rend() { return reverse_iterator(begin() - 1); } const_reverse_iterator rend() const; void reserve(size_type n) { wxBaseArrayPtrVoid::reserve(n); } void resize(size_type n, value_type v = value_type()) { wxBaseArrayPtrVoid::resize(n, v); } void swap(wxArrayPtrVoid& other) { wxBaseArrayPtrVoid::swap(other); } };
# 17 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 1 "/usr/local/include/wx-3.0/wx/list.h" 1
# 34 "/usr/local/include/wx-3.0/wx/list.h"
# 1 "/usr/local/include/wx-3.0/wx/vector.h" 1
# 31 "/usr/local/include/wx-3.0/wx/vector.h"
# 1 "/usr/local/include/wx-3.0/wx/scopeguard.h" 1
# 23 "/usr/local/include/wx-3.0/wx/scopeguard.h"
# 1 "/usr/local/include/wx-3.0/wx/except.h" 1
# 24 "/usr/local/include/wx-3.0/wx/scopeguard.h" 2
# 53 "/usr/local/include/wx-3.0/wx/scopeguard.h"
namespace wxPrivate
{



    template <class ScopeGuardImpl>
    void OnScopeExit(ScopeGuardImpl& guard)
    {
        if ( !guard.WasDismissed() )
        {


            {
                guard.Execute();
            }

        }
    }


    template <class T>
    void Use(const T& )
    {
    }
}
# 92 "/usr/local/include/wx-3.0/wx/scopeguard.h"
class wxScopeGuardImplBase
{
public:
    wxScopeGuardImplBase() : m_wasDismissed(false) { }

    wxScopeGuardImplBase(const wxScopeGuardImplBase& other)
        : m_wasDismissed(other.m_wasDismissed)
    {
        other.Dismiss();
    }

    void Dismiss() const { m_wasDismissed = true; }


    bool WasDismissed() const { return m_wasDismissed; }

protected:
    ~wxScopeGuardImplBase() { }


    mutable bool m_wasDismissed;

private:
    wxScopeGuardImplBase& operator=(const wxScopeGuardImplBase&);
};


typedef const wxScopeGuardImplBase& wxScopeGuard;





template <class F>
class wxScopeGuardImpl0 : public wxScopeGuardImplBase
{
public:
    static wxScopeGuardImpl0<F> MakeGuard(F fun)
    {
        return wxScopeGuardImpl0<F>(fun);
    }

    ~wxScopeGuardImpl0() { wxPrivate::OnScopeExit(*this); }

    void Execute() { m_fun(); }

protected:
    wxScopeGuardImpl0(F fun) : m_fun(fun) { }

    F m_fun;

    wxScopeGuardImpl0& operator=(const wxScopeGuardImpl0&);
};

template <class F>
inline wxScopeGuardImpl0<F> wxMakeGuard(F fun)
{
    return wxScopeGuardImpl0<F>::MakeGuard(fun);
}





template <class F, class P1>
class wxScopeGuardImpl1 : public wxScopeGuardImplBase
{
public:
    static wxScopeGuardImpl1<F, P1> MakeGuard(F fun, P1 p1)
    {
        return wxScopeGuardImpl1<F, P1>(fun, p1);
    }

    ~wxScopeGuardImpl1() { wxPrivate::OnScopeExit(* this); }

    void Execute() { m_fun(m_p1); }

protected:
    wxScopeGuardImpl1(F fun, P1 p1) : m_fun(fun), m_p1(p1) { }

    F m_fun;
    const P1 m_p1;

    wxScopeGuardImpl1& operator=(const wxScopeGuardImpl1&);
};

template <class F, class P1>
inline wxScopeGuardImpl1<F, P1> wxMakeGuard(F fun, P1 p1)
{
    return wxScopeGuardImpl1<F, P1>::MakeGuard(fun, p1);
}





template <class F, class P1, class P2>
class wxScopeGuardImpl2 : public wxScopeGuardImplBase
{
public:
    static wxScopeGuardImpl2<F, P1, P2> MakeGuard(F fun, P1 p1, P2 p2)
    {
        return wxScopeGuardImpl2<F, P1, P2>(fun, p1, p2);
    }

    ~wxScopeGuardImpl2() { wxPrivate::OnScopeExit(*this); }

    void Execute() { m_fun(m_p1, m_p2); }

protected:
    wxScopeGuardImpl2(F fun, P1 p1, P2 p2) : m_fun(fun), m_p1(p1), m_p2(p2) { }

    F m_fun;
    const P1 m_p1;
    const P2 m_p2;

    wxScopeGuardImpl2& operator=(const wxScopeGuardImpl2&);
};

template <class F, class P1, class P2>
inline wxScopeGuardImpl2<F, P1, P2> wxMakeGuard(F fun, P1 p1, P2 p2)
{
    return wxScopeGuardImpl2<F, P1, P2>::MakeGuard(fun, p1, p2);
}





template <class F, class P1, class P2, class P3>
class wxScopeGuardImpl3 : public wxScopeGuardImplBase
{
public:
    static wxScopeGuardImpl3<F, P1, P2, P3> MakeGuard(F fun, P1 p1, P2 p2, P3 p3)
    {
        return wxScopeGuardImpl3<F, P1, P2, P3>(fun, p1, p2, p3);
    }

    ~wxScopeGuardImpl3() { wxPrivate::OnScopeExit(*this); }

    void Execute() { m_fun(m_p1, m_p2, m_p3); }

protected:
    wxScopeGuardImpl3(F fun, P1 p1, P2 p2, P3 p3)
        : m_fun(fun), m_p1(p1), m_p2(p2), m_p3(p3) { }

    F m_fun;
    const P1 m_p1;
    const P2 m_p2;
    const P3 m_p3;

    wxScopeGuardImpl3& operator=(const wxScopeGuardImpl3&);
};

template <class F, class P1, class P2, class P3>
inline wxScopeGuardImpl3<F, P1, P2, P3> wxMakeGuard(F fun, P1 p1, P2 p2, P3 p3)
{
    return wxScopeGuardImpl3<F, P1, P2, P3>::MakeGuard(fun, p1, p2, p3);
}
# 260 "/usr/local/include/wx-3.0/wx/scopeguard.h"
template <class Obj, class MemFun>
class wxObjScopeGuardImpl0 : public wxScopeGuardImplBase
{
public:
    static wxObjScopeGuardImpl0<Obj, MemFun>
        MakeObjGuard(Obj& obj, MemFun memFun)
    {
        return wxObjScopeGuardImpl0<Obj, MemFun>(obj, memFun);
    }

    ~wxObjScopeGuardImpl0() { wxPrivate::OnScopeExit(*this); }

    void Execute() { (m_obj.*m_memfun)(); }

protected:
    wxObjScopeGuardImpl0(Obj& obj, MemFun memFun)
        : m_obj(obj), m_memfun(memFun) { }

    Obj& m_obj;
    MemFun m_memfun;
};

template <class Obj, class MemFun>
inline wxObjScopeGuardImpl0<Obj, MemFun> wxMakeObjGuard(Obj& obj, MemFun memFun)
{
    return wxObjScopeGuardImpl0<Obj, MemFun>::MakeObjGuard(obj, memFun);
}

template <class Obj, class MemFun, class P1>
class wxObjScopeGuardImpl1 : public wxScopeGuardImplBase
{
public:
    static wxObjScopeGuardImpl1<Obj, MemFun, P1>
        MakeObjGuard(Obj& obj, MemFun memFun, P1 p1)
    {
        return wxObjScopeGuardImpl1<Obj, MemFun, P1>(obj, memFun, p1);
    }

    ~wxObjScopeGuardImpl1() { wxPrivate::OnScopeExit(*this); }

    void Execute() { (m_obj.*m_memfun)(m_p1); }

protected:
    wxObjScopeGuardImpl1(Obj& obj, MemFun memFun, P1 p1)
        : m_obj(obj), m_memfun(memFun), m_p1(p1) { }

    Obj& m_obj;
    MemFun m_memfun;
    const P1 m_p1;
};

template <class Obj, class MemFun, class P1>
inline wxObjScopeGuardImpl1<Obj, MemFun, P1>
wxMakeObjGuard(Obj& obj, MemFun memFun, P1 p1)
{
    return wxObjScopeGuardImpl1<Obj, MemFun, P1>::MakeObjGuard(obj, memFun, p1);
}

template <class Obj, class MemFun, class P1, class P2>
class wxObjScopeGuardImpl2 : public wxScopeGuardImplBase
{
public:
    static wxObjScopeGuardImpl2<Obj, MemFun, P1, P2>
        MakeObjGuard(Obj& obj, MemFun memFun, P1 p1, P2 p2)
    {
        return wxObjScopeGuardImpl2<Obj, MemFun, P1, P2>(obj, memFun, p1, p2);
    }

    ~wxObjScopeGuardImpl2() { wxPrivate::OnScopeExit(*this); }

    void Execute() { (m_obj.*m_memfun)(m_p1, m_p2); }

protected:
    wxObjScopeGuardImpl2(Obj& obj, MemFun memFun, P1 p1, P2 p2)
        : m_obj(obj), m_memfun(memFun), m_p1(p1), m_p2(p2) { }

    Obj& m_obj;
    MemFun m_memfun;
    const P1 m_p1;
    const P2 m_p2;
};

template <class Obj, class MemFun, class P1, class P2>
inline wxObjScopeGuardImpl2<Obj, MemFun, P1, P2>
wxMakeObjGuard(Obj& obj, MemFun memFun, P1 p1, P2 p2)
{
    return wxObjScopeGuardImpl2<Obj, MemFun, P1, P2>::
                                            MakeObjGuard(obj, memFun, p1, p2);
}

template <class Obj, class MemFun, class P1, class P2, class P3>
class wxObjScopeGuardImpl3 : public wxScopeGuardImplBase
{
public:
    static wxObjScopeGuardImpl3<Obj, MemFun, P1, P2, P3>
        MakeObjGuard(Obj& obj, MemFun memFun, P1 p1, P2 p2, P3 p3)
    {
        return wxObjScopeGuardImpl3<Obj, MemFun, P1, P2, P3>(obj, memFun, p1, p2, p3);
    }

    ~wxObjScopeGuardImpl3() { wxPrivate::OnScopeExit(*this); }

    void Execute() { (m_obj.*m_memfun)(m_p1, m_p2, m_p3); }

protected:
    wxObjScopeGuardImpl3(Obj& obj, MemFun memFun, P1 p1, P2 p2, P3 p3)
        : m_obj(obj), m_memfun(memFun), m_p1(p1), m_p2(p2), m_p3(p3) { }

    Obj& m_obj;
    MemFun m_memfun;
    const P1 m_p1;
    const P2 m_p2;
    const P3 m_p3;
};

template <class Obj, class MemFun, class P1, class P2, class P3>
inline wxObjScopeGuardImpl3<Obj, MemFun, P1, P2, P3>
wxMakeObjGuard(Obj& obj, MemFun memFun, P1 p1, P2 p2, P3 p3)
{
    return wxObjScopeGuardImpl3<Obj, MemFun, P1, P2, P3>::
                                        MakeObjGuard(obj, memFun, p1, p2, p3);
}






namespace wxPrivate
{


class VariableSetterBase : public wxScopeGuardImplBase { };

typedef const VariableSetterBase& VariableSetter;

template <typename T, typename U>
class VariableSetterImpl : public VariableSetterBase
{
public:
    VariableSetterImpl(T& var, U value)
        : m_var(var),
          m_value(value)
    {
    }

    ~VariableSetterImpl() { wxPrivate::OnScopeExit(*this); }

    void Execute() { m_var = m_value; }

private:
    T& m_var;
    const U m_value;


    VariableSetterImpl<T, U>& operator=(const VariableSetterImpl<T, U>&);
};

template <typename T>
class VariableNullerImpl : public VariableSetterBase
{
public:
    VariableNullerImpl(T& var)
        : m_var(var)
    {
    }

    ~VariableNullerImpl() { wxPrivate::OnScopeExit(*this); }

    void Execute() { m_var = __null; }

private:
    T& m_var;

    VariableNullerImpl<T>& operator=(const VariableNullerImpl<T>&);
};

}

template <typename T, typename U>
inline
wxPrivate::VariableSetterImpl<T, U> wxMakeVarSetter(T& var, U value)
{
      return wxPrivate::VariableSetterImpl<T, U>(var, value);
}




template <typename T>
inline
wxPrivate::VariableNullerImpl<T> wxMakeVarNuller(T& var)
{
    return wxPrivate::VariableNullerImpl<T>(var);
}
# 32 "/usr/local/include/wx-3.0/wx/vector.h" 2
# 1 "/usr/local/include/wx-3.0/wx/meta/movable.h" 1
# 13 "/usr/local/include/wx-3.0/wx/meta/movable.h"
# 1 "/usr/local/include/wx-3.0/wx/meta/pod.h" 1
# 33 "/usr/local/include/wx-3.0/wx/meta/pod.h"
template<typename T>
struct wxIsPod
{
    static const bool value = false;
};
# 47 "/usr/local/include/wx-3.0/wx/meta/pod.h"
template<> struct wxIsPod<bool> { static const bool value = true; };
template<> struct wxIsPod<unsigned char> { static const bool value = true; };
template<> struct wxIsPod<signed char> { static const bool value = true; };
template<> struct wxIsPod<unsigned int> { static const bool value = true; };
template<> struct wxIsPod<signed int> { static const bool value = true; };
template<> struct wxIsPod<unsigned short int> { static const bool value = true; };
template<> struct wxIsPod<signed short int> { static const bool value = true; };
template<> struct wxIsPod<signed long int> { static const bool value = true; };
template<> struct wxIsPod<unsigned long int> { static const bool value = true; };
template<> struct wxIsPod<float> { static const bool value = true; };
template<> struct wxIsPod<double> { static const bool value = true; };
template<> struct wxIsPod<long double> { static const bool value = true; };

template<> struct wxIsPod<wchar_t> { static const bool value = true; };


template<> struct wxIsPod<long long> { static const bool value = true; };
template<> struct wxIsPod<unsigned long long> { static const bool value = true; };
# 73 "/usr/local/include/wx-3.0/wx/meta/pod.h"
template<typename T>
struct wxIsPod<T*>
{
    static const bool value = true;
};

template<typename T>
struct wxIsPod<const T*>
{
    static const bool value = true;
};
# 14 "/usr/local/include/wx-3.0/wx/meta/movable.h" 2






template<typename T>
struct wxIsMovable
{
    static const bool value = wxIsPod<T>::value;
};
# 41 "/usr/local/include/wx-3.0/wx/meta/movable.h"
template<> struct wxIsMovable<wxString> { static const bool value = true; };
# 33 "/usr/local/include/wx-3.0/wx/vector.h" 2
# 1 "/usr/local/include/wx-3.0/wx/meta/if.h" 1
# 19 "/usr/local/include/wx-3.0/wx/meta/if.h"
namespace wxPrivate
{

template <bool Cond>
struct wxIfImpl
# 35 "/usr/local/include/wx-3.0/wx/meta/if.h"
;


template <>
struct wxIfImpl<true>
{
    template<typename TTrue, typename TFalse> struct Result
    {
        typedef TTrue value;
    };
};


template<>
struct wxIfImpl<false>
{
    template<typename TTrue, typename TFalse> struct Result
    {
        typedef TFalse value;
    };
};

}






template<bool Cond, typename TTrue, typename TFalse>
struct wxIf
{
    typedef typename wxPrivate::wxIfImpl<Cond>
                     ::template Result<TTrue, TFalse>::value
            value;
};
# 34 "/usr/local/include/wx-3.0/wx/vector.h" 2

# 1 "/usr/local/include/wx-3.0/wx/beforestd.h" 1
# 36 "/usr/local/include/wx-3.0/wx/vector.h" 2
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/new" 1 3
# 89 "/Library/Developer/CommandLineTools/usr/include/c++/v1/new" 3
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/exception" 1 3
# 82 "/Library/Developer/CommandLineTools/usr/include/c++/v1/exception" 3
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/cstdlib" 1 3
# 86 "/Library/Developer/CommandLineTools/usr/include/c++/v1/cstdlib" 3
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdlib.h" 1 3
# 87 "/Library/Developer/CommandLineTools/usr/include/c++/v1/cstdlib" 2 3
# 90 "/Library/Developer/CommandLineTools/usr/include/c++/v1/cstdlib" 3








namespace std {inline namespace __1 {

using ::size_t;
using ::div_t;
using ::ldiv_t;

using ::lldiv_t;

using ::atof;
using ::atoi;
using ::atol;

using ::atoll;

using ::strtod;
using ::strtof;
using ::strtold;
using ::strtol;

using ::strtoll;

using ::strtoul;

using ::strtoull;

using ::rand;
using ::srand;
using ::calloc;
using ::free;
using ::malloc;
using ::realloc;
using ::abort;
using ::atexit;
using ::exit;
using ::_Exit;

using ::getenv;
using ::system;

using ::bsearch;
using ::qsort;
using ::abs;
using ::labs;

using ::llabs;

using ::div;
using ::ldiv;

using ::lldiv;

using ::mblen;
using ::mbtowc;
using ::wctomb;
using ::mbstowcs;
using ::wcstombs;
# 162 "/Library/Developer/CommandLineTools/usr/include/c++/v1/cstdlib" 3
} }
# 83 "/Library/Developer/CommandLineTools/usr/include/c++/v1/exception" 2 3
# 91 "/Library/Developer/CommandLineTools/usr/include/c++/v1/exception" 3


namespace std
{


class __attribute__ ((__visibility__("default"))) exception
{
public:
    __attribute__ ((__visibility__("hidden"), __always_inline__)) exception() throw() {}
    virtual ~exception() throw();
    virtual const char* what() const throw();
};

class __attribute__ ((__visibility__("default"))) bad_exception
    : public exception
{
public:
    __attribute__ ((__visibility__("hidden"), __always_inline__)) bad_exception() throw() {}
    virtual ~bad_exception() throw();
    virtual const char* what() const throw();
};





typedef void (*unexpected_handler)();
__attribute__ ((__visibility__("default"))) unexpected_handler set_unexpected(unexpected_handler) throw();
__attribute__ ((__visibility__("default"))) unexpected_handler get_unexpected() throw();
__attribute__ ((noreturn)) __attribute__ ((__visibility__("default"))) void unexpected();


typedef void (*terminate_handler)();
__attribute__ ((__visibility__("default"))) terminate_handler set_terminate(terminate_handler) throw();
__attribute__ ((__visibility__("default"))) terminate_handler get_terminate() throw();
__attribute__ ((noreturn)) __attribute__ ((__visibility__("default"))) void terminate() throw();

__attribute__ ((__visibility__("default"))) bool uncaught_exception() throw();
__attribute__ ((__visibility__("default"))) __attribute__((availability(macosx,strict,introduced=10.12))) __attribute__((availability(ios,strict,introduced=10.0))) __attribute__((availability(tvos,strict,introduced=10.0))) __attribute__((availability(watchos,strict,introduced=3.0))) int uncaught_exceptions() throw();

class __attribute__ ((__visibility__("default"))) exception_ptr;

__attribute__ ((__visibility__("default"))) exception_ptr current_exception() throw();
__attribute__ ((noreturn)) __attribute__ ((__visibility__("default"))) void rethrow_exception(exception_ptr);



class __attribute__ ((__visibility__("default"))) exception_ptr
{
    void* __ptr_;
public:
    __attribute__ ((__visibility__("hidden"), __always_inline__)) exception_ptr() throw() : __ptr_() {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) exception_ptr(nullptr_t) throw() : __ptr_() {}

    exception_ptr(const exception_ptr&) throw();
    exception_ptr& operator=(const exception_ptr&) throw();
    ~exception_ptr() throw();

    __attribute__ ((__visibility__("hidden"), __always_inline__)) operator bool() const throw()
    {return __ptr_ != std::__1::__get_nullptr_t();}

    friend __attribute__ ((__visibility__("hidden"), __always_inline__))
    bool operator==(const exception_ptr& __x, const exception_ptr& __y) throw()
        {return __x.__ptr_ == __y.__ptr_;}

    friend __attribute__ ((__visibility__("hidden"), __always_inline__))
    bool operator!=(const exception_ptr& __x, const exception_ptr& __y) throw()
        {return !(__x == __y);}

    friend __attribute__ ((__visibility__("default"))) exception_ptr current_exception() throw();
    friend __attribute__ ((__visibility__("default"))) void rethrow_exception(exception_ptr);
};

template<class _Ep>
exception_ptr
make_exception_ptr(_Ep __e) throw()
{

    try
    {
        throw __e;
    }
    catch (...)
    {
        return current_exception();
    }




}
# 234 "/Library/Developer/CommandLineTools/usr/include/c++/v1/exception" 3
class __attribute__ ((__visibility__("default"))) nested_exception
{
    exception_ptr __ptr_;
public:
    nested_exception() throw();


    virtual ~nested_exception() throw();


    __attribute__ ((noreturn)) void rethrow_nested() const;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) exception_ptr nested_ptr() const throw() {return __ptr_;}
};

template <class _Tp>
struct __nested
    : public _Tp,
      public nested_exception
{
    __attribute__ ((__visibility__("hidden"), __always_inline__)) explicit __nested(const _Tp& __t) : _Tp(__t) {}
};


template <class _Tp, class _Up, bool>
struct __throw_with_nested;

template <class _Tp, class _Up>
struct __throw_with_nested<_Tp, _Up, true> {
    __attribute__ ((noreturn)) static inline __attribute__ ((__visibility__("hidden"), __always_inline__)) void



    __do_throw (_Tp& __t)

    {
        throw __nested<_Up>(std::__1::forward<_Tp>(__t));
    }
};

template <class _Tp, class _Up>
struct __throw_with_nested<_Tp, _Up, false> {
    __attribute__ ((noreturn)) static inline __attribute__ ((__visibility__("hidden"), __always_inline__)) void



    __do_throw (_Tp& __t)

    {
        throw std::__1::forward<_Tp>(__t);
    }
};


template <class _Tp>
__attribute__ ((noreturn))
void



throw_with_nested (_Tp& __t)

{

    typedef typename decay<_Tp>::type _Up;
    _Static_assert(is_copy_constructible<_Up>::value, "type thrown must be CopyConstructible");
    __throw_with_nested<_Tp, _Up,
        is_class<_Up>::value &&
        !is_base_of<nested_exception, _Up>::value &&
        !__libcpp_is_final<_Up>::value>::
            __do_throw(std::__1::forward<_Tp>(__t));




}

template <class _From, class _To>
struct __can_dynamic_cast : public integral_constant<bool,(is_polymorphic<_From>::value && (!is_base_of<_To, _From>::value || is_convertible<const _From*, const _To*>::value))> {};




template <class _Ep>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
void
rethrow_if_nested(const _Ep& __e,
                  typename enable_if< __can_dynamic_cast<_Ep, nested_exception>::value>::type* = 0)
{
    const nested_exception* __nep = dynamic_cast<const nested_exception*>(std::__1::addressof(__e));
    if (__nep)
        __nep->rethrow_nested();
}

template <class _Ep>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
void
rethrow_if_nested(const _Ep&,
                  typename enable_if<!__can_dynamic_cast<_Ep, nested_exception>::value>::type* = 0)
{
}

}
# 90 "/Library/Developer/CommandLineTools/usr/include/c++/v1/new" 2 3
# 101 "/Library/Developer/CommandLineTools/usr/include/c++/v1/new" 3
# 114 "/Library/Developer/CommandLineTools/usr/include/c++/v1/new" 3
namespace std
{


struct __attribute__ ((__visibility__("default"))) nothrow_t {};
extern __attribute__ ((__visibility__("default"))) const nothrow_t nothrow;

class __attribute__ ((__visibility__("default"))) bad_alloc
    : public exception
{
public:
    bad_alloc() throw();
    virtual ~bad_alloc() throw();
    virtual const char* what() const throw();
};

class __attribute__ ((__visibility__("default"))) bad_array_new_length
    : public bad_alloc
{
public:
    bad_array_new_length() throw();
    virtual ~bad_array_new_length() throw();
    virtual const char* what() const throw();
};

typedef void (*new_handler)();
__attribute__ ((__visibility__("default"))) new_handler set_new_handler(new_handler) throw();
__attribute__ ((__visibility__("default"))) new_handler get_new_handler() throw();



__attribute__ ((noreturn)) __attribute__ ((__visibility__("default"))) void __throw_bad_alloc();
# 169 "/Library/Developer/CommandLineTools/usr/include/c++/v1/new" 3
}
# 179 "/Library/Developer/CommandLineTools/usr/include/c++/v1/new" 3
__attribute__ ((__visibility__("default"))) void* operator new(std::size_t __sz) throw(std::bad_alloc);
__attribute__ ((__visibility__("default"))) void* operator new(std::size_t __sz, const std::nothrow_t&) throw() __attribute__((__malloc__));
__attribute__ ((__visibility__("default"))) void operator delete(void* __p) throw();
__attribute__ ((__visibility__("default"))) void operator delete(void* __p, const std::nothrow_t&) throw();




__attribute__ ((__visibility__("default"))) void* operator new[](std::size_t __sz) throw(std::bad_alloc);
__attribute__ ((__visibility__("default"))) void* operator new[](std::size_t __sz, const std::nothrow_t&) throw() __attribute__((__malloc__));
__attribute__ ((__visibility__("default"))) void operator delete[](void* __p) throw();
__attribute__ ((__visibility__("default"))) void operator delete[](void* __p, const std::nothrow_t&) throw();
# 213 "/Library/Developer/CommandLineTools/usr/include/c++/v1/new" 3
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) void* operator new (std::size_t, void* __p) throw() {return __p;}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) void* operator new[](std::size_t, void* __p) throw() {return __p;}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) void operator delete (void*, void*) throw() {}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) void operator delete[](void*, void*) throw() {}



namespace std {inline namespace __1 {

inline __attribute__ ((__visibility__("hidden"), __always_inline__)) void *__allocate(size_t __size) {



  return __builtin_operator_new(__size);

}

inline __attribute__ ((__visibility__("hidden"), __always_inline__)) void __libcpp_deallocate(void *__ptr) {



  __builtin_operator_delete(__ptr);

}
# 253 "/Library/Developer/CommandLineTools/usr/include/c++/v1/new" 3
} }
# 37 "/usr/local/include/wx-3.0/wx/vector.h" 2
# 1 "/usr/local/include/wx-3.0/wx/afterstd.h" 1
# 38 "/usr/local/include/wx-3.0/wx/vector.h" 2



typedef int (*wxSortCallback)(const void* pItem1,
                              const void* pItem2,
                              const void* user_data);
                 void wxQsort(void* pbase, size_t total_elems,
                              size_t size, wxSortCallback cmp,
                              const void* user_data);

namespace wxPrivate
{






template<typename T>
struct wxVectorMemOpsMovable
{
    static void Free(T* array)
        { free(array); }

    static T* Realloc(T* old, size_t newCapacity, size_t )
        { return (T*)realloc(old, newCapacity * sizeof(T)); }

    static void MemmoveBackward(T* dest, T* source, size_t count)
        { memmove(dest, source, count * sizeof(T)); }

    static void MemmoveForward(T* dest, T* source, size_t count)
        { memmove(dest, source, count * sizeof(T)); }
};


template<typename T>
struct wxVectorMemOpsGeneric
{
    static void Free(T* array)
        { ::operator delete(array); }

    static T* Realloc(T* old, size_t newCapacity, size_t occupiedSize)
    {
        T *mem = (T*)::operator new(newCapacity * sizeof(T));
        for ( size_t i = 0; i < occupiedSize; i++ )
        {
            ::new(mem + i) T(old[i]);
            old[i].~T();
        }
        ::operator delete(old);
        return mem;
    }

    static void MemmoveBackward(T* dest, T* source, size_t count)
    {
        do { if ( wxTheAssertHandler && !(dest < source) && (wxOnAssert("/usr/local/include/wx-3.0/wx/vector.h", 93, __FUNCTION__, "dest < source", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
        T* destptr = dest;
        T* sourceptr = source;
        for ( size_t i = count; i > 0; --i, ++destptr, ++sourceptr )
        {
            ::new(destptr) T(*sourceptr);
            sourceptr->~T();
        }
    }

    static void MemmoveForward(T* dest, T* source, size_t count)
    {
        do { if ( wxTheAssertHandler && !(dest > source) && (wxOnAssert("/usr/local/include/wx-3.0/wx/vector.h", 105, __FUNCTION__, "dest > source", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
        T* destptr = dest + count - 1;
        T* sourceptr = source + count - 1;
        for ( size_t i = count; i > 0; --i, --destptr, --sourceptr )
        {
            ::new(destptr) T(*sourceptr);
            sourceptr->~T();
        }
    }
};


}

template<typename T>
class wxVector
{
private:
# 132 "/usr/local/include/wx-3.0/wx/vector.h"
    typedef typename wxIf< (wxIsMovable<T>::value),
                           wxPrivate::wxVectorMemOpsMovable<T>,
                           wxPrivate::wxVectorMemOpsGeneric<T> >::value
            Ops;

public:
    typedef size_t size_type;
    typedef size_t difference_type;
    typedef T value_type;
    typedef value_type* pointer;
    typedef const value_type* const_pointer;
    typedef value_type* iterator;
    typedef const value_type* const_iterator;
    typedef value_type& reference;
    typedef const value_type& const_reference;

    class reverse_iterator
    {
    public:
        reverse_iterator() : m_ptr(__null) { }
                   reverse_iterator(iterator it) : m_ptr(it) { }
        reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { }

        reference operator*() const { return *m_ptr; }
        pointer operator->() const { return m_ptr; }

        iterator base() const { return m_ptr; }

        reverse_iterator& operator++()
            { --m_ptr; return *this; }
        reverse_iterator operator++(int)
            { reverse_iterator tmp = *this; --m_ptr; return tmp; }
        reverse_iterator& operator--()
            { ++m_ptr; return *this; }
        reverse_iterator operator--(int)
            { reverse_iterator tmp = *this; ++m_ptr; return tmp; }

        reverse_iterator operator+(difference_type n) const
            { return reverse_iterator(m_ptr - n); }
        reverse_iterator& operator+=(difference_type n)
            { m_ptr -= n; return *this; }
        reverse_iterator operator-(difference_type n) const
            { return reverse_iterator(m_ptr + n); }
        reverse_iterator& operator-=(difference_type n)
            { m_ptr += n; return *this; }

        reference operator[](difference_type n) const
            { return *(*this + n); }

        bool operator ==(const reverse_iterator& it) const
            { return m_ptr == it.m_ptr; }
        bool operator !=(const reverse_iterator& it) const
            { return m_ptr != it.m_ptr; }

    private:
        value_type *m_ptr;

        friend class const_reverse_iterator;
    };

    class const_reverse_iterator
    {
    public:
        const_reverse_iterator() : m_ptr(__null) { }
                   const_reverse_iterator(const_iterator it) : m_ptr(it) { }
        const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { }
        const_reverse_iterator(const const_reverse_iterator& it) : m_ptr(it.m_ptr) { }

        const_reference operator*() const { return *m_ptr; }
        const_pointer operator->() const { return m_ptr; }

        const_iterator base() const { return m_ptr; }

        const_reverse_iterator& operator++()
            { --m_ptr; return *this; }
        const_reverse_iterator operator++(int)
            { const_reverse_iterator tmp = *this; --m_ptr; return tmp; }
        const_reverse_iterator& operator--()
            { ++m_ptr; return *this; }
        const_reverse_iterator operator--(int)
            { const_reverse_iterator tmp = *this; ++m_ptr; return tmp; }

        const_reverse_iterator operator+(difference_type n) const
            { return const_reverse_iterator(m_ptr - n); }
        const_reverse_iterator& operator+=(difference_type n)
            { m_ptr -= n; return *this; }
        const_reverse_iterator operator-(difference_type n) const
            { return const_reverse_iterator(m_ptr + n); }
        const_reverse_iterator& operator-=(difference_type n)
            { m_ptr += n; return *this; }

        const_reference operator[](difference_type n) const
            { return *(*this + n); }

        bool operator ==(const const_reverse_iterator& it) const
            { return m_ptr == it.m_ptr; }
        bool operator !=(const const_reverse_iterator& it) const
            { return m_ptr != it.m_ptr; }

    protected:
        const value_type *m_ptr;
    };

    wxVector() : m_size(0), m_capacity(0), m_values(__null) {}

    wxVector(size_type p_size)
        : m_size(0), m_capacity(0), m_values(__null)
    {
        reserve(p_size);
        for ( size_t n = 0; n < p_size; n++ )
            push_back(value_type());
    }

    wxVector(size_type p_size, const value_type& v)
        : m_size(0), m_capacity(0), m_values(__null)
    {
        reserve(p_size);
        for ( size_t n = 0; n < p_size; n++ )
            push_back(v);
    }

    wxVector(const wxVector& c) : m_size(0), m_capacity(0), m_values(__null)
    {
        Copy(c);
    }

    template <class InputIterator>
    wxVector(InputIterator first, InputIterator last)
        : m_size(0), m_capacity(0), m_values(__null)
    {
        assign(first, last);
    }

    ~wxVector()
    {
        clear();
    }

    void assign(size_type p_size, const value_type& v)
    {
        clear();
        reserve(p_size);
        for ( size_t n = 0; n < p_size; n++ )
            push_back(v);
    }

    template <class InputIterator>
    void assign(InputIterator first, InputIterator last)
    {
        clear();





        for ( InputIterator it = first; it != last; ++it )
            push_back(*it);
    }

    void swap(wxVector& v)
    {
        wxSwap(m_size, v.m_size);
        wxSwap(m_capacity, v.m_capacity);
        wxSwap(m_values, v.m_values);
    }

    void clear()
    {

        for ( size_type i = 0; i < m_size; i++ )
        {
            m_values[i].~T();
        }

        Ops::Free(m_values);
        m_values = __null;
        m_size =
        m_capacity = 0;
    }

    void reserve(size_type n)
    {
        if ( n <= m_capacity )
            return;






        const size_type increment = m_size > 0
                                     ? m_size < ALLOC_MAX_SIZE
                                        ? m_size
                                        : (size_type)ALLOC_MAX_SIZE
                                     : (size_type)ALLOC_INITIAL_SIZE;
        if ( m_capacity + increment > n )
            n = m_capacity + increment;

        m_values = Ops::Realloc(m_values, n, m_size);
        m_capacity = n;
    }

    void resize(size_type n)
    {
        if ( n < m_size )
            Shrink(n);
        else if ( n > m_size )
            Extend(n, value_type());
    }

    void resize(size_type n, const value_type& v)
    {
        if ( n < m_size )
            Shrink(n);
        else if ( n > m_size )
            Extend(n, v);
    }

    size_type size() const
    {
        return m_size;
    }

    size_type capacity() const
    {
        return m_capacity;
    }

    bool empty() const
    {
        return size() == 0;
    }

    wxVector& operator=(const wxVector& vb)
    {
        if (this != &vb)
        {
            clear();
            Copy(vb);
        }
        return *this;
    }

    void push_back(const value_type& v)
    {
        reserve(size() + 1);



        void* const place = m_values + m_size;
        ::new(place) value_type(v);





        m_size++;
    }

    void pop_back()
    {
        erase(end() - 1);
    }

    const value_type& at(size_type idx) const
    {
        do { if ( wxTheAssertHandler && !(idx < m_size) && (wxOnAssert("/usr/local/include/wx-3.0/wx/vector.h", 398, __FUNCTION__, "idx < m_size", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
        return m_values[idx];
    }

    value_type& at(size_type idx)
    {
        do { if ( wxTheAssertHandler && !(idx < m_size) && (wxOnAssert("/usr/local/include/wx-3.0/wx/vector.h", 404, __FUNCTION__, "idx < m_size", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
        return m_values[idx];
    }

    const value_type& operator[](size_type idx) const { return at(idx); }
    value_type& operator[](size_type idx) { return at(idx); }
    const value_type& front() const { return at(0); }
    value_type& front() { return at(0); }
    const value_type& back() const { return at(size() - 1); }
    value_type& back() { return at(size() - 1); }

    const_iterator begin() const { return m_values; }
    iterator begin() { return m_values; }
    const_iterator end() const { return m_values + size(); }
    iterator end() { return m_values + size(); }

    reverse_iterator rbegin() { return reverse_iterator(end() - 1); }
    reverse_iterator rend() { return reverse_iterator(begin() - 1); }

    const_reverse_iterator rbegin() const { return const_reverse_iterator(end() - 1); }
    const_reverse_iterator rend() const { return const_reverse_iterator(begin() - 1); }

    iterator insert(iterator it, const value_type& v = value_type())
    {


        const size_t idx = it - begin();
        const size_t after = end() - it;

        reserve(size() + 1);


        value_type * const place = m_values + idx;



        if ( after > 0 )
            Ops::MemmoveForward(place + 1, place, after);



        wxScopeGuard moveBack = wxMakeGuard(
                Ops::MemmoveBackward, place, place + 1, after);
        if ( !after )
            moveBack.Dismiss();



        ::new(place) value_type(v);



        moveBack.Dismiss();
        m_size++;

        return begin() + idx;
    }

    iterator erase(iterator it)
    {
        return erase(it, it + 1);
    }

    iterator erase(iterator first, iterator last)
    {
        if ( first == last )
            return first;
        do { if ( wxTheAssertHandler && !(first < end() && last <= end()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/vector.h", 471, __FUNCTION__, "first < end() && last <= end()", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );

        const size_type idx = first - begin();
        const size_type count = last - first;
        const size_type after = end() - last;


        for ( iterator i = first; i < last; ++i )
            i->~T();


        if ( after > 0 )
        {
            Ops::MemmoveBackward(m_values + idx, m_values + idx + count, after);
        }

        m_size -= count;

        return begin() + idx;
    }





private:

    enum { ALLOC_INITIAL_SIZE = 16 };
    enum { ALLOC_MAX_SIZE = 4096 };

    void Copy(const wxVector& vb)
    {
        reserve(vb.size());

        for ( const_iterator i = vb.begin(); i != vb.end(); ++i )
            push_back(*i);
    }

private:
    void Shrink(size_type n)
    {
        for ( size_type i = n; i < m_size; i++ )
            m_values[i].~T();
        m_size = n;
    }

    void Extend(size_type n, const value_type& v)
    {
        reserve(n);
        for ( size_type i = m_size; i < n; i++ )
            push_back(v);
    }

    size_type m_size,
              m_capacity;
    value_type *m_values;
};
# 540 "/usr/local/include/wx-3.0/wx/vector.h"
namespace wxPrivate
{



template<typename T>
struct wxVectorComparator
{
    static int
    Compare(const void* pitem1, const void* pitem2, const void* )
    {
        const T& item1 = *reinterpret_cast<const T*>(pitem1);
        const T& item2 = *reinterpret_cast<const T*>(pitem2);

        if (item1 < item2)
            return -1;
        else if (item2 < item1)
            return 1;
        else
            return 0;
    }
};

}



template<typename T>
void wxVectorSort(wxVector<T>& v)
{
    wxQsort(v.begin(), v.size(), sizeof(T),
            wxPrivate::wxVectorComparator<T>::Compare, __null);
}
# 35 "/usr/local/include/wx-3.0/wx/list.h" 2
# 48 "/usr/local/include/wx-3.0/wx/list.h"
class wxObjectListNode;
typedef wxObjectListNode wxNode;
# 360 "/usr/local/include/wx-3.0/wx/list.h"
union wxListKeyValue
{
    long integer;
    wxString *string;
};







class wxListKey
{
public:

    wxListKey() : m_keyType(wxKEY_NONE)
        { }
    wxListKey(long i) : m_keyType(wxKEY_INTEGER)
        { m_key.integer = i; }
    wxListKey(const wxString& s) : m_keyType(wxKEY_STRING)
        { m_key.string = new wxString(s); }
    wxListKey(const char *s) : m_keyType(wxKEY_STRING)
        { m_key.string = new wxString(s); }
    wxListKey(const wchar_t *s) : m_keyType(wxKEY_STRING)
        { m_key.string = new wxString(s); }


    wxKeyType GetKeyType() const { return m_keyType; }
    const wxString GetString() const
        { do { if ( wxTheAssertHandler && !(m_keyType == wxKEY_STRING) && (wxOnAssert("/usr/local/include/wx-3.0/wx/list.h", 390, __FUNCTION__, "m_keyType == wxKEY_STRING", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return *m_key.string; }
    long GetNumber() const
        { do { if ( wxTheAssertHandler && !(m_keyType == wxKEY_INTEGER) && (wxOnAssert("/usr/local/include/wx-3.0/wx/list.h", 392, __FUNCTION__, "m_keyType == wxKEY_INTEGER", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return m_key.integer; }




    bool operator==(wxListKeyValue value) const ;


    ~wxListKey()
    {
        if ( m_keyType == wxKEY_STRING )
            delete m_key.string;
    }

private:
    wxKeyType m_keyType;
    wxListKeyValue m_key;
};





extern wxListKey wxDefaultListKey;

class wxListBase;

class wxNodeBase
{
friend class wxListBase;
public:

    wxNodeBase(wxListBase *list = __null,
               wxNodeBase *previous = __null,
               wxNodeBase *next = __null,
               void *data = __null,
               const wxListKey& key = wxDefaultListKey);

    virtual ~wxNodeBase();


    wxString GetKeyString() const { return *m_key.string; }
    long GetKeyInteger() const { return m_key.integer; }


    void SetKeyString(const wxString& s) { m_key.string = new wxString(s); }
    void SetKeyInteger(long i) { m_key.integer = i; }



    __attribute__((deprecated)) wxNode *Next() const;
    __attribute__((deprecated)) wxNode *Previous() const;
    __attribute__((deprecated)) wxObject *Data() const;


protected:

    wxNodeBase *GetNext() const { return m_next; }
    wxNodeBase *GetPrevious() const { return m_previous; }

    void *GetData() const { return m_data; }
    void SetData(void *data) { m_data = data; }


    int IndexOf() const;

    virtual void DeleteData() { }
public:

    void** GetDataPtr() const { return &(const_cast<wxNodeBase*>(this)->m_data); }
private:

    wxListKeyValue m_key;

    void *m_data;
    wxNodeBase *m_next,
                *m_previous;

    wxListBase *m_list;

    private: wxNodeBase(const wxNodeBase&); wxNodeBase& operator=(const wxNodeBase&);
};





class wxList;

class wxListBase
{
friend class wxNodeBase;
friend class wxHashTableBase;

public:

    wxListBase(wxKeyType keyType = wxKEY_NONE)
        { Init(keyType); }
    virtual ~wxListBase();



    size_t GetCount() const { return m_count; }


    bool IsEmpty() const { return m_count == 0; }




    void Clear();


    void DeleteContents(bool destroy) { m_destroy = destroy; }


    bool GetDeleteContents() const
        { return m_destroy; }


    wxKeyType GetKeyType() const
        { return m_keyType; }


    void SetKeyType(wxKeyType keyType)
        { do { if ( wxTheAssertHandler && !(m_count==0) && (wxOnAssert("/usr/local/include/wx-3.0/wx/list.h", 517, __FUNCTION__, "m_count==0", (const char*)__null), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); m_keyType = keyType; }



    __attribute__((deprecated)) int Number() const;
    __attribute__((deprecated)) wxNode *First() const;
    __attribute__((deprecated)) wxNode *Last() const;
    __attribute__((deprecated)) wxNode *Nth(size_t n) const;


    __attribute__((deprecated)) operator wxList&() const;


protected:





    virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next,
                                   void *data,
                                   const wxListKey& key = wxDefaultListKey) = 0;




    wxListBase(size_t count, void *elements[]);

    wxListBase(void *object, ... );

protected:
    void Assign(const wxListBase& list)
        { Clear(); DoCopy(list); }


    wxNodeBase *GetFirst() const { return m_nodeFirst; }
    wxNodeBase *GetLast() const { return m_nodeLast; }


    wxNodeBase *Item(size_t index) const;


    void *operator[](size_t n) const
    {
        wxNodeBase *node = Item(n);

        return node ? node->GetData() : __null;
    }



    wxNodeBase *Prepend(void *object)
        { return (wxNodeBase *)wxListBase::Insert(object); }

    wxNodeBase *Append(void *object);

    wxNodeBase *Insert(void *object)
        { return Insert(static_cast<wxNodeBase *>(__null), object); }

    wxNodeBase *Insert(size_t pos, void *object)
        { return pos == GetCount() ? Append(object)
                                   : Insert(Item(pos), object); }

    wxNodeBase *Insert(wxNodeBase *prev, void *object);


    wxNodeBase *Append(long key, void *object);
    wxNodeBase *Append(const wxString& key, void *object);



    wxNodeBase *DetachNode(wxNodeBase *node);

    bool DeleteNode(wxNodeBase *node);


    bool DeleteObject(void *object);



    wxNodeBase *Find(const void *object) const;


    wxNodeBase *Find(const wxListKey& key) const;


    int IndexOf( void *object ) const;



    void Sort(const wxSortCompareFunction compfunc);


    void *FirstThat(wxListIterateFunction func);
    void ForEach(wxListIterateFunction func);
    void *LastThat(wxListIterateFunction func);



    void Reverse();
    void DeleteNodes(wxNodeBase* first, wxNodeBase* last);
private:


    void Init(wxKeyType keyType = wxKEY_NONE);



    void DoCopy(const wxListBase& list);

    wxNodeBase *AppendCommon(wxNodeBase *node);

    void DoDeleteNode(wxNodeBase *node);

    size_t m_count;
    bool m_destroy;
    wxNodeBase *m_nodeFirst,
               *m_nodeLast;

    wxKeyType m_keyType;
};
# 1172 "/usr/local/include/wx-3.0/wx/list.h"
inline wxNode *wxNodeBase::Next() const { return (wxNode *)GetNext(); }
inline wxNode *wxNodeBase::Previous() const { return (wxNode *)GetPrevious(); }
inline wxObject *wxNodeBase::Data() const { return (wxObject *)GetData(); }





inline int wxListBase::Number() const { return (int)GetCount(); }
inline wxNode *wxListBase::First() const { return (wxNode *)GetFirst(); }
inline wxNode *wxListBase::Last() const { return (wxNode *)GetLast(); }
inline wxNode *wxListBase::Nth(size_t n) const { return (wxNode *)Item(n); }
inline wxListBase::operator wxList&() const { return *(wxList*)this; }
# 1195 "/usr/local/include/wx-3.0/wx/list.h"
typedef int (*wxSortFuncFor_wxObjectList)(const wxObject **, const wxObject **); class wxObjectListNode : public wxNodeBase { public: wxObjectListNode(wxListBase *list = __null, wxObjectListNode *previous = __null, wxObjectListNode *next = __null, wxObject *data = __null, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxObjectListNode *GetNext() const { return (wxObjectListNode *)wxNodeBase::GetNext(); } wxObjectListNode *GetPrevious() const { return (wxObjectListNode *)wxNodeBase::GetPrevious(); } wxObject *GetData() const { return (wxObject *)wxNodeBase::GetData(); } void SetData(wxObject *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData(); private: wxObjectListNode(const wxObjectListNode&); wxObjectListNode& operator=(const wxObjectListNode&); }; class wxObjectList : public wxListBase { public: typedef wxObjectListNode Node; class compatibility_iterator { public: compatibility_iterator(Node *ptr = __null) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxObjectList(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxObjectList(const wxObjectList& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxObjectList(size_t count, wxObject *elements[]) : wxListBase(count, (void **)elements) { } wxObjectList& operator=(const wxObjectList& list) { if (&list != this) Assign(list); return *this; } wxObjectListNode *GetFirst() const { return (wxObjectListNode *)wxListBase::GetFirst(); } wxObjectListNode *GetLast() const { return (wxObjectListNode *)wxListBase::GetLast(); } wxObjectListNode *Item(size_t index) const { return (wxObjectListNode *)wxListBase::Item(index); } wxObject *operator[](size_t index) const { wxObjectListNode *node = Item(index); return node ? (wxObject*)(node->GetData()) : __null; } wxObjectListNode *Append(wxObject *object) { return (wxObjectListNode *)wxListBase::Append(object); } wxObjectListNode *Insert(wxObject *object) { return (wxObjectListNode *)Insert(static_cast<wxObjectListNode *>(__null), object); } wxObjectListNode *Insert(size_t pos, wxObject *object) { return (wxObjectListNode *)wxListBase::Insert(pos, object); } wxObjectListNode *Insert(wxObjectListNode *prev, wxObject *object) { return (wxObjectListNode *)wxListBase::Insert(prev, object); } wxObjectListNode *Append(long key, void *object) { return (wxObjectListNode *)wxListBase::Append(key, object); } wxObjectListNode *Append(const wxChar *key, void *object) { return (wxObjectListNode *)wxListBase::Append(key, object); } wxObjectListNode *DetachNode(wxObjectListNode *node) { return (wxObjectListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxObjectListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxObject *object) { return wxListBase::DeleteObject(object); } void Erase(wxObjectListNode *it) { DeleteNode(it); } wxObjectListNode *Find(const wxObject *object) const { return (wxObjectListNode *)wxListBase::Find(object); } virtual wxObjectListNode *Find(const wxListKey& key) const { return (wxObjectListNode *)wxListBase::Find(key); } bool Member(const wxObject *object) const { return Find(object) != __null; } int IndexOf(wxObject *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxObjectList func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) { return new wxObjectListNode(this, (wxObjectListNode *)prev, (wxObjectListNode *)next, (wxObject *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxObject* value_type; typedef wxObject* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class iterator { typedef wxObjectList list; public: typedef wxObjectListNode Node; typedef iterator itor; typedef wxObject* value_type; typedef value_type* ptr_type; typedef value_type& reference; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef ptr_type pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(__null), m_init(__null) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( wxTheAssertHandler && !(m_node) && (wxOnAssert("/usr/local/include/wx-3.0/wx/list.h", 1196, __FUNCTION__, "m_node", "uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( wxTheAssertHandler && !(m_node) && (wxOnAssert("/usr/local/include/wx-3.0/wx/list.h", 1196, __FUNCTION__, "m_node", "uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class const_iterator { typedef wxObjectList list; public: typedef wxObjectListNode Node; typedef wxObject* value_type; typedef const value_type& const_reference; typedef const_iterator itor; typedef value_type* ptr_type; Node* m_node; Node* m_init; public: typedef const_reference reference_type; typedef const ptr_type pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(__null), m_init(__null) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( wxTheAssertHandler && !(m_node) && (wxOnAssert("/usr/local/include/wx-3.0/wx/list.h", 1196, __FUNCTION__, "m_node", "uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( wxTheAssertHandler && !(m_node) && (wxOnAssert("/usr/local/include/wx-3.0/wx/list.h", 1196, __FUNCTION__, "m_node", "uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class reverse_iterator { typedef wxObjectList list; public: typedef wxObjectListNode Node; typedef wxObject* value_type; typedef reverse_iterator itor; typedef value_type* ptr_type; typedef value_type& reference; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef ptr_type pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(__null), m_init(__null) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class const_reverse_iterator { typedef wxObjectList list; public: typedef wxObjectListNode Node; typedef wxObject* value_type; typedef const_reverse_iterator itor; typedef value_type* ptr_type; typedef const value_type& const_reference; Node* m_node; Node* m_init; public: typedef const_reference reference_type; typedef const ptr_type pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(__null), m_init(__null) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; wxObjectList(size_type n, const_reference v = value_type()) { assign(n, v); } wxObjectList(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(__null, GetLast()); } const_iterator end() const { return const_iterator(__null, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(__null, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(__null, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 2147483647; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxObjectList& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxObjectList& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxObjectList& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };


class wxList : public wxObjectList
{
public:




    wxList(int key_type = wxKEY_NONE);



   ~wxList() { }


    wxList& operator=(const wxList& list)
        { if (&list != this) Assign(list); return *this; }


    void Sort(wxSortCompareFunction compfunc) { wxListBase::Sort(compfunc); }



    template<typename T>
    wxVector<T> AsVector() const
    {
        wxVector<T> vector(size());
        size_t i = 0;

        for ( const_iterator it = begin(); it != end(); ++it )
        {
            vector[i++] = static_cast<T>(*it);
        }

        return vector;
    }


};






typedef int (*wxSortFuncFor_wxStringListBase)(const wxChar **, const wxChar **); class wxStringListNode : public wxNodeBase { public: wxStringListNode(wxListBase *list = __null, wxStringListNode *previous = __null, wxStringListNode *next = __null, wxChar *data = __null, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxStringListNode *GetNext() const { return (wxStringListNode *)wxNodeBase::GetNext(); } wxStringListNode *GetPrevious() const { return (wxStringListNode *)wxNodeBase::GetPrevious(); } wxChar *GetData() const { return (wxChar *)wxNodeBase::GetData(); } void SetData(wxChar *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData(); private: wxStringListNode(const wxStringListNode&); wxStringListNode& operator=(const wxStringListNode&); }; class wxStringListBase : public wxListBase { public: typedef wxStringListNode Node; class compatibility_iterator { public: compatibility_iterator(Node *ptr = __null) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxStringListBase(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxStringListBase(const wxStringListBase& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxStringListBase(size_t count, wxChar *elements[]) : wxListBase(count, (void **)elements) { } wxStringListBase& operator=(const wxStringListBase& list) { if (&list != this) Assign(list); return *this; } wxStringListNode *GetFirst() const { return (wxStringListNode *)wxListBase::GetFirst(); } wxStringListNode *GetLast() const { return (wxStringListNode *)wxListBase::GetLast(); } wxStringListNode *Item(size_t index) const { return (wxStringListNode *)wxListBase::Item(index); } wxChar *operator[](size_t index) const { wxStringListNode *node = Item(index); return node ? (wxChar*)(node->GetData()) : __null; } wxStringListNode *Append(wxChar *object) { return (wxStringListNode *)wxListBase::Append(object); } wxStringListNode *Insert(wxChar *object) { return (wxStringListNode *)Insert(static_cast<wxStringListNode *>(__null), object); } wxStringListNode *Insert(size_t pos, wxChar *object) { return (wxStringListNode *)wxListBase::Insert(pos, object); } wxStringListNode *Insert(wxStringListNode *prev, wxChar *object) { return (wxStringListNode *)wxListBase::Insert(prev, object); } wxStringListNode *Append(long key, void *object) { return (wxStringListNode *)wxListBase::Append(key, object); } wxStringListNode *Append(const wxChar *key, void *object) { return (wxStringListNode *)wxListBase::Append(key, object); } wxStringListNode *DetachNode(wxStringListNode *node) { return (wxStringListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxStringListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxChar *object) { return wxListBase::DeleteObject(object); } void Erase(wxStringListNode *it) { DeleteNode(it); } wxStringListNode *Find(const wxChar *object) const { return (wxStringListNode *)wxListBase::Find(object); } virtual wxStringListNode *Find(const wxListKey& key) const { return (wxStringListNode *)wxListBase::Find(key); } bool Member(const wxChar *object) const { return Find(object) != __null; } int IndexOf(wxChar *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxStringListBase func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) { return new wxStringListNode(this, (wxStringListNode *)prev, (wxStringListNode *)next, (wxChar *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxChar* value_type; typedef wxChar* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class iterator { typedef wxStringListBase list; public: typedef wxStringListNode Node; typedef iterator itor; typedef wxChar* value_type; typedef value_type* ptr_type; typedef value_type& reference; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef ptr_type pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(__null), m_init(__null) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( wxTheAssertHandler && !(m_node) && (wxOnAssert("/usr/local/include/wx-3.0/wx/list.h", 1242, __FUNCTION__, "m_node", "uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( wxTheAssertHandler && !(m_node) && (wxOnAssert("/usr/local/include/wx-3.0/wx/list.h", 1242, __FUNCTION__, "m_node", "uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class const_iterator { typedef wxStringListBase list; public: typedef wxStringListNode Node; typedef wxChar* value_type; typedef const value_type& const_reference; typedef const_iterator itor; typedef value_type* ptr_type; Node* m_node; Node* m_init; public: typedef const_reference reference_type; typedef const ptr_type pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(__null), m_init(__null) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( wxTheAssertHandler && !(m_node) && (wxOnAssert("/usr/local/include/wx-3.0/wx/list.h", 1242, __FUNCTION__, "m_node", "uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( wxTheAssertHandler && !(m_node) && (wxOnAssert("/usr/local/include/wx-3.0/wx/list.h", 1242, __FUNCTION__, "m_node", "uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class reverse_iterator { typedef wxStringListBase list; public: typedef wxStringListNode Node; typedef wxChar* value_type; typedef reverse_iterator itor; typedef value_type* ptr_type; typedef value_type& reference; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef ptr_type pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(__null), m_init(__null) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class const_reverse_iterator { typedef wxStringListBase list; public: typedef wxStringListNode Node; typedef wxChar* value_type; typedef const_reverse_iterator itor; typedef value_type* ptr_type; typedef const value_type& const_reference; Node* m_node; Node* m_init; public: typedef const_reference reference_type; typedef const ptr_type pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(__null), m_init(__null) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; wxStringListBase(size_type n, const_reference v = value_type()) { assign(n, v); } wxStringListBase(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(__null, GetLast()); } const_iterator end() const { return const_iterator(__null, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(__null, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(__null, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 2147483647; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxStringListBase& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxStringListBase& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxStringListBase& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };

class wxStringList : public wxStringListBase
{
public:






    wxStringList();
    wxStringList(const wxChar *first ...);




    wxStringList(const wxStringList& other) : wxStringListBase() { DeleteContents(true); DoCopy(other); }
    wxStringList& operator=(const wxStringList& other)
    {
        if (&other != this)
        {
            Clear();
            DoCopy(other);
        }
        return *this;
    }



    wxNode *Add(const wxChar *s);


    wxNode *Prepend(const wxChar *s);

    bool Delete(const wxChar *s);

    wxChar **ListToArray(bool new_copies = false) const;
    bool Member(const wxChar *s) const;


    void Sort();

private:
    void DoCopy(const wxStringList&);
};
# 18 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 1 "/usr/local/include/wx-3.0/wx/hash.h" 1
# 33 "/usr/local/include/wx-3.0/wx/hash.h"
union wxHashKeyValue
{
    long integer;
    wxString *string;
};



class wxHashTableBase;

class wxHashTableBase_Node
{
    friend class wxHashTableBase;
    typedef class wxHashTableBase_Node _Node;
public:
    wxHashTableBase_Node( long key, void* value,
                          wxHashTableBase* table );
    wxHashTableBase_Node( const wxString& key, void* value,
                          wxHashTableBase* table );
    ~wxHashTableBase_Node();

    long GetKeyInteger() const { return m_key.integer; }
    const wxString& GetKeyString() const { return *m_key.string; }

    void* GetData() const { return m_value; }
    void SetData( void* data ) { m_value = data; }

protected:
    _Node* GetNext() const { return m_next; }

protected:

    wxHashTableBase_Node* m_next;


    wxHashKeyValue m_key;


    void* m_value;






    wxHashTableBase* m_hashPtr;
};

class wxHashTableBase

    : public wxObject

{
    friend class wxHashTableBase_Node;
public:
    typedef wxHashTableBase_Node Node;

    wxHashTableBase();
    virtual ~wxHashTableBase() { }

    void Create( wxKeyType keyType = wxKEY_INTEGER,
                 size_t size = (1000) );
    void Clear();
    void Destroy();

    size_t GetSize() const { return m_size; }
    size_t GetCount() const { return m_count; }

    void DeleteContents( bool flag ) { m_deleteContents = flag; }

    static long MakeKey(const wxString& string);

protected:
    void DoPut( long key, long hash, void* data );
    void DoPut( const wxString& key, long hash, void* data );
    void* DoGet( long key, long hash ) const;
    void* DoGet( const wxString& key, long hash ) const;
    void* DoDelete( long key, long hash );
    void* DoDelete( const wxString& key, long hash );

private:


    void DoRemoveNode( wxHashTableBase_Node* node );




    void DoDestroyNode( wxHashTableBase_Node* node );


    void DoInsertNode( size_t bucket, wxHashTableBase_Node* node );



    void DoUnlinkNode( size_t bucket, wxHashTableBase_Node* node,
                       wxHashTableBase_Node* prev );



    virtual void DoDeleteContents( wxHashTableBase_Node* node ) = 0;

protected:

    size_t m_size;


    size_t m_count;


    Node** m_table;


    wxKeyType m_keyType;


    bool m_deleteContents;

private:
    private: wxHashTableBase(const wxHashTableBase&); wxHashTableBase& operator=(const wxHashTableBase&);
};





class wxHashTable_Node : public wxHashTableBase_Node
{
    friend class wxHashTable;
public:
    wxHashTable_Node( long key, void* value,
                      wxHashTableBase* table )
        : wxHashTableBase_Node( key, value, table ) { }
    wxHashTable_Node( const wxString& key, void* value,
                      wxHashTableBase* table )
        : wxHashTableBase_Node( key, value, table ) { }

    wxObject* GetData() const
        { return (wxObject*)wxHashTableBase_Node::GetData(); }
    void SetData( wxObject* data )
        { wxHashTableBase_Node::SetData( data ); }

    wxHashTable_Node* GetNext() const
        { return (wxHashTable_Node*)wxHashTableBase_Node::GetNext(); }
};



class wxHashTable : public wxHashTableBase
{
    typedef wxHashTableBase hash;
public:
    typedef wxHashTable_Node Node;
    typedef wxHashTable_Node* compatibility_iterator;
public:
    wxHashTable( wxKeyType keyType = wxKEY_INTEGER,
                 size_t size = (1000) )
        : wxHashTableBase() { Create( keyType, size ); BeginFind(); }
    wxHashTable( const wxHashTable& table );

    virtual ~wxHashTable() { Destroy(); }

    const wxHashTable& operator=( const wxHashTable& );


    void Put(long value, wxObject *object)
        { DoPut( value, value, object ); }
    void Put(long lhash, long value, wxObject *object)
        { DoPut( value, lhash, object ); }
    void Put(const wxString& value, wxObject *object)
        { DoPut( value, MakeKey( value ), object ); }
    void Put(long lhash, const wxString& value, wxObject *object)
        { DoPut( value, lhash, object ); }


    wxObject *Get(long value) const
        { return (wxObject*)DoGet( value, value ); }
    wxObject *Get(long lhash, long value) const
        { return (wxObject*)DoGet( value, lhash ); }
    wxObject *Get(const wxString& value) const
        { return (wxObject*)DoGet( value, MakeKey( value ) ); }
    wxObject *Get(long lhash, const wxString& value) const
        { return (wxObject*)DoGet( value, lhash ); }


    wxObject *Delete(long key)
        { return (wxObject*)DoDelete( key, key ); }
    wxObject *Delete(long lhash, long key)
        { return (wxObject*)DoDelete( key, lhash ); }
    wxObject *Delete(const wxString& key)
        { return (wxObject*)DoDelete( key, MakeKey( key ) ); }
    wxObject *Delete(long lhash, const wxString& key)
        { return (wxObject*)DoDelete( key, lhash ); }




    void BeginFind() { m_curr = __null; m_currBucket = 0; }
    Node* Next();

    void Clear() { wxHashTableBase::Clear(); }

    size_t GetCount() const { return wxHashTableBase::GetCount(); }
protected:

    void DoCopy( const wxHashTable& copy );



    void GetNextNode( size_t bucketStart );
private:
    virtual void DoDeleteContents( wxHashTableBase_Node* node );


    Node* m_curr;


    size_t m_currBucket;
};
# 19 "/usr/local/include/wx-3.0/wx/wx.h" 2

# 1 "/usr/local/include/wx-3.0/wx/hashmap.h" 1
# 15 "/usr/local/include/wx-3.0/wx/hashmap.h"
# 1 "/usr/local/include/wx-3.0/wx/wxcrt.h" 1
# 30 "/usr/local/include/wx-3.0/wx/wxcrt.h"
inline bool wxIsEmpty(const char *s) { return !s || !*s; }
inline bool wxIsEmpty(const wchar_t *s) { return !s || !*s; }
inline bool wxIsEmpty(const wxScopedCharBuffer& s) { return wxIsEmpty(s.data()); }
inline bool wxIsEmpty(const wxScopedWCharBuffer& s) { return wxIsEmpty(s.data()); }
inline bool wxIsEmpty(const wxString& s) { return s.empty(); }
inline bool wxIsEmpty(const wxCStrData& s) { return s.AsString().empty(); }






                 size_t wxMB2WC(wchar_t *buf, const char *psz, size_t n);
                 size_t wxWC2MB(char *buf, const wchar_t *psz, size_t n);
# 112 "/usr/local/include/wx-3.0/wx/wxcrt.h"
inline char* wxTmemchr(const char* s, char c, size_t len)
    { return (char*)memchr(s, c, len); }
inline int wxTmemcmp(const char* sz1, const char* sz2, size_t len)
    { return memcmp(sz1, sz2, len); }
inline char* wxTmemcpy(char* szOut, const char* szIn, size_t len)
    { return (char*)memcpy(szOut, szIn, len); }
inline char* wxTmemmove(char* szOut, const char* szIn, size_t len)
    { return (char*)memmove(szOut, szIn, len); }
inline char* wxTmemset(char* szOut, const char cIn, size_t len)
    { return (char*)memset(szOut, cIn, len); }
# 149 "/usr/local/include/wx-3.0/wx/wxcrt.h"
                 char* wxSetlocale(int category, const char *locale);
inline char* wxSetlocale(int category, const wxScopedCharBuffer& locale)
    { return wxSetlocale(category, locale.data()); }
inline char* wxSetlocale(int category, const wxString& locale)
    { return wxSetlocale(category, locale.mb_str()); }
inline char* wxSetlocale(int category, const wxCStrData& locale)
    { return wxSetlocale(category, locale.AsCharBuf()); }
# 165 "/usr/local/include/wx-3.0/wx/wxcrt.h"
inline size_t wxStrlen(const wxScopedCharBuffer& s) { return wxStrlen(s.data()); }
inline size_t wxStrlen(const wxScopedWCharBuffer& s) { return wxStrlen(s.data()); }
inline size_t wxStrlen(const wxString& s) { return s.length(); }
inline size_t wxStrlen(const wxCStrData& s) { return s.AsString().length(); }




inline size_t wxStrnlen(const char *str, size_t maxlen) { return strnlen(str, maxlen); }
# 187 "/usr/local/include/wx-3.0/wx/wxcrt.h"
inline size_t wxStrnlen(const wchar_t *str, size_t maxlen) { return wcsnlen(str, maxlen); }
# 203 "/usr/local/include/wx-3.0/wx/wxcrt.h"
inline char* wxStrdup(const wxScopedCharBuffer& s) { return wxStrdup(s.data()); }
inline wchar_t* wxStrdup(const wxScopedWCharBuffer& s) { return wxStrdup(s.data()); }
inline char* wxStrdup(const wxString& s) { return wxStrdup(s.mb_str()); }
inline char* wxStrdup(const wxCStrData& s) { return wxStrdup(s.AsCharBuf()); }

inline char *wxStrcpy(char *dest, const char *src)
    { return strcpy(dest, src); }
inline wchar_t *wxStrcpy(wchar_t *dest, const wchar_t *src)
    { return wcscpy(dest, src); }
inline char *wxStrcpy(char *dest, const wxString& src)
    { return strcpy(dest, src.mb_str()); }
inline char *wxStrcpy(char *dest, const wxCStrData& src)
    { return strcpy(dest, src.AsCharBuf()); }
inline char *wxStrcpy(char *dest, const wxScopedCharBuffer& src)
    { return strcpy(dest, src.data()); }
inline wchar_t *wxStrcpy(wchar_t *dest, const wxString& src)
    { return wcscpy(dest, src.wc_str()); }
inline wchar_t *wxStrcpy(wchar_t *dest, const wxCStrData& src)
    { return wcscpy(dest, src.AsWCharBuf()); }
inline wchar_t *wxStrcpy(wchar_t *dest, const wxScopedWCharBuffer& src)
    { return wcscpy(dest, src.data()); }
inline char *wxStrcpy(char *dest, const wchar_t *src)
    { return strcpy(dest, wxGet_wxConvLibc().cWC2MB(src)); }
inline wchar_t *wxStrcpy(wchar_t *dest, const char *src)
    { return wcscpy(dest, wxGet_wxConvLibc().cMB2WC(src)); }

inline char *wxStrncpy(char *dest, const char *src, size_t n)
    { return strncpy(dest, src, n); }
inline wchar_t *wxStrncpy(wchar_t *dest, const wchar_t *src, size_t n)
    { return wcsncpy(dest, src, n); }
inline char *wxStrncpy(char *dest, const wxString& src, size_t n)
    { return strncpy(dest, src.mb_str(), n); }
inline char *wxStrncpy(char *dest, const wxCStrData& src, size_t n)
    { return strncpy(dest, src.AsCharBuf(), n); }
inline char *wxStrncpy(char *dest, const wxScopedCharBuffer& src, size_t n)
    { return strncpy(dest, src.data(), n); }
inline wchar_t *wxStrncpy(wchar_t *dest, const wxString& src, size_t n)
    { return wcsncpy(dest, src.wc_str(), n); }
inline wchar_t *wxStrncpy(wchar_t *dest, const wxCStrData& src, size_t n)
    { return wcsncpy(dest, src.AsWCharBuf(), n); }
inline wchar_t *wxStrncpy(wchar_t *dest, const wxScopedWCharBuffer& src, size_t n)
    { return wcsncpy(dest, src.data(), n); }
inline char *wxStrncpy(char *dest, const wchar_t *src, size_t n)
    { return strncpy(dest, wxGet_wxConvLibc().cWC2MB(src), n); }
inline wchar_t *wxStrncpy(wchar_t *dest, const char *src, size_t n)
    { return wcsncpy(dest, wxGet_wxConvLibc().cMB2WC(src), n); }



inline size_t wxStrlcpy(char *dest, const char *src, size_t n)
{
    const size_t len = strlen(src);

    if ( n )
    {
        if ( n-- > len )
            n = len;
        strncpy(dest, src, n);
        dest[n] = '\0';
    }

    return len;
}
inline size_t wxStrlcpy(wchar_t *dest, const wchar_t *src, size_t n)
{
    const size_t len = wxCRT_StrlenW(src);
    if ( n )
    {
        if ( n-- > len )
            n = len;
        wcsncpy(dest, src, n);
        dest[n] = L'\0';
    }

    return len;
}

inline char *wxStrcat(char *dest, const char *src)
    { return strcat(dest, src); }
inline wchar_t *wxStrcat(wchar_t *dest, const wchar_t *src)
    { return wcscat(dest, src); }
inline char *wxStrcat(char *dest, const wxString& src)
    { return strcat(dest, src.mb_str()); }
inline char *wxStrcat(char *dest, const wxCStrData& src)
    { return strcat(dest, src.AsCharBuf()); }
inline char *wxStrcat(char *dest, const wxScopedCharBuffer& src)
    { return strcat(dest, src.data()); }
inline wchar_t *wxStrcat(wchar_t *dest, const wxString& src)
    { return wcscat(dest, src.wc_str()); }
inline wchar_t *wxStrcat(wchar_t *dest, const wxCStrData& src)
    { return wcscat(dest, src.AsWCharBuf()); }
inline wchar_t *wxStrcat(wchar_t *dest, const wxScopedWCharBuffer& src)
    { return wcscat(dest, src.data()); }
inline char *wxStrcat(char *dest, const wchar_t *src)
    { return strcat(dest, wxGet_wxConvLibc().cWC2MB(src)); }
inline wchar_t *wxStrcat(wchar_t *dest, const char *src)
    { return wcscat(dest, wxGet_wxConvLibc().cMB2WC(src)); }

inline char *wxStrncat(char *dest, const char *src, size_t n)
    { return strncat(dest, src, n); }
inline wchar_t *wxStrncat(wchar_t *dest, const wchar_t *src, size_t n)
    { return wcsncat(dest, src, n); }
inline char *wxStrncat(char *dest, const wxString& src, size_t n)
    { return strncat(dest, src.mb_str(), n); }
inline char *wxStrncat(char *dest, const wxCStrData& src, size_t n)
    { return strncat(dest, src.AsCharBuf(), n); }
inline char *wxStrncat(char *dest, const wxScopedCharBuffer& src, size_t n)
    { return strncat(dest, src.data(), n); }
inline wchar_t *wxStrncat(wchar_t *dest, const wxString& src, size_t n)
    { return wcsncat(dest, src.wc_str(), n); }
inline wchar_t *wxStrncat(wchar_t *dest, const wxCStrData& src, size_t n)
    { return wcsncat(dest, src.AsWCharBuf(), n); }
inline wchar_t *wxStrncat(wchar_t *dest, const wxScopedWCharBuffer& src, size_t n)
    { return wcsncat(dest, src.data(), n); }
inline char *wxStrncat(char *dest, const wchar_t *src, size_t n)
    { return strncat(dest, wxGet_wxConvLibc().cWC2MB(src), n); }
inline wchar_t *wxStrncat(wchar_t *dest, const char *src, size_t n)
    { return wcsncat(dest, wxGet_wxConvLibc().cMB2WC(src), n); }
# 451 "/usr/local/include/wx-3.0/wx/wxcrt.h"
template<typename T>
inline int wxStrcmp_String(const wxString& s1, const T& s2)
    { return s1.compare(s2); }
inline int wxStrcmp(const char * s1, const char * s2) { return strcmp(s1, s2); } inline int wxStrcmp(const char * s1, const wchar_t * s2) { return wxStrcmp_String(wxString(s1), wxString(s2)); } inline int wxStrcmp(const char * s1, const wxScopedCharBuffer& s2) { return strcmp(s1, s2.data()); } inline int wxStrcmp(const char * s1, const wxScopedWCharBuffer& s2) { return wxStrcmp_String(wxString(s1), s2.data()); } inline int wxStrcmp(const wchar_t * s1, const wchar_t * s2) { return wcscmp(s1, s2); } inline int wxStrcmp(const wchar_t * s1, const char * s2) { return wxStrcmp_String(wxString(s1), wxString(s2)); } inline int wxStrcmp(const wchar_t * s1, const wxScopedWCharBuffer& s2) { return wcscmp(s1, s2.data()); } inline int wxStrcmp(const wchar_t * s1, const wxScopedCharBuffer& s2) { return wxStrcmp_String(wxString(s1), s2.data()); } inline int wxStrcmp(const wxScopedCharBuffer& s1, const char * s2) { return strcmp(s1.data(), s2); } inline int wxStrcmp(const wxScopedCharBuffer& s1, const wchar_t * s2) { return wxStrcmp_String(wxString(s1), wxString(s2)); } inline int wxStrcmp(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2) { return strcmp(s1.data(), s2.data()); } inline int wxStrcmp(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wxStrcmp_String(wxString(s1), wxString(s2)); } inline int wxStrcmp(const wxScopedWCharBuffer& s1, const wchar_t * s2) { return wcscmp(s1.data(), s2); } inline int wxStrcmp(const wxScopedWCharBuffer& s1, const char * s2) { return wxStrcmp_String(wxString(s1), wxString(s2)); } inline int wxStrcmp(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wcscmp(s1.data(), s2.data()); } inline int wxStrcmp(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2) { return wxStrcmp_String(wxString(s1), wxString(s2)); } inline int wxStrcmp(const wxString& s1, const char* s2) { return wxStrcmp_String(s1, s2); } inline int wxStrcmp(const wxString& s1, const wchar_t* s2) { return wxStrcmp_String(s1, s2); } inline int wxStrcmp(const wxString& s1, const wxScopedCharBuffer& s2) { return wxStrcmp_String(s1, s2); } inline int wxStrcmp(const wxString& s1, const wxScopedWCharBuffer& s2) { return wxStrcmp_String(s1, s2); } inline int wxStrcmp(const wxString& s1, const wxString& s2) { return wxStrcmp_String(s1, s2); } inline int wxStrcmp(const wxString& s1, const wxCStrData& s2) { return wxStrcmp_String(s1, s2); } inline int wxStrcmp(const wxCStrData& s1, const char* s2) { return wxStrcmp_String(s1.AsString(), s2); } inline int wxStrcmp(const wxCStrData& s1, const wchar_t* s2) { return wxStrcmp_String(s1.AsString(), s2); } inline int wxStrcmp(const wxCStrData& s1, const wxScopedCharBuffer& s2) { return wxStrcmp_String(s1.AsString(), s2); } inline int wxStrcmp(const wxCStrData& s1, const wxScopedWCharBuffer& s2) { return wxStrcmp_String(s1.AsString(), s2); } inline int wxStrcmp(const wxCStrData& s1, const wxString& s2) { return wxStrcmp_String(s1.AsString(), s2); } inline int wxStrcmp(const wxCStrData& s1, const wxCStrData& s2) { return wxStrcmp_String(s1.AsString(), s2); } inline int wxStrcmp(const char * s1, const wxCStrData& s2) { return -wxStrcmp_String(s2.AsString(), s1); } inline int wxStrcmp(const char * s1, const wxString& s2) { return -wxStrcmp_String(s2, s1); } inline int wxStrcmp(const wchar_t * s1, const wxCStrData& s2) { return -wxStrcmp_String(s2.AsString(), s1); } inline int wxStrcmp(const wchar_t * s1, const wxString& s2) { return -wxStrcmp_String(s2, s1); } inline int wxStrcmp(const wxScopedCharBuffer& s1, const wxCStrData& s2) { return -wxStrcmp_String(s2.AsString(), s1.data()); } inline int wxStrcmp(const wxScopedCharBuffer& s1, const wxString& s2) { return -wxStrcmp_String(s2, s1.data()); } inline int wxStrcmp(const wxScopedWCharBuffer& s1, const wxCStrData& s2) { return -wxStrcmp_String(s2.AsString(), s1.data()); } inline int wxStrcmp(const wxScopedWCharBuffer& s1, const wxString& s2) { return -wxStrcmp_String(s2, s1.data()); }

template<typename T>
inline int wxStricmp_String(const wxString& s1, const T& s2)
    { return s1.CmpNoCase(s2); }
inline int wxStricmp(const char * s1, const char * s2) { return strcasecmp(s1, s2); } inline int wxStricmp(const char * s1, const wchar_t * s2) { return wxStricmp_String(wxString(s1), wxString(s2)); } inline int wxStricmp(const char * s1, const wxScopedCharBuffer& s2) { return strcasecmp(s1, s2.data()); } inline int wxStricmp(const char * s1, const wxScopedWCharBuffer& s2) { return wxStricmp_String(wxString(s1), s2.data()); } inline int wxStricmp(const wchar_t * s1, const wchar_t * s2) { return wcscasecmp(s1, s2); } inline int wxStricmp(const wchar_t * s1, const char * s2) { return wxStricmp_String(wxString(s1), wxString(s2)); } inline int wxStricmp(const wchar_t * s1, const wxScopedWCharBuffer& s2) { return wcscasecmp(s1, s2.data()); } inline int wxStricmp(const wchar_t * s1, const wxScopedCharBuffer& s2) { return wxStricmp_String(wxString(s1), s2.data()); } inline int wxStricmp(const wxScopedCharBuffer& s1, const char * s2) { return strcasecmp(s1.data(), s2); } inline int wxStricmp(const wxScopedCharBuffer& s1, const wchar_t * s2) { return wxStricmp_String(wxString(s1), wxString(s2)); } inline int wxStricmp(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2) { return strcasecmp(s1.data(), s2.data()); } inline int wxStricmp(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wxStricmp_String(wxString(s1), wxString(s2)); } inline int wxStricmp(const wxScopedWCharBuffer& s1, const wchar_t * s2) { return wcscasecmp(s1.data(), s2); } inline int wxStricmp(const wxScopedWCharBuffer& s1, const char * s2) { return wxStricmp_String(wxString(s1), wxString(s2)); } inline int wxStricmp(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wcscasecmp(s1.data(), s2.data()); } inline int wxStricmp(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2) { return wxStricmp_String(wxString(s1), wxString(s2)); } inline int wxStricmp(const wxString& s1, const char* s2) { return wxStricmp_String(s1, s2); } inline int wxStricmp(const wxString& s1, const wchar_t* s2) { return wxStricmp_String(s1, s2); } inline int wxStricmp(const wxString& s1, const wxScopedCharBuffer& s2) { return wxStricmp_String(s1, s2); } inline int wxStricmp(const wxString& s1, const wxScopedWCharBuffer& s2) { return wxStricmp_String(s1, s2); } inline int wxStricmp(const wxString& s1, const wxString& s2) { return wxStricmp_String(s1, s2); } inline int wxStricmp(const wxString& s1, const wxCStrData& s2) { return wxStricmp_String(s1, s2); } inline int wxStricmp(const wxCStrData& s1, const char* s2) { return wxStricmp_String(s1.AsString(), s2); } inline int wxStricmp(const wxCStrData& s1, const wchar_t* s2) { return wxStricmp_String(s1.AsString(), s2); } inline int wxStricmp(const wxCStrData& s1, const wxScopedCharBuffer& s2) { return wxStricmp_String(s1.AsString(), s2); } inline int wxStricmp(const wxCStrData& s1, const wxScopedWCharBuffer& s2) { return wxStricmp_String(s1.AsString(), s2); } inline int wxStricmp(const wxCStrData& s1, const wxString& s2) { return wxStricmp_String(s1.AsString(), s2); } inline int wxStricmp(const wxCStrData& s1, const wxCStrData& s2) { return wxStricmp_String(s1.AsString(), s2); } inline int wxStricmp(const char * s1, const wxCStrData& s2) { return -wxStricmp_String(s2.AsString(), s1); } inline int wxStricmp(const char * s1, const wxString& s2) { return -wxStricmp_String(s2, s1); } inline int wxStricmp(const wchar_t * s1, const wxCStrData& s2) { return -wxStricmp_String(s2.AsString(), s1); } inline int wxStricmp(const wchar_t * s1, const wxString& s2) { return -wxStricmp_String(s2, s1); } inline int wxStricmp(const wxScopedCharBuffer& s1, const wxCStrData& s2) { return -wxStricmp_String(s2.AsString(), s1.data()); } inline int wxStricmp(const wxScopedCharBuffer& s1, const wxString& s2) { return -wxStricmp_String(s2, s1.data()); } inline int wxStricmp(const wxScopedWCharBuffer& s1, const wxCStrData& s2) { return -wxStricmp_String(s2.AsString(), s1.data()); } inline int wxStricmp(const wxScopedWCharBuffer& s1, const wxString& s2) { return -wxStricmp_String(s2, s1.data()); }
# 474 "/usr/local/include/wx-3.0/wx/wxcrt.h"
template<typename T>
inline int wxStrcoll_String(const wxString& s1, const T& s2);
inline int wxStrcoll(const char * s1, const char * s2) { return strcoll(s1, s2); } inline int wxStrcoll(const char * s1, const wchar_t * s2) { return wxStrcoll_String(wxString(s1), wxString(s2)); } inline int wxStrcoll(const char * s1, const wxScopedCharBuffer& s2) { return strcoll(s1, s2.data()); } inline int wxStrcoll(const char * s1, const wxScopedWCharBuffer& s2) { return wxStrcoll_String(wxString(s1), s2.data()); } inline int wxStrcoll(const wchar_t * s1, const wchar_t * s2) { return wcscoll(s1, s2); } inline int wxStrcoll(const wchar_t * s1, const char * s2) { return wxStrcoll_String(wxString(s1), wxString(s2)); } inline int wxStrcoll(const wchar_t * s1, const wxScopedWCharBuffer& s2) { return wcscoll(s1, s2.data()); } inline int wxStrcoll(const wchar_t * s1, const wxScopedCharBuffer& s2) { return wxStrcoll_String(wxString(s1), s2.data()); } inline int wxStrcoll(const wxScopedCharBuffer& s1, const char * s2) { return strcoll(s1.data(), s2); } inline int wxStrcoll(const wxScopedCharBuffer& s1, const wchar_t * s2) { return wxStrcoll_String(wxString(s1), wxString(s2)); } inline int wxStrcoll(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2) { return strcoll(s1.data(), s2.data()); } inline int wxStrcoll(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wxStrcoll_String(wxString(s1), wxString(s2)); } inline int wxStrcoll(const wxScopedWCharBuffer& s1, const wchar_t * s2) { return wcscoll(s1.data(), s2); } inline int wxStrcoll(const wxScopedWCharBuffer& s1, const char * s2) { return wxStrcoll_String(wxString(s1), wxString(s2)); } inline int wxStrcoll(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wcscoll(s1.data(), s2.data()); } inline int wxStrcoll(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2) { return wxStrcoll_String(wxString(s1), wxString(s2)); } inline int wxStrcoll(const wxString& s1, const char* s2) { return wxStrcoll_String(s1, s2); } inline int wxStrcoll(const wxString& s1, const wchar_t* s2) { return wxStrcoll_String(s1, s2); } inline int wxStrcoll(const wxString& s1, const wxScopedCharBuffer& s2) { return wxStrcoll_String(s1, s2); } inline int wxStrcoll(const wxString& s1, const wxScopedWCharBuffer& s2) { return wxStrcoll_String(s1, s2); } inline int wxStrcoll(const wxString& s1, const wxString& s2) { return wxStrcoll_String(s1, s2); } inline int wxStrcoll(const wxString& s1, const wxCStrData& s2) { return wxStrcoll_String(s1, s2); } inline int wxStrcoll(const wxCStrData& s1, const char* s2) { return wxStrcoll_String(s1.AsString(), s2); } inline int wxStrcoll(const wxCStrData& s1, const wchar_t* s2) { return wxStrcoll_String(s1.AsString(), s2); } inline int wxStrcoll(const wxCStrData& s1, const wxScopedCharBuffer& s2) { return wxStrcoll_String(s1.AsString(), s2); } inline int wxStrcoll(const wxCStrData& s1, const wxScopedWCharBuffer& s2) { return wxStrcoll_String(s1.AsString(), s2); } inline int wxStrcoll(const wxCStrData& s1, const wxString& s2) { return wxStrcoll_String(s1.AsString(), s2); } inline int wxStrcoll(const wxCStrData& s1, const wxCStrData& s2) { return wxStrcoll_String(s1.AsString(), s2); } inline int wxStrcoll(const char * s1, const wxCStrData& s2) { return -wxStrcoll_String(s2.AsString(), s1); } inline int wxStrcoll(const char * s1, const wxString& s2) { return -wxStrcoll_String(s2, s1); } inline int wxStrcoll(const wchar_t * s1, const wxCStrData& s2) { return -wxStrcoll_String(s2.AsString(), s1); } inline int wxStrcoll(const wchar_t * s1, const wxString& s2) { return -wxStrcoll_String(s2, s1); } inline int wxStrcoll(const wxScopedCharBuffer& s1, const wxCStrData& s2) { return -wxStrcoll_String(s2.AsString(), s1.data()); } inline int wxStrcoll(const wxScopedCharBuffer& s1, const wxString& s2) { return -wxStrcoll_String(s2, s1.data()); } inline int wxStrcoll(const wxScopedWCharBuffer& s1, const wxCStrData& s2) { return -wxStrcoll_String(s2.AsString(), s1.data()); } inline int wxStrcoll(const wxScopedWCharBuffer& s1, const wxString& s2) { return -wxStrcoll_String(s2, s1.data()); }


template<typename T>
inline int wxStrcoll_String(const wxString& s1, const T& s2)
{







    return wxStrcoll((const char*)s1.mb_str(), s2);

}
# 501 "/usr/local/include/wx-3.0/wx/wxcrt.h"
template<typename T>
inline size_t wxStrspn_String(const wxString& s1, const T& s2)
{
    size_t pos = s1.find_first_not_of(s2);
    return pos == wxString::npos ? s1.length() : pos;
}
inline size_t wxStrspn(const char * s1, const char * s2) { return strspn(s1, s2); } inline size_t wxStrspn(const char * s1, const wchar_t * s2) { return wxStrspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrspn(const char * s1, const wxScopedCharBuffer& s2) { return strspn(s1, s2.data()); } inline size_t wxStrspn(const char * s1, const wxScopedWCharBuffer& s2) { return wxStrspn_String(wxString(s1), s2.data()); } inline size_t wxStrspn(const wchar_t * s1, const wchar_t * s2) { return wcsspn(s1, s2); } inline size_t wxStrspn(const wchar_t * s1, const char * s2) { return wxStrspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrspn(const wchar_t * s1, const wxScopedWCharBuffer& s2) { return wcsspn(s1, s2.data()); } inline size_t wxStrspn(const wchar_t * s1, const wxScopedCharBuffer& s2) { return wxStrspn_String(wxString(s1), s2.data()); } inline size_t wxStrspn(const wxScopedCharBuffer& s1, const char * s2) { return strspn(s1.data(), s2); } inline size_t wxStrspn(const wxScopedCharBuffer& s1, const wchar_t * s2) { return wxStrspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrspn(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2) { return strspn(s1.data(), s2.data()); } inline size_t wxStrspn(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wxStrspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrspn(const wxScopedWCharBuffer& s1, const wchar_t * s2) { return wcsspn(s1.data(), s2); } inline size_t wxStrspn(const wxScopedWCharBuffer& s1, const char * s2) { return wxStrspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrspn(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wcsspn(s1.data(), s2.data()); } inline size_t wxStrspn(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2) { return wxStrspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrspn(const wxString& s1, const char* s2) { return wxStrspn_String(s1, s2); } inline size_t wxStrspn(const wxString& s1, const wchar_t* s2) { return wxStrspn_String(s1, s2); } inline size_t wxStrspn(const wxString& s1, const wxScopedCharBuffer& s2) { return wxStrspn_String(s1, s2); } inline size_t wxStrspn(const wxString& s1, const wxScopedWCharBuffer& s2) { return wxStrspn_String(s1, s2); } inline size_t wxStrspn(const wxString& s1, const wxString& s2) { return wxStrspn_String(s1, s2); } inline size_t wxStrspn(const wxString& s1, const wxCStrData& s2) { return wxStrspn_String(s1, s2); } inline size_t wxStrspn(const wxCStrData& s1, const char* s2) { return wxStrspn_String(s1.AsString(), s2); } inline size_t wxStrspn(const wxCStrData& s1, const wchar_t* s2) { return wxStrspn_String(s1.AsString(), s2); } inline size_t wxStrspn(const wxCStrData& s1, const wxScopedCharBuffer& s2) { return wxStrspn_String(s1.AsString(), s2); } inline size_t wxStrspn(const wxCStrData& s1, const wxScopedWCharBuffer& s2) { return wxStrspn_String(s1.AsString(), s2); } inline size_t wxStrspn(const wxCStrData& s1, const wxString& s2) { return wxStrspn_String(s1.AsString(), s2); } inline size_t wxStrspn(const wxCStrData& s1, const wxCStrData& s2) { return wxStrspn_String(s1.AsString(), s2); } inline size_t wxStrspn(const char * s1, const wxCStrData& s2) { return strspn(s1, s2.AsCharBuf()); } inline size_t wxStrspn(const char * s1, const wxString& s2) { return strspn(s1, s2.mb_str()); } inline size_t wxStrspn(const wchar_t * s1, const wxCStrData& s2) { return wcsspn(s1, s2.AsWCharBuf()); } inline size_t wxStrspn(const wchar_t * s1, const wxString& s2) { return wcsspn(s1, s2.wc_str()); } inline size_t wxStrspn(const wxScopedCharBuffer& s1, const wxCStrData& s2) { return strspn(s1.data(), s2.AsCharBuf()); } inline size_t wxStrspn(const wxScopedCharBuffer& s1, const wxString& s2) { return strspn(s1.data(), s2.mb_str()); } inline size_t wxStrspn(const wxScopedWCharBuffer& s1, const wxCStrData& s2) { return wcsspn(s1.data(), s2.AsWCharBuf()); } inline size_t wxStrspn(const wxScopedWCharBuffer& s1, const wxString& s2) { return wcsspn(s1.data(), s2.wc_str()); }

template<typename T>
inline size_t wxStrcspn_String(const wxString& s1, const T& s2)
{
    size_t pos = s1.find_first_of(s2);
    return pos == wxString::npos ? s1.length() : pos;
}
inline size_t wxStrcspn(const char * s1, const char * s2) { return strcspn(s1, s2); } inline size_t wxStrcspn(const char * s1, const wchar_t * s2) { return wxStrcspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrcspn(const char * s1, const wxScopedCharBuffer& s2) { return strcspn(s1, s2.data()); } inline size_t wxStrcspn(const char * s1, const wxScopedWCharBuffer& s2) { return wxStrcspn_String(wxString(s1), s2.data()); } inline size_t wxStrcspn(const wchar_t * s1, const wchar_t * s2) { return wcscspn(s1, s2); } inline size_t wxStrcspn(const wchar_t * s1, const char * s2) { return wxStrcspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrcspn(const wchar_t * s1, const wxScopedWCharBuffer& s2) { return wcscspn(s1, s2.data()); } inline size_t wxStrcspn(const wchar_t * s1, const wxScopedCharBuffer& s2) { return wxStrcspn_String(wxString(s1), s2.data()); } inline size_t wxStrcspn(const wxScopedCharBuffer& s1, const char * s2) { return strcspn(s1.data(), s2); } inline size_t wxStrcspn(const wxScopedCharBuffer& s1, const wchar_t * s2) { return wxStrcspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrcspn(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2) { return strcspn(s1.data(), s2.data()); } inline size_t wxStrcspn(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wxStrcspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrcspn(const wxScopedWCharBuffer& s1, const wchar_t * s2) { return wcscspn(s1.data(), s2); } inline size_t wxStrcspn(const wxScopedWCharBuffer& s1, const char * s2) { return wxStrcspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrcspn(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2) { return wcscspn(s1.data(), s2.data()); } inline size_t wxStrcspn(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2) { return wxStrcspn_String(wxString(s1), wxString(s2)); } inline size_t wxStrcspn(const wxString& s1, const char* s2) { return wxStrcspn_String(s1, s2); } inline size_t wxStrcspn(const wxString& s1, const wchar_t* s2) { return wxStrcspn_String(s1, s2); } inline size_t wxStrcspn(const wxString& s1, const wxScopedCharBuffer& s2) { return wxStrcspn_String(s1, s2); } inline size_t wxStrcspn(const wxString& s1, const wxScopedWCharBuffer& s2) { return wxStrcspn_String(s1, s2); } inline size_t wxStrcspn(const wxString& s1, const wxString& s2) { return wxStrcspn_String(s1, s2); } inline size_t wxStrcspn(const wxString& s1, const wxCStrData& s2) { return wxStrcspn_String(s1, s2); } inline size_t wxStrcspn(const wxCStrData& s1, const char* s2) { return wxStrcspn_String(s1.AsString(), s2); } inline size_t wxStrcspn(const wxCStrData& s1, const wchar_t* s2) { return wxStrcspn_String(s1.AsString(), s2); } inline size_t wxStrcspn(const wxCStrData& s1, const wxScopedCharBuffer& s2) { return wxStrcspn_String(s1.AsString(), s2); } inline size_t wxStrcspn(const wxCStrData& s1, const wxScopedWCharBuffer& s2) { return wxStrcspn_String(s1.AsString(), s2); } inline size_t wxStrcspn(const wxCStrData& s1, const wxString& s2) { return wxStrcspn_String(s1.AsString(), s2); } inline size_t wxStrcspn(const wxCStrData& s1, const wxCStrData& s2) { return wxStrcspn_String(s1.AsString(), s2); } inline size_t wxStrcspn(const char * s1, const wxCStrData& s2) { return strcspn(s1, s2.AsCharBuf()); } inline size_t wxStrcspn(const char * s1, const wxString& s2) { return strcspn(s1, s2.mb_str()); } inline size_t wxStrcspn(const wchar_t * s1, const wxCStrData& s2) { return wcscspn(s1, s2.AsWCharBuf()); } inline size_t wxStrcspn(const wchar_t * s1, const wxString& s2) { return wcscspn(s1, s2.wc_str()); } inline size_t wxStrcspn(const wxScopedCharBuffer& s1, const wxCStrData& s2) { return strcspn(s1.data(), s2.AsCharBuf()); } inline size_t wxStrcspn(const wxScopedCharBuffer& s1, const wxString& s2) { return strcspn(s1.data(), s2.mb_str()); } inline size_t wxStrcspn(const wxScopedWCharBuffer& s1, const wxCStrData& s2) { return wcscspn(s1.data(), s2.AsWCharBuf()); } inline size_t wxStrcspn(const wxScopedWCharBuffer& s1, const wxString& s2) { return wcscspn(s1.data(), s2.wc_str()); }






template<typename T>
inline int wxStrncmp_String(const wxString& s1, const T& s2, size_t n)
    { return s1.compare(0, n, s2, 0, n); }
inline int wxStrncmp(const char * s1, const char * s2, size_t n) { return strncmp(s1, s2, n); } inline int wxStrncmp(const char * s1, const wchar_t * s2, size_t n) { return wxStrncmp_String(wxString(s1), wxString(s2), n); } inline int wxStrncmp(const char * s1, const wxScopedCharBuffer& s2, size_t n) { return strncmp(s1, s2.data(), n); } inline int wxStrncmp(const char * s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrncmp_String(wxString(s1), s2.data(), n); } inline int wxStrncmp(const wchar_t * s1, const wchar_t * s2, size_t n) { return wcsncmp(s1, s2, n); } inline int wxStrncmp(const wchar_t * s1, const char * s2, size_t n) { return wxStrncmp_String(wxString(s1), wxString(s2), n); } inline int wxStrncmp(const wchar_t * s1, const wxScopedWCharBuffer& s2, size_t n) { return wcsncmp(s1, s2.data(), n); } inline int wxStrncmp(const wchar_t * s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrncmp_String(wxString(s1), s2.data(), n); } inline int wxStrncmp(const wxScopedCharBuffer& s1, const char * s2, size_t n) { return strncmp(s1.data(), s2, n); } inline int wxStrncmp(const wxScopedCharBuffer& s1, const wchar_t * s2, size_t n) { return wxStrncmp_String(wxString(s1), wxString(s2), n); } inline int wxStrncmp(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2, size_t n) { return strncmp(s1.data(), s2.data(), n); } inline int wxStrncmp(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrncmp_String(wxString(s1), wxString(s2), n); } inline int wxStrncmp(const wxScopedWCharBuffer& s1, const wchar_t * s2, size_t n) { return wcsncmp(s1.data(), s2, n); } inline int wxStrncmp(const wxScopedWCharBuffer& s1, const char * s2, size_t n) { return wxStrncmp_String(wxString(s1), wxString(s2), n); } inline int wxStrncmp(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2, size_t n) { return wcsncmp(s1.data(), s2.data(), n); } inline int wxStrncmp(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrncmp_String(wxString(s1), wxString(s2), n); } inline int wxStrncmp(const wxString& s1, const char* s2, size_t n) { return wxStrncmp_String(s1, s2, n); } inline int wxStrncmp(const wxString& s1, const wchar_t* s2, size_t n) { return wxStrncmp_String(s1, s2, n); } inline int wxStrncmp(const wxString& s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrncmp_String(s1, s2, n); } inline int wxStrncmp(const wxString& s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrncmp_String(s1, s2, n); } inline int wxStrncmp(const wxString& s1, const wxString& s2, size_t n) { return wxStrncmp_String(s1, s2, n); } inline int wxStrncmp(const wxString& s1, const wxCStrData& s2, size_t n) { return wxStrncmp_String(s1, s2, n); } inline int wxStrncmp(const wxCStrData& s1, const char* s2, size_t n) { return wxStrncmp_String(s1.AsString(), s2, n); } inline int wxStrncmp(const wxCStrData& s1, const wchar_t* s2, size_t n) { return wxStrncmp_String(s1.AsString(), s2, n); } inline int wxStrncmp(const wxCStrData& s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrncmp_String(s1.AsString(), s2, n); } inline int wxStrncmp(const wxCStrData& s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrncmp_String(s1.AsString(), s2, n); } inline int wxStrncmp(const wxCStrData& s1, const wxString& s2, size_t n) { return wxStrncmp_String(s1.AsString(), s2, n); } inline int wxStrncmp(const wxCStrData& s1, const wxCStrData& s2, size_t n) { return wxStrncmp_String(s1.AsString(), s2, n); } inline int wxStrncmp(const char * s1, const wxCStrData& s2, size_t n) { return -wxStrncmp_String(s2.AsString(), s1, n); } inline int wxStrncmp(const char * s1, const wxString& s2, size_t n) { return -wxStrncmp_String(s2, s1, n); } inline int wxStrncmp(const wchar_t * s1, const wxCStrData& s2, size_t n) { return -wxStrncmp_String(s2.AsString(), s1, n); } inline int wxStrncmp(const wchar_t * s1, const wxString& s2, size_t n) { return -wxStrncmp_String(s2, s1, n); } inline int wxStrncmp(const wxScopedCharBuffer& s1, const wxCStrData& s2, size_t n) { return -wxStrncmp_String(s2.AsString(), s1.data(), n); } inline int wxStrncmp(const wxScopedCharBuffer& s1, const wxString& s2, size_t n) { return -wxStrncmp_String(s2, s1.data(), n); } inline int wxStrncmp(const wxScopedWCharBuffer& s1, const wxCStrData& s2, size_t n) { return -wxStrncmp_String(s2.AsString(), s1.data(), n); } inline int wxStrncmp(const wxScopedWCharBuffer& s1, const wxString& s2, size_t n) { return -wxStrncmp_String(s2, s1.data(), n); }

template<typename T>
inline int wxStrnicmp_String(const wxString& s1, const T& s2, size_t n)
    { return s1.substr(0, n).CmpNoCase(wxString(s2).substr(0, n)); }
inline int wxStrnicmp(const char * s1, const char * s2, size_t n) { return strncasecmp(s1, s2, n); } inline int wxStrnicmp(const char * s1, const wchar_t * s2, size_t n) { return wxStrnicmp_String(wxString(s1), wxString(s2), n); } inline int wxStrnicmp(const char * s1, const wxScopedCharBuffer& s2, size_t n) { return strncasecmp(s1, s2.data(), n); } inline int wxStrnicmp(const char * s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrnicmp_String(wxString(s1), s2.data(), n); } inline int wxStrnicmp(const wchar_t * s1, const wchar_t * s2, size_t n) { return wcsncasecmp(s1, s2, n); } inline int wxStrnicmp(const wchar_t * s1, const char * s2, size_t n) { return wxStrnicmp_String(wxString(s1), wxString(s2), n); } inline int wxStrnicmp(const wchar_t * s1, const wxScopedWCharBuffer& s2, size_t n) { return wcsncasecmp(s1, s2.data(), n); } inline int wxStrnicmp(const wchar_t * s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrnicmp_String(wxString(s1), s2.data(), n); } inline int wxStrnicmp(const wxScopedCharBuffer& s1, const char * s2, size_t n) { return strncasecmp(s1.data(), s2, n); } inline int wxStrnicmp(const wxScopedCharBuffer& s1, const wchar_t * s2, size_t n) { return wxStrnicmp_String(wxString(s1), wxString(s2), n); } inline int wxStrnicmp(const wxScopedCharBuffer& s1, const wxScopedCharBuffer& s2, size_t n) { return strncasecmp(s1.data(), s2.data(), n); } inline int wxStrnicmp(const wxScopedCharBuffer& s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrnicmp_String(wxString(s1), wxString(s2), n); } inline int wxStrnicmp(const wxScopedWCharBuffer& s1, const wchar_t * s2, size_t n) { return wcsncasecmp(s1.data(), s2, n); } inline int wxStrnicmp(const wxScopedWCharBuffer& s1, const char * s2, size_t n) { return wxStrnicmp_String(wxString(s1), wxString(s2), n); } inline int wxStrnicmp(const wxScopedWCharBuffer& s1, const wxScopedWCharBuffer& s2, size_t n) { return wcsncasecmp(s1.data(), s2.data(), n); } inline int wxStrnicmp(const wxScopedWCharBuffer& s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrnicmp_String(wxString(s1), wxString(s2), n); } inline int wxStrnicmp(const wxString& s1, const char* s2, size_t n) { return wxStrnicmp_String(s1, s2, n); } inline int wxStrnicmp(const wxString& s1, const wchar_t* s2, size_t n) { return wxStrnicmp_String(s1, s2, n); } inline int wxStrnicmp(const wxString& s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrnicmp_String(s1, s2, n); } inline int wxStrnicmp(const wxString& s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrnicmp_String(s1, s2, n); } inline int wxStrnicmp(const wxString& s1, const wxString& s2, size_t n) { return wxStrnicmp_String(s1, s2, n); } inline int wxStrnicmp(const wxString& s1, const wxCStrData& s2, size_t n) { return wxStrnicmp_String(s1, s2, n); } inline int wxStrnicmp(const wxCStrData& s1, const char* s2, size_t n) { return wxStrnicmp_String(s1.AsString(), s2, n); } inline int wxStrnicmp(const wxCStrData& s1, const wchar_t* s2, size_t n) { return wxStrnicmp_String(s1.AsString(), s2, n); } inline int wxStrnicmp(const wxCStrData& s1, const wxScopedCharBuffer& s2, size_t n) { return wxStrnicmp_String(s1.AsString(), s2, n); } inline int wxStrnicmp(const wxCStrData& s1, const wxScopedWCharBuffer& s2, size_t n) { return wxStrnicmp_String(s1.AsString(), s2, n); } inline int wxStrnicmp(const wxCStrData& s1, const wxString& s2, size_t n) { return wxStrnicmp_String(s1.AsString(), s2, n); } inline int wxStrnicmp(const wxCStrData& s1, const wxCStrData& s2, size_t n) { return wxStrnicmp_String(s1.AsString(), s2, n); } inline int wxStrnicmp(const char * s1, const wxCStrData& s2, size_t n) { return -wxStrnicmp_String(s2.AsString(), s1, n); } inline int wxStrnicmp(const char * s1, const wxString& s2, size_t n) { return -wxStrnicmp_String(s2, s1, n); } inline int wxStrnicmp(const wchar_t * s1, const wxCStrData& s2, size_t n) { return -wxStrnicmp_String(s2.AsString(), s1, n); } inline int wxStrnicmp(const wchar_t * s1, const wxString& s2, size_t n) { return -wxStrnicmp_String(s2, s1, n); } inline int wxStrnicmp(const wxScopedCharBuffer& s1, const wxCStrData& s2, size_t n) { return -wxStrnicmp_String(s2.AsString(), s1.data(), n); } inline int wxStrnicmp(const wxScopedCharBuffer& s1, const wxString& s2, size_t n) { return -wxStrnicmp_String(s2, s1.data(), n); } inline int wxStrnicmp(const wxScopedWCharBuffer& s1, const wxCStrData& s2, size_t n) { return -wxStrnicmp_String(s2.AsString(), s1.data(), n); } inline int wxStrnicmp(const wxScopedWCharBuffer& s1, const wxString& s2, size_t n) { return -wxStrnicmp_String(s2, s1.data(), n); }
# 540 "/usr/local/include/wx-3.0/wx/wxcrt.h"
inline size_t wxStrxfrm(char *dest, const char *src, size_t n)
    { return strxfrm(dest, src, n); }
inline size_t wxStrxfrm(wchar_t *dest, const wchar_t *src, size_t n)
    { return wcsxfrm(dest, src, n); }
template<typename T>
inline size_t wxStrxfrm(T *dest, const wxScopedCharTypeBuffer<T>& src, size_t n)
    { return wxStrxfrm(dest, src.data(), n); }
inline size_t wxStrxfrm(char *dest, const wxString& src, size_t n)
    { return strxfrm(dest, src.mb_str(), n); }
inline size_t wxStrxfrm(wchar_t *dest, const wxString& src, size_t n)
    { return wcsxfrm(dest, src.wc_str(), n); }
inline size_t wxStrxfrm(char *dest, const wxCStrData& src, size_t n)
    { return strxfrm(dest, src.AsCharBuf(), n); }
inline size_t wxStrxfrm(wchar_t *dest, const wxCStrData& src, size_t n)
    { return wcsxfrm(dest, src.AsWCharBuf(), n); }



inline char *wxStrtok(char *str, const char *delim, char **saveptr)
    { return wxCRT_StrtokA(str, delim, saveptr); }
inline wchar_t *wxStrtok(wchar_t *str, const wchar_t *delim, wchar_t **saveptr)
    { return wxCRT_StrtokW(str, delim, saveptr); }
template<typename T>
inline T *wxStrtok(T *str, const wxScopedCharTypeBuffer<T>& delim, T **saveptr)
    { return wxStrtok(str, delim.data(), saveptr); }
inline char *wxStrtok(char *str, const wxCStrData& delim, char **saveptr)
    { return wxCRT_StrtokA(str, delim.AsCharBuf(), saveptr); }
inline wchar_t *wxStrtok(wchar_t *str, const wxCStrData& delim, wchar_t **saveptr)
    { return wxCRT_StrtokW(str, delim.AsWCharBuf(), saveptr); }
inline char *wxStrtok(char *str, const wxString& delim, char **saveptr)
    { return wxCRT_StrtokA(str, delim.mb_str(), saveptr); }
inline wchar_t *wxStrtok(wchar_t *str, const wxString& delim, wchar_t **saveptr)
    { return wxCRT_StrtokW(str, delim.wc_str(), saveptr); }

inline const char *wxStrstr(const char *haystack, const char *needle)
    { return strstr(haystack, needle); }
inline const wchar_t *wxStrstr(const wchar_t *haystack, const wchar_t *needle)
    { return wcsstr(haystack, needle); }
inline const char *wxStrstr(const char *haystack, const wxString& needle)
    { return strstr(haystack, needle.mb_str()); }
inline const wchar_t *wxStrstr(const wchar_t *haystack, const wxString& needle)
    { return wcsstr(haystack, needle.wc_str()); }


inline const char *wxStrstr(const wxString& haystack, const wxString& needle)
    { return strstr(haystack.c_str(), needle.mb_str()); }
inline const char *wxStrstr(const wxCStrData& haystack, const wxString& needle)
    { return strstr(haystack, needle.mb_str()); }
inline const char *wxStrstr(const wxCStrData& haystack, const wxCStrData& needle)
    { return strstr(haystack, needle.AsCharBuf()); }

inline const char *wxStrstr(const wxString& haystack, const char *needle)
    { return strstr(haystack.c_str(), needle); }
inline const char *wxStrstr(const wxCStrData& haystack, const char *needle)
    { return strstr(haystack, needle); }
inline const wchar_t *wxStrstr(const wxString& haystack, const wchar_t *needle)
    { return wcsstr(haystack.c_str(), needle); }
inline const wchar_t *wxStrstr(const wxCStrData& haystack, const wchar_t *needle)
    { return wcsstr(haystack, needle); }

inline const char *wxStrchr(const char *s, char c)
    { return strchr(s, c); }
inline const wchar_t *wxStrchr(const wchar_t *s, wchar_t c)
    { return wcschr(s, c); }
inline const char *wxStrrchr(const char *s, char c)
    { return strrchr(s, c); }
inline const wchar_t *wxStrrchr(const wchar_t *s, wchar_t c)
    { return wcsrchr(s, c); }
inline const char *wxStrchr(const char *s, const wxUniChar& uc)
    { char c; return uc.GetAsChar(&c) ? strchr(s, c) : __null; }
inline const wchar_t *wxStrchr(const wchar_t *s, const wxUniChar& c)
    { return wcschr(s, (wchar_t)c); }
inline const char *wxStrrchr(const char *s, const wxUniChar& uc)
    { char c; return uc.GetAsChar(&c) ? strrchr(s, c) : __null; }
inline const wchar_t *wxStrrchr(const wchar_t *s, const wxUniChar& c)
    { return wcsrchr(s, (wchar_t)c); }
inline const char *wxStrchr(const char *s, const wxUniCharRef& uc)
    { char c; return uc.GetAsChar(&c) ? strchr(s, c) : __null; }
inline const wchar_t *wxStrchr(const wchar_t *s, const wxUniCharRef& c)
    { return wcschr(s, (wchar_t)c); }
inline const char *wxStrrchr(const char *s, const wxUniCharRef& uc)
    { char c; return uc.GetAsChar(&c) ? strrchr(s, c) : __null; }
inline const wchar_t *wxStrrchr(const wchar_t *s, const wxUniCharRef& c)
    { return wcsrchr(s, (wchar_t)c); }
template<typename T>
inline const T* wxStrchr(const wxScopedCharTypeBuffer<T>& s, T c)
    { return wxStrchr(s.data(), c); }
template<typename T>
inline const T* wxStrrchr(const wxScopedCharTypeBuffer<T>& s, T c)
    { return wxStrrchr(s.data(), c); }
template<typename T>
inline const T* wxStrchr(const wxScopedCharTypeBuffer<T>& s, const wxUniChar& c)
    { return wxStrchr(s.data(), (T)c); }
template<typename T>
inline const T* wxStrrchr(const wxScopedCharTypeBuffer<T>& s, const wxUniChar& c)
    { return wxStrrchr(s.data(), (T)c); }
template<typename T>
inline const T* wxStrchr(const wxScopedCharTypeBuffer<T>& s, const wxUniCharRef& c)
    { return wxStrchr(s.data(), (T)c); }
template<typename T>
inline const T* wxStrrchr(const wxScopedCharTypeBuffer<T>& s, const wxUniCharRef& c)
    { return wxStrrchr(s.data(), (T)c); }


inline const char* wxStrchr(const wxString& s, char c)
    { return strchr((const char*)s.c_str(), c); }
inline const char* wxStrrchr(const wxString& s, char c)
    { return strrchr((const char*)s.c_str(), c); }
inline const char* wxStrchr(const wxString& s, int c)
    { return strchr((const char*)s.c_str(), c); }
inline const char* wxStrrchr(const wxString& s, int c)
    { return strrchr((const char*)s.c_str(), c); }
inline const char* wxStrchr(const wxString& s, const wxUniChar& uc)
    { char c; return uc.GetAsChar(&c) ? strchr(s.c_str(), c) : __null; }
inline const char* wxStrrchr(const wxString& s, const wxUniChar& uc)
    { char c; return uc.GetAsChar(&c) ? strrchr(s.c_str(), c) : __null; }
inline const char* wxStrchr(const wxString& s, const wxUniCharRef& uc)
    { char c; return uc.GetAsChar(&c) ? strchr(s.c_str(), c) : __null; }
inline const char* wxStrrchr(const wxString& s, const wxUniCharRef& uc)
    { char c; return uc.GetAsChar(&c) ? strrchr(s.c_str(), c) : __null; }
inline const wchar_t* wxStrchr(const wxString& s, wchar_t c)
    { return wcschr((const wchar_t*)s.c_str(), c); }
inline const wchar_t* wxStrrchr(const wxString& s, wchar_t c)
    { return wcsrchr((const wchar_t*)s.c_str(), c); }
inline const char* wxStrchr(const wxCStrData& s, char c)
    { return strchr(s.AsChar(), c); }
inline const char* wxStrrchr(const wxCStrData& s, char c)
    { return strrchr(s.AsChar(), c); }
inline const char* wxStrchr(const wxCStrData& s, int c)
    { return strchr(s.AsChar(), c); }
inline const char* wxStrrchr(const wxCStrData& s, int c)
    { return strrchr(s.AsChar(), c); }
inline const char* wxStrchr(const wxCStrData& s, const wxUniChar& uc)
    { char c; return uc.GetAsChar(&c) ? strchr(s, c) : __null; }
inline const char* wxStrrchr(const wxCStrData& s, const wxUniChar& uc)
    { char c; return uc.GetAsChar(&c) ? strrchr(s, c) : __null; }
inline const char* wxStrchr(const wxCStrData& s, const wxUniCharRef& uc)
    { char c; return uc.GetAsChar(&c) ? strchr(s, c) : __null; }
inline const char* wxStrrchr(const wxCStrData& s, const wxUniCharRef& uc)
    { char c; return uc.GetAsChar(&c) ? strrchr(s, c) : __null; }
inline const wchar_t* wxStrchr(const wxCStrData& s, wchar_t c)
    { return wcschr(s.AsWChar(), c); }
inline const wchar_t* wxStrrchr(const wxCStrData& s, wchar_t c)
    { return wcsrchr(s.AsWChar(), c); }

inline const char *wxStrpbrk(const char *s, const char *accept)
    { return strpbrk(s, accept); }
inline const wchar_t *wxStrpbrk(const wchar_t *s, const wchar_t *accept)
    { return wcspbrk(s, accept); }
inline const char *wxStrpbrk(const char *s, const wxString& accept)
    { return strpbrk(s, accept.mb_str()); }
inline const char *wxStrpbrk(const char *s, const wxCStrData& accept)
    { return strpbrk(s, accept.AsCharBuf()); }
inline const wchar_t *wxStrpbrk(const wchar_t *s, const wxString& accept)
    { return wcspbrk(s, accept.wc_str()); }
inline const wchar_t *wxStrpbrk(const wchar_t *s, const wxCStrData& accept)
    { return wcspbrk(s, accept.AsWCharBuf()); }
inline const char *wxStrpbrk(const wxString& s, const wxString& accept)
    { return strpbrk(s.c_str(), accept.mb_str()); }
inline const char *wxStrpbrk(const wxString& s, const char *accept)
    { return strpbrk(s.c_str(), accept); }
inline const wchar_t *wxStrpbrk(const wxString& s, const wchar_t *accept)
    { return wcspbrk(s.wc_str(), accept); }
inline const char *wxStrpbrk(const wxString& s, const wxCStrData& accept)
    { return strpbrk(s.c_str(), accept.AsCharBuf()); }
inline const char *wxStrpbrk(const wxCStrData& s, const wxString& accept)
    { return strpbrk(s.AsChar(), accept.mb_str()); }
inline const char *wxStrpbrk(const wxCStrData& s, const char *accept)
    { return strpbrk(s.AsChar(), accept); }
inline const wchar_t *wxStrpbrk(const wxCStrData& s, const wchar_t *accept)
    { return wcspbrk(s.AsWChar(), accept); }
inline const char *wxStrpbrk(const wxCStrData& s, const wxCStrData& accept)
    { return strpbrk(s.AsChar(), accept.AsCharBuf()); }
template <typename S, typename T>
inline const T *wxStrpbrk(const S& s, const wxScopedCharTypeBuffer<T>& accept)
    { return wxStrpbrk(s, accept.data()); }



template <typename T>
inline char *wxStrstr(char *haystack, T needle)
    { return const_cast<char*>(wxStrstr(const_cast<const char*>(haystack), needle)); }
template <typename T>
inline wchar_t *wxStrstr(wchar_t *haystack, T needle)
    { return const_cast<wchar_t*>(wxStrstr(const_cast<const wchar_t*>(haystack), needle)); }

template <typename T>
inline char * wxStrchr(char *s, T c)
    { return const_cast<char*>(wxStrchr(const_cast<const char*>(s), c)); }
template <typename T>
inline wchar_t * wxStrchr(wchar_t *s, T c)
    { return (wchar_t *)wxStrchr((const wchar_t *)s, c); }
template <typename T>
inline char * wxStrrchr(char *s, T c)
    { return const_cast<char*>(wxStrrchr(const_cast<const char*>(s), c)); }
template <typename T>
inline wchar_t * wxStrrchr(wchar_t *s, T c)
    { return const_cast<wchar_t*>(wxStrrchr(const_cast<const wchar_t*>(s), c)); }

template <typename T>
inline char * wxStrpbrk(char *s, T accept)
    { return const_cast<char*>(wxStrpbrk(const_cast<const char*>(s), accept)); }
template <typename T>
inline wchar_t * wxStrpbrk(wchar_t *s, T accept)
    { return const_cast<wchar_t*>(wxStrpbrk(const_cast<const wchar_t*>(s), accept)); }
# 753 "/usr/local/include/wx-3.0/wx/wxcrt.h"
inline FILE *wxFopen(const wxString& path, const wxString& mode)
    { return fopen(path.fn_str(), mode.fn_str()); }
inline FILE *wxFreopen(const wxString& path, const wxString& mode, FILE *stream)
    { return freopen(path.fn_str(), mode.fn_str(), stream); }
inline int wxRemove(const wxString& path)
    { return remove(path.fn_str()); }
inline int wxRename(const wxString& oldpath, const wxString& newpath)
    { return rename(oldpath.fn_str(), newpath.fn_str()); }

extern int wxPuts(const wxString& s);
extern int wxFputs(const wxString& s, FILE *stream);
extern void wxPerror(const wxString& s);

extern int wxFputc(const wxUniChar& c, FILE *stream);







inline char *wxFgets(char *s, int size, FILE *stream)
    { return fgets(s, size, stream); }

extern wchar_t *wxFgets(wchar_t *s, int size, FILE *stream);





inline int wxFgetc(FILE *stream) { return fgetc(stream); }
inline int wxUngetc(int c, FILE *stream) { return ungetc(c, stream); }
# 797 "/usr/local/include/wx-3.0/wx/wxcrt.h"
inline int wxAtoi(const wxString& str) { return atoi(str.mb_str()); }



inline long wxAtol(const wxString& str) { return wcstol(str.wc_str(), __null, 10); }





inline double wxAtof(const wxString& str) { return wcstod(str.wc_str(), __null); }




inline double wxStrtod(const char *nptr, char **endptr)
    { return strtod(nptr, endptr); }
inline double wxStrtod(const wchar_t *nptr, wchar_t **endptr)
    { return wcstod(nptr, endptr); }
template<typename T>
inline double wxStrtod(const wxScopedCharTypeBuffer<T>& nptr, T **endptr)
    { return wxStrtod(nptr.data(), endptr); }
# 828 "/usr/local/include/wx-3.0/wx/wxcrt.h"
template<typename T> struct wxStrtoxCharType {};
template<> struct wxStrtoxCharType<char**>
{
    typedef const char* Type;
    static char** AsPointer(char **p) { return p; }
};
template<> struct wxStrtoxCharType<wchar_t**>
{
    typedef const wchar_t* Type;
    static wchar_t** AsPointer(wchar_t **p) { return p; }
};
template<> struct wxStrtoxCharType<int>
{
    typedef const char* Type;
    static char** AsPointer(int p)
    {
        do { if ( wxTheAssertHandler && !(p == 0) && (wxOnAssert("/usr/local/include/wx-3.0/wx/wxcrt.h", 844, __FUNCTION__, "p == 0", "passing non-NULL int is invalid"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
        return __null;
    }
};

template<typename T>
inline double wxStrtod(const wxString& nptr, T endptr)
{
    if ( endptr == 0 )
    {



        return wxStrtod(nptr.wx_str(), (wxStringCharType**)__null);
    }
    else
    {



        typedef typename wxStrtoxCharType<T>::Type CharType;
        return wxStrtod((CharType)nptr.c_str(),
                        wxStrtoxCharType<T>::AsPointer(endptr));
    }
}
template<typename T>
inline double wxStrtod(const wxCStrData& nptr, T endptr)
    { return wxStrtod(nptr.AsString(), endptr); }
# 900 "/usr/local/include/wx-3.0/wx/wxcrt.h"
inline long wxStrtol(const char *nptr, char **endptr, int base) { return strtol(nptr, endptr, base); } inline long wxStrtol(const wchar_t *nptr, wchar_t **endptr, int base) { return wcstol(nptr, endptr, base); } template<typename T> inline long wxStrtol(const wxScopedCharTypeBuffer<T>& nptr, T **endptr, int) { return wxStrtol(nptr.data(), endptr); } template<typename T> inline long wxStrtol(const wxString& nptr, T endptr, int base) { if ( endptr == 0 ) return wxStrtol(nptr.wx_str(), (wxStringCharType**)__null, base); else { typedef typename wxStrtoxCharType<T>::Type CharType; return wxStrtol((CharType)nptr.c_str(), wxStrtoxCharType<T>::AsPointer(endptr), base); } } template<typename T> inline long wxStrtol(const wxCStrData& nptr, T endptr, int base) { return wxStrtol(nptr.AsString(), endptr, base); }
inline unsigned long wxStrtoul(const char *nptr, char **endptr, int base) { return strtoul(nptr, endptr, base); } inline unsigned long wxStrtoul(const wchar_t *nptr, wchar_t **endptr, int base) { return wcstoul(nptr, endptr, base); } template<typename T> inline unsigned long wxStrtoul(const wxScopedCharTypeBuffer<T>& nptr, T **endptr, int) { return wxStrtoul(nptr.data(), endptr); } template<typename T> inline unsigned long wxStrtoul(const wxString& nptr, T endptr, int base) { if ( endptr == 0 ) return wxStrtoul(nptr.wx_str(), (wxStringCharType**)__null, base); else { typedef typename wxStrtoxCharType<T>::Type CharType; return wxStrtoul((CharType)nptr.c_str(), wxStrtoxCharType<T>::AsPointer(endptr), base); } } template<typename T> inline unsigned long wxStrtoul(const wxCStrData& nptr, T endptr, int base) { return wxStrtoul(nptr.AsString(), endptr, base); }

inline long long wxStrtoll(const char *nptr, char **endptr, int base) { return wxCRT_StrtollA(nptr, endptr, base); } inline long long wxStrtoll(const wchar_t *nptr, wchar_t **endptr, int base) { return wxCRT_StrtollW(nptr, endptr, base); } template<typename T> inline long long wxStrtoll(const wxScopedCharTypeBuffer<T>& nptr, T **endptr, int) { return wxStrtoll(nptr.data(), endptr); } template<typename T> inline long long wxStrtoll(const wxString& nptr, T endptr, int base) { if ( endptr == 0 ) return wxStrtoll(nptr.wx_str(), (wxStringCharType**)__null, base); else { typedef typename wxStrtoxCharType<T>::Type CharType; return wxStrtoll((CharType)nptr.c_str(), wxStrtoxCharType<T>::AsPointer(endptr), base); } } template<typename T> inline long long wxStrtoll(const wxCStrData& nptr, T endptr, int base) { return wxStrtoll(nptr.AsString(), endptr, base); }
inline unsigned long long wxStrtoull(const char *nptr, char **endptr, int base) { return wxCRT_StrtoullA(nptr, endptr, base); } inline unsigned long long wxStrtoull(const wchar_t *nptr, wchar_t **endptr, int base) { return wxCRT_StrtoullW(nptr, endptr, base); } template<typename T> inline unsigned long long wxStrtoull(const wxScopedCharTypeBuffer<T>& nptr, T **endptr, int) { return wxStrtoull(nptr.data(), endptr); } template<typename T> inline unsigned long long wxStrtoull(const wxString& nptr, T endptr, int base) { if ( endptr == 0 ) return wxStrtoull(nptr.wx_str(), (wxStringCharType**)__null, base); else { typedef typename wxStrtoxCharType<T>::Type CharType; return wxStrtoull((CharType)nptr.c_str(), wxStrtoxCharType<T>::AsPointer(endptr), base); } } template<typename T> inline unsigned long long wxStrtoull(const wxCStrData& nptr, T endptr, int base) { return wxStrtoull(nptr.AsString(), endptr, base); }
# 918 "/usr/local/include/wx-3.0/wx/wxcrt.h"
inline int wxSystem(const wxString& str) { return system(str.mb_str()); }




inline char* wxGetenv(const char *name) { return getenv(name); }
inline wchar_t* wxGetenv(const wchar_t *name) { return wxCRT_GetenvW(name); }
inline char* wxGetenv(const wxString& name) { return getenv(name.mb_str()); }
inline char* wxGetenv(const wxCStrData& name) { return getenv(name.AsCharBuf()); }
inline char* wxGetenv(const wxScopedCharBuffer& name) { return getenv(name.data()); }
inline wchar_t* wxGetenv(const wxScopedWCharBuffer& name) { return wxCRT_GetenvW(name.data()); }





inline size_t wxStrftime(char *s, size_t max,
                         const wxString& format, const struct tm *tm)
    { return strftime(s, max, format.mb_str(), tm); }

inline size_t wxStrftime(wchar_t *s, size_t max,
                         const wxString& format, const struct tm *tm)
    { return wxCRT_StrftimeW(s, max, format.wc_str(), tm); }
# 960 "/usr/local/include/wx-3.0/wx/wxcrt.h"
inline bool wxIsalnum(const wxUniChar& c) { return iswalnum(c) != 0; }
inline bool wxIsalpha(const wxUniChar& c) { return iswalpha(c) != 0; }
inline bool wxIscntrl(const wxUniChar& c) { return iswcntrl(c) != 0; }
inline bool wxIsdigit(const wxUniChar& c) { return iswdigit(c) != 0; }
inline bool wxIsgraph(const wxUniChar& c) { return iswgraph(c) != 0; }
inline bool wxIslower(const wxUniChar& c) { return iswlower(c) != 0; }
inline bool wxIsprint(const wxUniChar& c) { return iswprint(c) != 0; }
inline bool wxIspunct(const wxUniChar& c) { return iswpunct(c) != 0; }
inline bool wxIsspace(const wxUniChar& c) { return iswspace(c) != 0; }
inline bool wxIsupper(const wxUniChar& c) { return iswupper(c) != 0; }
inline bool wxIsxdigit(const wxUniChar& c) { return iswxdigit(c) != 0; }

inline wxUniChar wxTolower(const wxUniChar& c) { return towlower((wxUChar)(wxChar)(c)); }
inline wxUniChar wxToupper(const wxUniChar& c) { return towupper((wxUChar)(wxChar)(c)); }
# 984 "/usr/local/include/wx-3.0/wx/wxcrt.h"
inline bool wxIsascii(const wxUniChar& c) { return c.IsAscii(); }
# 16 "/usr/local/include/wx-3.0/wx/hashmap.h" 2
# 68 "/usr/local/include/wx-3.0/wx/hashmap.h"
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stddef.h" 1 3
# 69 "/usr/local/include/wx-3.0/wx/hashmap.h" 2



struct _wxHashTable_NodeBase
{
    _wxHashTable_NodeBase() : m_next(__null) {}

    _wxHashTable_NodeBase* m_next;




};


class _wxHashTableBase2
{
public:
    typedef void (*NodeDtor)(_wxHashTable_NodeBase*);
    typedef unsigned long (*BucketFromNode)(_wxHashTableBase2*,_wxHashTable_NodeBase*);
    typedef _wxHashTable_NodeBase* (*ProcessNode)(_wxHashTable_NodeBase*);
protected:
    static _wxHashTable_NodeBase* DummyProcessNode(_wxHashTable_NodeBase* node);
    static void DeleteNodes( size_t buckets, _wxHashTable_NodeBase** table,
                             NodeDtor dtor );
    static _wxHashTable_NodeBase* GetFirstNode( size_t buckets,
                                                _wxHashTable_NodeBase** table )
    {
        for( size_t i = 0; i < buckets; ++i )
            if( table[i] )
                return table[i];
        return __null;
    }


    enum { prime_count = 31 };
    static const unsigned long ms_primes[prime_count];


    static unsigned long GetNextPrime( unsigned long n );



    static unsigned long GetPreviousPrime( unsigned long n );

    static void CopyHashTable( _wxHashTable_NodeBase** srcTable,
                               size_t srcBuckets, _wxHashTableBase2* dst,
                               _wxHashTable_NodeBase** dstTable,
                               BucketFromNode func, ProcessNode proc );

    static void** AllocTable( size_t sz )
    {
        return (void **)calloc(sz, sizeof(void*));
    }
    static void FreeTable(void *table)
    {
        free(table);
    }
};
# 465 "/usr/local/include/wx-3.0/wx/hashmap.h"
inline bool never_grow( size_t, size_t ) { return false; }
inline bool never_shrink( size_t, size_t ) { return false; }
inline bool grow_lf70( size_t buckets, size_t items )
{
    return float(items)/float(buckets) >= 0.85f;
}
# 530 "/usr/local/include/wx-3.0/wx/hashmap.h"
struct wxIntegerHash
{
    wxIntegerHash() { }
    unsigned long operator()( long x ) const { return (unsigned long)x; }
    unsigned long operator()( unsigned long x ) const { return x; }
    unsigned long operator()( int x ) const { return (unsigned long)x; }
    unsigned long operator()( unsigned int x ) const { return x; }
    unsigned long operator()( short x ) const { return (unsigned long)x; }
    unsigned long operator()( unsigned short x ) const { return x; }

    unsigned long long operator()( long long x ) const { return static_cast<unsigned long long>(x); }
    unsigned long long operator()( unsigned long long x ) const { return x; }


    wxIntegerHash& operator=(const wxIntegerHash&) { return *this; }
};



struct wxIntegerEqual
{
    wxIntegerEqual() { }
    bool operator()( long a, long b ) const { return a == b; }
    bool operator()( unsigned long a, unsigned long b ) const { return a == b; }
    bool operator()( int a, int b ) const { return a == b; }
    bool operator()( unsigned int a, unsigned int b ) const { return a == b; }
    bool operator()( short a, short b ) const { return a == b; }
    bool operator()( unsigned short a, unsigned short b ) const { return a == b; }

    bool operator()( long long a, long long b ) const { return a == b; }
    bool operator()( unsigned long long a, unsigned long long b ) const { return a == b; }


    wxIntegerEqual& operator=(const wxIntegerEqual&) { return *this; }
};


struct wxPointerHash
{
    wxPointerHash() { }


    wxUIntPtr operator()( const void* k ) const { return wxPtrToUInt(k); }




    wxPointerHash& operator=(const wxPointerHash&) { return *this; }
};

struct wxPointerEqual
{
    wxPointerEqual() { }
    bool operator()( const void* a, const void* b ) const { return a == b; }

    wxPointerEqual& operator=(const wxPointerEqual&) { return *this; }
};


struct wxStringHash
{
    wxStringHash() {}
    unsigned long operator()( const wxString& x ) const
        { return stringHash( x.wx_str() ); }
    unsigned long operator()( const wchar_t* x ) const
        { return stringHash( x ); }
    unsigned long operator()( const char* x ) const
        { return stringHash( x ); }
# 608 "/usr/local/include/wx-3.0/wx/hashmap.h"
    static unsigned long stringHash( const wchar_t* );
    static unsigned long stringHash( const char* );

    wxStringHash& operator=(const wxStringHash&) { return *this; }
};

struct wxStringEqual
{
    wxStringEqual() {}
    bool operator()( const wxString& a, const wxString& b ) const
        { return a == b; }
    bool operator()( const wxChar* a, const wxChar* b ) const
        { return wxStrcmp( a, b ) == 0; }





    wxStringEqual& operator=(const wxStringEqual&) { return *this; }
};
# 746 "/usr/local/include/wx-3.0/wx/hashmap.h"
class wxLongToLongHashMap_wxImplementation_Pair { public: typedef long first_type; typedef long second_type; typedef long t1; typedef long t2; typedef const long const_t1; typedef const long const_t2; wxLongToLongHashMap_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class wxLongToLongHashMap_wxImplementation_KeyEx { typedef long key_type; typedef wxLongToLongHashMap_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: wxLongToLongHashMap_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; } wxLongToLongHashMap_wxImplementation_KeyEx& operator=(const wxLongToLongHashMap_wxImplementation_KeyEx&) { return *this; } }; class wxLongToLongHashMap_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef long key_type; typedef wxLongToLongHashMap_wxImplementation_Pair value_type; typedef wxIntegerHash hasher; typedef wxIntegerEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const long const_key_type; typedef const wxLongToLongHashMap_wxImplementation_Pair const_mapped_type; public: typedef wxLongToLongHashMap_wxImplementation_KeyEx key_extractor; typedef wxLongToLongHashMap_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(__null), m_ht(__null) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return __null; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; wxLongToLongHashMap_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } wxLongToLongHashMap_wxImplementation_HashTable( const Self& ht ) : m_table(__null), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~wxLongToLongHashMap_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(__null, this); } iterator end() { return iterator(__null, this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return __null; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return __null; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class wxLongToLongHashMap:public wxLongToLongHashMap_wxImplementation_HashTable { public: typedef long mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; wxLongToLongHashMap( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : wxLongToLongHashMap_wxImplementation_HashTable( hint, hf, eq, wxLongToLongHashMap_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( wxLongToLongHashMap_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( wxLongToLongHashMap_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return wxLongToLongHashMap_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } };


class wxStringToStringHashMap_wxImplementation_Pair { public: typedef wxString first_type; typedef wxString second_type; typedef wxString t1; typedef wxString t2; typedef const wxString const_t1; typedef const wxString const_t2; wxStringToStringHashMap_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class wxStringToStringHashMap_wxImplementation_KeyEx { typedef wxString key_type; typedef wxStringToStringHashMap_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: wxStringToStringHashMap_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; } wxStringToStringHashMap_wxImplementation_KeyEx& operator=(const wxStringToStringHashMap_wxImplementation_KeyEx&) { return *this; } }; class wxStringToStringHashMap_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef wxString key_type; typedef wxStringToStringHashMap_wxImplementation_Pair value_type; typedef wxStringHash hasher; typedef wxStringEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const wxString const_key_type; typedef const wxStringToStringHashMap_wxImplementation_Pair const_mapped_type; public: typedef wxStringToStringHashMap_wxImplementation_KeyEx key_extractor; typedef wxStringToStringHashMap_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(__null), m_ht(__null) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return __null; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; wxStringToStringHashMap_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } wxStringToStringHashMap_wxImplementation_HashTable( const Self& ht ) : m_table(__null), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~wxStringToStringHashMap_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(__null, this); } iterator end() { return iterator(__null, this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return __null; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return __null; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class wxStringToStringHashMap:public wxStringToStringHashMap_wxImplementation_HashTable { public: typedef wxString mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; wxStringToStringHashMap( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : wxStringToStringHashMap_wxImplementation_HashTable( hint, hf, eq, wxStringToStringHashMap_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( wxStringToStringHashMap_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( wxStringToStringHashMap_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return wxStringToStringHashMap_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } };


class wxStringToNumHashMap_wxImplementation_Pair { public: typedef wxString first_type; typedef wxUIntPtr second_type; typedef wxString t1; typedef wxUIntPtr t2; typedef const wxString const_t1; typedef const wxUIntPtr const_t2; wxStringToNumHashMap_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class wxStringToNumHashMap_wxImplementation_KeyEx { typedef wxString key_type; typedef wxStringToNumHashMap_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: wxStringToNumHashMap_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; } wxStringToNumHashMap_wxImplementation_KeyEx& operator=(const wxStringToNumHashMap_wxImplementation_KeyEx&) { return *this; } }; class wxStringToNumHashMap_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef wxString key_type; typedef wxStringToNumHashMap_wxImplementation_Pair value_type; typedef wxStringHash hasher; typedef wxStringEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const wxString const_key_type; typedef const wxStringToNumHashMap_wxImplementation_Pair const_mapped_type; public: typedef wxStringToNumHashMap_wxImplementation_KeyEx key_extractor; typedef wxStringToNumHashMap_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(__null), m_ht(__null) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return __null; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; wxStringToNumHashMap_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } wxStringToNumHashMap_wxImplementation_HashTable( const Self& ht ) : m_table(__null), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~wxStringToNumHashMap_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(__null, this); } iterator end() { return iterator(__null, this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return __null; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return __null; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class wxStringToNumHashMap:public wxStringToNumHashMap_wxImplementation_HashTable { public: typedef wxUIntPtr mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; wxStringToNumHashMap( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : wxStringToNumHashMap_wxImplementation_HashTable( hint, hf, eq, wxStringToNumHashMap_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( wxStringToNumHashMap_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( wxStringToNumHashMap_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return wxStringToNumHashMap_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } };
# 21 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 1 "/usr/local/include/wx-3.0/wx/arrstr.h" 1
# 20 "/usr/local/include/wx-3.0/wx/arrstr.h"
inline int wxStringSortAscending(wxString* s1, wxString* s2)
{
    return s1->Cmp(*s2);
}

inline int wxStringSortDescending(wxString* s1, wxString* s2)
{
    return wxStringSortAscending(s2, s1);
}
# 115 "/usr/local/include/wx-3.0/wx/arrstr.h"
# 1 "/usr/local/include/wx-3.0/wx/beforestd.h" 1
# 116 "/usr/local/include/wx-3.0/wx/arrstr.h" 2
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 1 3
# 426 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iosfwd" 1 3
# 90 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iosfwd" 3
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/wchar.h" 1 3
# 113 "/Library/Developer/CommandLineTools/usr/include/c++/v1/wchar.h" 3






# 1 "/usr/include/wchar.h" 1 3 4
# 74 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/sys/_types/_null.h" 1 3 4
# 75 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 76 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/sys/_types/_mbstate_t.h" 1 3 4
# 32 "/usr/include/sys/_types/_mbstate_t.h" 3 4
typedef __darwin_mbstate_t mbstate_t;
# 77 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/sys/_types/_wchar_t.h" 1 3 4
# 80 "/usr/include/wchar.h" 2 3 4
# 90 "/usr/include/wchar.h" 3 4
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdio.h" 1 3 4
# 91 "/usr/include/wchar.h" 2 3 4





extern "C" {
wint_t btowc(int);
wint_t fgetwc(FILE *);
wchar_t *fgetws(wchar_t * , int, FILE * );
wint_t fputwc(wchar_t, FILE *);
int fputws(const wchar_t * , FILE * );
int fwide(FILE *, int);
int fwprintf(FILE * , const wchar_t * , ...);
int fwscanf(FILE * , const wchar_t * , ...);
wint_t getwc(FILE *);
wint_t getwchar(void);
size_t mbrlen(const char * , size_t, mbstate_t * );
size_t mbrtowc(wchar_t * , const char * , size_t,
     mbstate_t * );
int mbsinit(const mbstate_t *);
size_t mbsrtowcs(wchar_t * , const char ** , size_t,
     mbstate_t * );
wint_t putwc(wchar_t, FILE *);
wint_t putwchar(wchar_t);
int swprintf(wchar_t * , size_t, const wchar_t * , ...);
int swscanf(const wchar_t * , const wchar_t * , ...);
wint_t ungetwc(wint_t, FILE *);
int vfwprintf(FILE * , const wchar_t * ,
     __darwin_va_list);
int vswprintf(wchar_t * , size_t, const wchar_t * ,
     __darwin_va_list);
int vwprintf(const wchar_t * , __darwin_va_list);
size_t wcrtomb(char * , wchar_t, mbstate_t * );
wchar_t *wcscat(wchar_t * , const wchar_t * );
wchar_t *wcschr(const wchar_t *, wchar_t);
int wcscmp(const wchar_t *, const wchar_t *);
int wcscoll(const wchar_t *, const wchar_t *);
wchar_t *wcscpy(wchar_t * , const wchar_t * );
size_t wcscspn(const wchar_t *, const wchar_t *);
size_t wcsftime(wchar_t * , size_t, const wchar_t * ,
     const struct tm * ) __asm("_" "wcsftime" );
size_t wcslen(const wchar_t *);
wchar_t *wcsncat(wchar_t * , const wchar_t * , size_t);
int wcsncmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *wcsncpy(wchar_t * , const wchar_t * , size_t);
wchar_t *wcspbrk(const wchar_t *, const wchar_t *);
wchar_t *wcsrchr(const wchar_t *, wchar_t);
size_t wcsrtombs(char * , const wchar_t ** , size_t,
     mbstate_t * );
size_t wcsspn(const wchar_t *, const wchar_t *);
wchar_t *wcsstr(const wchar_t * , const wchar_t * );
size_t wcsxfrm(wchar_t * , const wchar_t * , size_t);
int wctob(wint_t);
double wcstod(const wchar_t * , wchar_t ** );
wchar_t *wcstok(wchar_t * , const wchar_t * ,
     wchar_t ** );
long wcstol(const wchar_t * , wchar_t ** , int);
unsigned long
  wcstoul(const wchar_t * , wchar_t ** , int);
wchar_t *wmemchr(const wchar_t *, wchar_t, size_t);
int wmemcmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *wmemcpy(wchar_t * , const wchar_t * , size_t);
wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t);
wchar_t *wmemset(wchar_t *, wchar_t, size_t);
int wprintf(const wchar_t * , ...);
int wscanf(const wchar_t * , ...);
int wcswidth(const wchar_t *, size_t);
int wcwidth(wchar_t);
}
# 169 "/usr/include/wchar.h" 3 4
extern "C" {
int vfwscanf(FILE * , const wchar_t * ,
     __darwin_va_list);
int vswscanf(const wchar_t * , const wchar_t * ,
     __darwin_va_list);
int vwscanf(const wchar_t * , __darwin_va_list);
float wcstof(const wchar_t * , wchar_t ** );
long double
 wcstold(const wchar_t * , wchar_t ** );

long long
 wcstoll(const wchar_t * , wchar_t ** , int);
unsigned long long
 wcstoull(const wchar_t * , wchar_t ** , int);

}
# 194 "/usr/include/wchar.h" 3 4
extern "C" {
size_t mbsnrtowcs(wchar_t * , const char ** , size_t,
            size_t, mbstate_t * );
wchar_t *wcpcpy(wchar_t * , const wchar_t * ) __attribute__((availability(macosx,introduced=10.7)));
wchar_t *wcpncpy(wchar_t * , const wchar_t * , size_t) __attribute__((availability(macosx,introduced=10.7)));
wchar_t *wcsdup(const wchar_t *) __attribute__((availability(macosx,introduced=10.7)));
int wcscasecmp(const wchar_t *, const wchar_t *) __attribute__((availability(macosx,introduced=10.7)));
int wcsncasecmp(const wchar_t *, const wchar_t *, size_t n) __attribute__((availability(macosx,introduced=10.7)));
size_t wcsnlen(const wchar_t *, size_t) __attribute__((availability(macosx,introduced=10.7)));
size_t wcsnrtombs(char * , const wchar_t ** , size_t,
            size_t, mbstate_t * );
FILE *open_wmemstream(wchar_t ** __bufp, size_t * __sizep) __attribute__((availability(macos,introduced=10.13))) __attribute__((availability(ios,introduced=11.0))) __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
}







extern "C" {
wchar_t *fgetwln(FILE * , size_t *) __attribute__((availability(macosx,introduced=10.7)));
size_t wcslcat(wchar_t *, const wchar_t *, size_t);
size_t wcslcpy(wchar_t *, const wchar_t *, size_t);
}
# 120 "/Library/Developer/CommandLineTools/usr/include/c++/v1/wchar.h" 2 3
# 131 "/Library/Developer/CommandLineTools/usr/include/c++/v1/wchar.h" 3
extern "C++" {
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
wchar_t* __libcpp_wcschr(const wchar_t* __s, wchar_t __c) {return (wchar_t*)wcschr(__s, __c);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
const wchar_t* wcschr(const wchar_t* __s, wchar_t __c) {return __libcpp_wcschr(__s, __c);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
      wchar_t* wcschr( wchar_t* __s, wchar_t __c) {return __libcpp_wcschr(__s, __c);}

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
wchar_t* __libcpp_wcspbrk(const wchar_t* __s1, const wchar_t* __s2) {return (wchar_t*)wcspbrk(__s1, __s2);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
const wchar_t* wcspbrk(const wchar_t* __s1, const wchar_t* __s2) {return __libcpp_wcspbrk(__s1, __s2);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
      wchar_t* wcspbrk( wchar_t* __s1, const wchar_t* __s2) {return __libcpp_wcspbrk(__s1, __s2);}

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
wchar_t* __libcpp_wcsrchr(const wchar_t* __s, wchar_t __c) {return (wchar_t*)wcsrchr(__s, __c);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
const wchar_t* wcsrchr(const wchar_t* __s, wchar_t __c) {return __libcpp_wcsrchr(__s, __c);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
      wchar_t* wcsrchr( wchar_t* __s, wchar_t __c) {return __libcpp_wcsrchr(__s, __c);}

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
wchar_t* __libcpp_wcsstr(const wchar_t* __s1, const wchar_t* __s2) {return (wchar_t*)wcsstr(__s1, __s2);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
const wchar_t* wcsstr(const wchar_t* __s1, const wchar_t* __s2) {return __libcpp_wcsstr(__s1, __s2);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
      wchar_t* wcsstr( wchar_t* __s1, const wchar_t* __s2) {return __libcpp_wcsstr(__s1, __s2);}

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
wchar_t* __libcpp_wmemchr(const wchar_t* __s, wchar_t __c, size_t __n) {return (wchar_t*)wmemchr(__s, __c, __n);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
const wchar_t* wmemchr(const wchar_t* __s, wchar_t __c, size_t __n) {return __libcpp_wmemchr(__s, __c, __n);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) __attribute__ ((__enable_if__(true, "")))
      wchar_t* wmemchr( wchar_t* __s, wchar_t __c, size_t __n) {return __libcpp_wmemchr(__s, __c, __n);}
}
# 91 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iosfwd" 2 3
# 94 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iosfwd" 3


namespace std {inline namespace __1 {

class __attribute__ ((__visibility__("default"))) ios_base;

template<class _CharT> struct __attribute__ ((__type_visibility__("default"))) char_traits;
template<class _Tp> class __attribute__ ((__type_visibility__("default"))) allocator;

template <class _CharT, class _Traits = char_traits<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_ios;

template <class _CharT, class _Traits = char_traits<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_streambuf;
template <class _CharT, class _Traits = char_traits<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_istream;
template <class _CharT, class _Traits = char_traits<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_ostream;
template <class _CharT, class _Traits = char_traits<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_iostream;

template <class _CharT, class _Traits = char_traits<_CharT>,
          class _Allocator = allocator<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_stringbuf;
template <class _CharT, class _Traits = char_traits<_CharT>,
          class _Allocator = allocator<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_istringstream;
template <class _CharT, class _Traits = char_traits<_CharT>,
          class _Allocator = allocator<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_ostringstream;
template <class _CharT, class _Traits = char_traits<_CharT>,
          class _Allocator = allocator<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_stringstream;

template <class _CharT, class _Traits = char_traits<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_filebuf;
template <class _CharT, class _Traits = char_traits<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_ifstream;
template <class _CharT, class _Traits = char_traits<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_ofstream;
template <class _CharT, class _Traits = char_traits<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_fstream;

template <class _CharT, class _Traits = char_traits<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) istreambuf_iterator;
template <class _CharT, class _Traits = char_traits<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) ostreambuf_iterator;

typedef basic_ios<char> ios;
typedef basic_ios<wchar_t> wios;

typedef basic_streambuf<char> streambuf;
typedef basic_istream<char> istream;
typedef basic_ostream<char> ostream;
typedef basic_iostream<char> iostream;

typedef basic_stringbuf<char> stringbuf;
typedef basic_istringstream<char> istringstream;
typedef basic_ostringstream<char> ostringstream;
typedef basic_stringstream<char> stringstream;

typedef basic_filebuf<char> filebuf;
typedef basic_ifstream<char> ifstream;
typedef basic_ofstream<char> ofstream;
typedef basic_fstream<char> fstream;

typedef basic_streambuf<wchar_t> wstreambuf;
typedef basic_istream<wchar_t> wistream;
typedef basic_ostream<wchar_t> wostream;
typedef basic_iostream<wchar_t> wiostream;

typedef basic_stringbuf<wchar_t> wstringbuf;
typedef basic_istringstream<wchar_t> wistringstream;
typedef basic_ostringstream<wchar_t> wostringstream;
typedef basic_stringstream<wchar_t> wstringstream;

typedef basic_filebuf<wchar_t> wfilebuf;
typedef basic_ifstream<wchar_t> wifstream;
typedef basic_ofstream<wchar_t> wofstream;
typedef basic_fstream<wchar_t> wfstream;

template <class _State> class __attribute__ ((__type_visibility__("default"))) fpos;
typedef fpos<mbstate_t> streampos;
typedef fpos<mbstate_t> wstreampos;

typedef fpos<mbstate_t> u16streampos;
typedef fpos<mbstate_t> u32streampos;






typedef long long streamoff;


template <class _CharT,
          class _Traits = char_traits<_CharT>,
          class _Allocator = allocator<_CharT> >
    class __attribute__ ((__type_visibility__("default"))) basic_string;
typedef basic_string<char, char_traits<char>, allocator<char> > string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wstring;



template <class _Tp, class _Alloc = allocator<_Tp> >
class __attribute__ ((__type_visibility__("default"))) vector;

} }
# 427 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 2 3
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__functional_base" 1 3
# 16 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__functional_base" 3
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/typeinfo" 1 3
# 63 "/Library/Developer/CommandLineTools/usr/include/c++/v1/typeinfo" 3
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/cstdint" 1 3
# 149 "/Library/Developer/CommandLineTools/usr/include/c++/v1/cstdint" 3


namespace std {inline namespace __1 {

using::int8_t;
using::int16_t;
using::int32_t;
using::int64_t;

using::uint8_t;
using::uint16_t;
using::uint32_t;
using::uint64_t;

using::int_least8_t;
using::int_least16_t;
using::int_least32_t;
using::int_least64_t;

using::uint_least8_t;
using::uint_least16_t;
using::uint_least32_t;
using::uint_least64_t;

using::int_fast8_t;
using::int_fast16_t;
using::int_fast32_t;
using::int_fast64_t;

using::uint_fast8_t;
using::uint_fast16_t;
using::uint_fast32_t;
using::uint_fast64_t;

using::intptr_t;
using::uintptr_t;

using::intmax_t;
using::uintmax_t;

} }
# 64 "/Library/Developer/CommandLineTools/usr/include/c++/v1/typeinfo" 2 3
# 70 "/Library/Developer/CommandLineTools/usr/include/c++/v1/typeinfo" 3
# 80 "/Library/Developer/CommandLineTools/usr/include/c++/v1/typeinfo" 3
namespace std
{


class __attribute__ ((__visibility__("default"))) type_info
{
    type_info& operator=(const type_info&);
    type_info(const type_info&);







protected:
# 104 "/Library/Developer/CommandLineTools/usr/include/c++/v1/typeinfo" 3
    const char *__type_name;

    __attribute__ ((__visibility__("hidden"), __always_inline__))
    explicit type_info(const char* __n) : __type_name(__n) {}


public:
    __attribute__((availability(macosx,strict,introduced=10.9))) __attribute__((availability(ios,strict,introduced=7.0)))
    virtual ~type_info();
# 154 "/Library/Developer/CommandLineTools/usr/include/c++/v1/typeinfo" 3
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    const char* name() const throw()
    { return __type_name; }

    __attribute__ ((__visibility__("hidden"), __always_inline__))
    bool before(const type_info& __arg) const throw()
    { return __type_name < __arg.__type_name; }

    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t hash_code() const throw()
    { return reinterpret_cast<size_t>(__type_name); }

    __attribute__ ((__visibility__("hidden"), __always_inline__))
    bool operator==(const type_info& __arg) const throw()
    { return __type_name == __arg.__type_name; }


    __attribute__ ((__visibility__("hidden"), __always_inline__))
    bool operator!=(const type_info& __arg) const throw()
    { return !operator==(__arg); }
};

class __attribute__ ((__visibility__("default"))) bad_cast
    : public exception
{
public:
    bad_cast() throw();
    virtual ~bad_cast() throw();
    virtual const char* what() const throw();
};

class __attribute__ ((__visibility__("default"))) bad_typeid
    : public exception
{
public:
    bad_typeid() throw();
    virtual ~bad_typeid() throw();
    virtual const char* what() const throw();
};



}

namespace std {inline namespace __1 {
__attribute__ ((noreturn)) inline __attribute__ ((__visibility__("hidden"), __always_inline__))
void __throw_bad_cast()
{

    throw bad_cast();



}
} }
# 17 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__functional_base" 2 3


# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 1 3
# 198 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 3
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__tuple" 1 3
# 20 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__tuple" 3



namespace std {inline namespace __1 {

template <class _Tp> class __attribute__ ((__type_visibility__("default"))) tuple_size;
# 52 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__tuple" 3
template <class _Tp> class __attribute__ ((__type_visibility__("default"))) tuple_size<const _Tp> : public tuple_size<_Tp> {};
template <class _Tp> class __attribute__ ((__type_visibility__("default"))) tuple_size<volatile _Tp> : public tuple_size<_Tp> {};
template <class _Tp> class __attribute__ ((__type_visibility__("default"))) tuple_size<const volatile _Tp> : public tuple_size<_Tp> {};


template <size_t _Ip, class _Tp> class __attribute__ ((__type_visibility__("default"))) tuple_element;

template <size_t _Ip, class _Tp>
class __attribute__ ((__type_visibility__("default"))) tuple_element<_Ip, const _Tp>
{
public:
    typedef typename add_const<typename tuple_element<_Ip, _Tp>::type>::type type;
};

template <size_t _Ip, class _Tp>
class __attribute__ ((__type_visibility__("default"))) tuple_element<_Ip, volatile _Tp>
{
public:
    typedef typename add_volatile<typename tuple_element<_Ip, _Tp>::type>::type type;
};

template <size_t _Ip, class _Tp>
class __attribute__ ((__type_visibility__("default"))) tuple_element<_Ip, const volatile _Tp>
{
public:
    typedef typename add_cv<typename tuple_element<_Ip, _Tp>::type>::type type;
};

template <class _Tp> struct __tuple_like : false_type {};

template <class _Tp> struct __tuple_like<const _Tp> : public __tuple_like<_Tp> {};
template <class _Tp> struct __tuple_like<volatile _Tp> : public __tuple_like<_Tp> {};
template <class _Tp> struct __tuple_like<const volatile _Tp> : public __tuple_like<_Tp> {};
# 197 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__tuple" 3
template <class _T1, class _T2> struct __tuple_like<pair<_T1, _T2> > : true_type {};

template <size_t _Ip, class _T1, class _T2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
typename tuple_element<_Ip, pair<_T1, _T2> >::type&
get(pair<_T1, _T2>&) throw();

template <size_t _Ip, class _T1, class _T2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
const typename tuple_element<_Ip, pair<_T1, _T2> >::type&
get(const pair<_T1, _T2>&) throw();
# 223 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__tuple" 3
template <class _Tp, size_t _Size> struct __attribute__ ((__type_visibility__("default"))) array;

template <class _Tp, size_t _Size> struct __tuple_like<array<_Tp, _Size> > : true_type {};

template <size_t _Ip, class _Tp, size_t _Size>
__attribute__ ((__visibility__("hidden"), __always_inline__))
_Tp&
get(array<_Tp, _Size>&) throw();

template <size_t _Ip, class _Tp, size_t _Size>
__attribute__ ((__visibility__("hidden"), __always_inline__))
const _Tp&
get(const array<_Tp, _Size>&) throw();
# 554 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__tuple" 3
} }
# 199 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 2 3

# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/initializer_list" 1 3
# 51 "/Library/Developer/CommandLineTools/usr/include/c++/v1/initializer_list" 3


namespace std
{
# 116 "/Library/Developer/CommandLineTools/usr/include/c++/v1/initializer_list" 3
}
# 201 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 2 3

# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/cstring" 1 3
# 65 "/Library/Developer/CommandLineTools/usr/include/c++/v1/cstring" 3


namespace std {inline namespace __1 {

using ::size_t;
using ::memcpy;
using ::memmove;
using ::strcpy;
using ::strncpy;
using ::strcat;
using ::strncat;
using ::memcmp;
using ::strcmp;
using ::strncmp;
using ::strcoll;
using ::strxfrm;
using ::memchr;
using ::strchr;
using ::strcspn;
using ::strpbrk;
using ::strrchr;
using ::strspn;
using ::strstr;

using ::strtok;

using ::memset;
using ::strerror;
using ::strlen;

} }
# 203 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 2 3

# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__debug" 1 3
# 18 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__debug" 3
# 54 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__debug" 3
class __attribute__ ((__visibility__("default"))) __libcpp_debug_exception;


namespace std {inline namespace __1 {

struct __attribute__ ((__type_visibility__("default"))) __libcpp_debug_info {
  __attribute__ ((__visibility__("hidden"), __always_inline__))
  __libcpp_debug_info()
      : __file_(std::__1::__get_nullptr_t()), __line_(-1), __pred_(std::__1::__get_nullptr_t()), __msg_(std::__1::__get_nullptr_t()) {}
  __attribute__ ((__visibility__("hidden"), __always_inline__))
  __libcpp_debug_info(const char* __f, int __l, const char* __p, const char* __m)
    : __file_(__f), __line_(__l), __pred_(__p), __msg_(__m) {}
  const char* __file_;
  int __line_;
  const char* __pred_;
  const char* __msg_;
};


typedef void(*__libcpp_debug_function_type)(__libcpp_debug_info const&);



extern __libcpp_debug_function_type __libcpp_debug_function;


__attribute__ ((noreturn)) __attribute__ ((__visibility__("default")))
void __libcpp_abort_debug_function(__libcpp_debug_info const&);



 __attribute__ ((noreturn)) __attribute__ ((__visibility__("default")))
void __libcpp_throw_debug_function(__libcpp_debug_info const&);



__attribute__ ((__visibility__("default")))
bool __libcpp_set_debug_function(__libcpp_debug_function_type __func);
# 299 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__debug" 3
} }
# 205 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 2 3
# 208 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 3


namespace std {inline namespace __1 {

namespace rel_ops
{

template<class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator!=(const _Tp& __x, const _Tp& __y)
{
    return !(__x == __y);
}

template<class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator> (const _Tp& __x, const _Tp& __y)
{
    return __y < __x;
}

template<class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator<=(const _Tp& __x, const _Tp& __y)
{
    return !(__y < __x);
}

template<class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator>=(const _Tp& __x, const _Tp& __y)
{
    return !(__x < __y);
}

}




template <class _ForwardIterator1, class _ForwardIterator2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
_ForwardIterator2
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)
{
    for(; __first1 != __last1; ++__first1, (void) ++__first2)
        swap(*__first1, *__first2);
    return __first2;
}


template<class _Tp, size_t _Np>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename enable_if<
    __is_swappable<_Tp>::value
>::type
swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np])
{
    std::__1::swap_ranges(__a, __a + _Np, __b);
}

template <class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
# 283 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 3
const _Tp&

move_if_noexcept(_Tp& __x) throw()
{
    return std::__1::move(__x);
}






struct __attribute__ ((__type_visibility__("default"))) piecewise_construct_t { };

extern const piecewise_construct_t piecewise_construct;
# 311 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 3
template <class _T1, class _T2>
struct __attribute__ ((__type_visibility__("default"))) pair



{
    typedef _T1 first_type;
    typedef _T2 second_type;

    _T1 first;
    _T2 second;
# 331 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 3
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    pair() : first(), second() {}

    __attribute__ ((__visibility__("hidden"), __always_inline__))
    pair(_T1 const& __t1, _T2 const& __t2) : first(__t1), second(__t2) {}

    template <class _U1, class _U2>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}

    __attribute__ ((__visibility__("hidden"), __always_inline__))
    pair& operator=(pair const& __p) {
        first = __p.first;
        second = __p.second;
        return *this;
    }
# 528 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 3
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    void
    swap(pair& __p)

    {
        using std::__1::swap;
        swap(first, __p.first);
        swap(second, __p.second);
    }
private:
# 546 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 3
};

template <class _T1, class _T2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator==(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
{
    return __x.first == __y.first && __x.second == __y.second;
}

template <class _T1, class _T2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator!=(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
{
    return !(__x == __y);
}

template <class _T1, class _T2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator< (const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
{
    return __x.first < __y.first || (!(__y.first < __x.first) && __x.second < __y.second);
}

template <class _T1, class _T2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator> (const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
{
    return __y < __x;
}

template <class _T1, class _T2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator>=(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
{
    return !(__x < __y);
}

template <class _T1, class _T2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator<=(const pair<_T1,_T2>& __x, const pair<_T1,_T2>& __y)
{
    return !(__y < __x);
}

template <class _T1, class _T2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename enable_if
<
    __is_swappable<_T1>::value &&
    __is_swappable<_T2>::value,
    void
>::type
swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)


{
    __x.swap(__y);
}
# 642 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 3
template <class _T1, class _T2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
pair<_T1,_T2>
make_pair(_T1 __x, _T2 __y)
{
    return pair<_T1, _T2>(__x, __y);
}



template <class _T1, class _T2>
  class __attribute__ ((__type_visibility__("default"))) tuple_size<pair<_T1, _T2> >
    : public integral_constant<size_t, 2> {};

template <size_t _Ip, class _T1, class _T2>
class __attribute__ ((__type_visibility__("default"))) tuple_element<_Ip, pair<_T1, _T2> >
{
    _Static_assert(_Ip < 2, "Index out of bounds in std::tuple_element<std::pair<T1, T2>>");
};

template <class _T1, class _T2>
class __attribute__ ((__type_visibility__("default"))) tuple_element<0, pair<_T1, _T2> >
{
public:
    typedef _T1 type;
};

template <class _T1, class _T2>
class __attribute__ ((__type_visibility__("default"))) tuple_element<1, pair<_T1, _T2> >
{
public:
    typedef _T2 type;
};

template <size_t _Ip> struct __get_pair;

template <>
struct __get_pair<0>
{
    template <class _T1, class _T2>
    static
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    _T1&
    get(pair<_T1, _T2>& __p) throw() {return __p.first;}

    template <class _T1, class _T2>
    static
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    const _T1&
    get(const pair<_T1, _T2>& __p) throw() {return __p.first;}
# 706 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 3
};

template <>
struct __get_pair<1>
{
    template <class _T1, class _T2>
    static
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    _T2&
    get(pair<_T1, _T2>& __p) throw() {return __p.second;}

    template <class _T1, class _T2>
    static
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    const _T2&
    get(const pair<_T1, _T2>& __p) throw() {return __p.second;}
# 736 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 3
};

template <size_t _Ip, class _T1, class _T2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename tuple_element<_Ip, pair<_T1, _T2> >::type&
get(pair<_T1, _T2>& __p) throw()
{
    return __get_pair<_Ip>::get(__p);
}

template <size_t _Ip, class _T1, class _T2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
const typename tuple_element<_Ip, pair<_T1, _T2> >::type&
get(const pair<_T1, _T2>& __p) throw()
{
    return __get_pair<_Ip>::get(__p);
}
# 941 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 3
template <class _Arg, class _Result>
struct __attribute__ ((__type_visibility__("default"))) unary_function
{
    typedef _Arg argument_type;
    typedef _Result result_type;
};

template <class _Size>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
_Size
__loadword(const void* __p)
{
    _Size __r;
    std::memcpy(&__r, __p, sizeof(__r));
    return __r;
}




template <class _Size, size_t = sizeof(_Size)*8>
struct __murmur2_or_cityhash;

template <class _Size>
struct __murmur2_or_cityhash<_Size, 32>
{
    inline _Size operator()(const void* __key, _Size __len)
         __attribute__((__no_sanitize__("unsigned-integer-overflow")));
};


template <class _Size>
_Size
__murmur2_or_cityhash<_Size, 32>::operator()(const void* __key, _Size __len)
{
    const _Size __m = 0x5bd1e995;
    const _Size __r = 24;
    _Size __h = __len;
    const unsigned char* __data = static_cast<const unsigned char*>(__key);
    for (; __len >= 4; __data += 4, __len -= 4)
    {
        _Size __k = __loadword<_Size>(__data);
        __k *= __m;
        __k ^= __k >> __r;
        __k *= __m;
        __h *= __m;
        __h ^= __k;
    }
    switch (__len)
    {
    case 3:
        __h ^= __data[2] << 16;
    case 2:
        __h ^= __data[1] << 8;
    case 1:
        __h ^= __data[0];
        __h *= __m;
    }
    __h ^= __h >> 13;
    __h *= __m;
    __h ^= __h >> 15;
    return __h;
}

template <class _Size>
struct __murmur2_or_cityhash<_Size, 64>
{
    inline _Size operator()(const void* __key, _Size __len) __attribute__((__no_sanitize__("unsigned-integer-overflow")));

 private:

  static const _Size __k0 = 0xc3a5c85c97cb3127ULL;
  static const _Size __k1 = 0xb492b66fbe98f273ULL;
  static const _Size __k2 = 0x9ae16a3b2f90404fULL;
  static const _Size __k3 = 0xc949d7c7509e6557ULL;

  static _Size __rotate(_Size __val, int __shift) {
    return __shift == 0 ? __val : ((__val >> __shift) | (__val << (64 - __shift)));
  }

  static _Size __rotate_by_at_least_1(_Size __val, int __shift) {
    return (__val >> __shift) | (__val << (64 - __shift));
  }

  static _Size __shift_mix(_Size __val) {
    return __val ^ (__val >> 47);
  }

  static _Size __hash_len_16(_Size __u, _Size __v)
     __attribute__((__no_sanitize__("unsigned-integer-overflow")))
  {
    const _Size __mul = 0x9ddfea08eb382d69ULL;
    _Size __a = (__u ^ __v) * __mul;
    __a ^= (__a >> 47);
    _Size __b = (__v ^ __a) * __mul;
    __b ^= (__b >> 47);
    __b *= __mul;
    return __b;
  }

  static _Size __hash_len_0_to_16(const char* __s, _Size __len)
     __attribute__((__no_sanitize__("unsigned-integer-overflow")))
  {
    if (__len > 8) {
      const _Size __a = __loadword<_Size>(__s);
      const _Size __b = __loadword<_Size>(__s + __len - 8);
      return __hash_len_16(__a, __rotate_by_at_least_1(__b + __len, __len)) ^ __b;
    }
    if (__len >= 4) {
      const uint32_t __a = __loadword<uint32_t>(__s);
      const uint32_t __b = __loadword<uint32_t>(__s + __len - 4);
      return __hash_len_16(__len + (__a << 3), __b);
    }
    if (__len > 0) {
      const unsigned char __a = __s[0];
      const unsigned char __b = __s[__len >> 1];
      const unsigned char __c = __s[__len - 1];
      const uint32_t __y = static_cast<uint32_t>(__a) +
                           (static_cast<uint32_t>(__b) << 8);
      const uint32_t __z = __len + (static_cast<uint32_t>(__c) << 2);
      return __shift_mix(__y * __k2 ^ __z * __k3) * __k2;
    }
    return __k2;
  }

  static _Size __hash_len_17_to_32(const char *__s, _Size __len)
     __attribute__((__no_sanitize__("unsigned-integer-overflow")))
  {
    const _Size __a = __loadword<_Size>(__s) * __k1;
    const _Size __b = __loadword<_Size>(__s + 8);
    const _Size __c = __loadword<_Size>(__s + __len - 8) * __k2;
    const _Size __d = __loadword<_Size>(__s + __len - 16) * __k0;
    return __hash_len_16(__rotate(__a - __b, 43) + __rotate(__c, 30) + __d,
                         __a + __rotate(__b ^ __k3, 20) - __c + __len);
  }



  static pair<_Size, _Size> __weak_hash_len_32_with_seeds(
      _Size __w, _Size __x, _Size __y, _Size __z, _Size __a, _Size __b)
        __attribute__((__no_sanitize__("unsigned-integer-overflow")))
  {
    __a += __w;
    __b = __rotate(__b + __a + __z, 21);
    const _Size __c = __a;
    __a += __x;
    __a += __y;
    __b += __rotate(__a, 44);
    return pair<_Size, _Size>(__a + __z, __b + __c);
  }


  static pair<_Size, _Size> __weak_hash_len_32_with_seeds(
      const char* __s, _Size __a, _Size __b)
    __attribute__((__no_sanitize__("unsigned-integer-overflow")))
  {
    return __weak_hash_len_32_with_seeds(__loadword<_Size>(__s),
                                         __loadword<_Size>(__s + 8),
                                         __loadword<_Size>(__s + 16),
                                         __loadword<_Size>(__s + 24),
                                         __a,
                                         __b);
  }


  static _Size __hash_len_33_to_64(const char *__s, size_t __len)
    __attribute__((__no_sanitize__("unsigned-integer-overflow")))
  {
    _Size __z = __loadword<_Size>(__s + 24);
    _Size __a = __loadword<_Size>(__s) +
                (__len + __loadword<_Size>(__s + __len - 16)) * __k0;
    _Size __b = __rotate(__a + __z, 52);
    _Size __c = __rotate(__a, 37);
    __a += __loadword<_Size>(__s + 8);
    __c += __rotate(__a, 7);
    __a += __loadword<_Size>(__s + 16);
    _Size __vf = __a + __z;
    _Size __vs = __b + __rotate(__a, 31) + __c;
    __a = __loadword<_Size>(__s + 16) + __loadword<_Size>(__s + __len - 32);
    __z += __loadword<_Size>(__s + __len - 8);
    __b = __rotate(__a + __z, 52);
    __c = __rotate(__a, 37);
    __a += __loadword<_Size>(__s + __len - 24);
    __c += __rotate(__a, 7);
    __a += __loadword<_Size>(__s + __len - 16);
    _Size __wf = __a + __z;
    _Size __ws = __b + __rotate(__a, 31) + __c;
    _Size __r = __shift_mix((__vf + __ws) * __k2 + (__wf + __vs) * __k0);
    return __shift_mix(__r * __k0 + __vs) * __k2;
  }
};


template <class _Size>
_Size
__murmur2_or_cityhash<_Size, 64>::operator()(const void* __key, _Size __len)
{
  const char* __s = static_cast<const char*>(__key);
  if (__len <= 32) {
    if (__len <= 16) {
      return __hash_len_0_to_16(__s, __len);
    } else {
      return __hash_len_17_to_32(__s, __len);
    }
  } else if (__len <= 64) {
    return __hash_len_33_to_64(__s, __len);
  }



  _Size __x = __loadword<_Size>(__s + __len - 40);
  _Size __y = __loadword<_Size>(__s + __len - 16) +
              __loadword<_Size>(__s + __len - 56);
  _Size __z = __hash_len_16(__loadword<_Size>(__s + __len - 48) + __len,
                          __loadword<_Size>(__s + __len - 24));
  pair<_Size, _Size> __v = __weak_hash_len_32_with_seeds(__s + __len - 64, __len, __z);
  pair<_Size, _Size> __w = __weak_hash_len_32_with_seeds(__s + __len - 32, __y + __k1, __x);
  __x = __x * __k1 + __loadword<_Size>(__s);


  __len = (__len - 1) & ~static_cast<_Size>(63);
  do {
    __x = __rotate(__x + __y + __v.first + __loadword<_Size>(__s + 8), 37) * __k1;
    __y = __rotate(__y + __v.second + __loadword<_Size>(__s + 48), 42) * __k1;
    __x ^= __w.second;
    __y += __v.first + __loadword<_Size>(__s + 40);
    __z = __rotate(__z + __w.first, 33) * __k1;
    __v = __weak_hash_len_32_with_seeds(__s, __v.second * __k1, __x + __w.first);
    __w = __weak_hash_len_32_with_seeds(__s + 32, __z + __w.second,
                                        __y + __loadword<_Size>(__s + 16));
    std::swap(__z, __x);
    __s += 64;
    __len -= 64;
  } while (__len != 0);
  return __hash_len_16(
      __hash_len_16(__v.first, __w.first) + __shift_mix(__y) * __k1 + __z,
      __hash_len_16(__v.second, __w.second) + __x);
}

template <class _Tp, size_t = sizeof(_Tp) / sizeof(size_t)>
struct __scalar_hash;

template <class _Tp>
struct __scalar_hash<_Tp, 0>
    : public unary_function<_Tp, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(_Tp __v) const throw()
    {
        union
        {
            _Tp __t;
            size_t __a;
        } __u;
        __u.__a = 0;
        __u.__t = __v;
        return __u.__a;
    }
};

template <class _Tp>
struct __scalar_hash<_Tp, 1>
    : public unary_function<_Tp, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(_Tp __v) const throw()
    {
        union
        {
            _Tp __t;
            size_t __a;
        } __u;
        __u.__t = __v;
        return __u.__a;
    }
};

template <class _Tp>
struct __scalar_hash<_Tp, 2>
    : public unary_function<_Tp, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(_Tp __v) const throw()
    {
        union
        {
            _Tp __t;
            struct
            {
                size_t __a;
                size_t __b;
            } __s;
        } __u;
        __u.__t = __v;
        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
    }
};

template <class _Tp>
struct __scalar_hash<_Tp, 3>
    : public unary_function<_Tp, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(_Tp __v) const throw()
    {
        union
        {
            _Tp __t;
            struct
            {
                size_t __a;
                size_t __b;
                size_t __c;
            } __s;
        } __u;
        __u.__t = __v;
        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
    }
};

template <class _Tp>
struct __scalar_hash<_Tp, 4>
    : public unary_function<_Tp, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(_Tp __v) const throw()
    {
        union
        {
            _Tp __t;
            struct
            {
                size_t __a;
                size_t __b;
                size_t __c;
                size_t __d;
            } __s;
        } __u;
        __u.__t = __v;
        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
    }
};

struct _PairT {
  size_t first;
  size_t second;
};

__attribute__ ((__visibility__("hidden"), __always_inline__))
inline size_t __hash_combine(size_t __lhs, size_t __rhs) throw() {
    typedef __scalar_hash<_PairT> _HashT;
    const _PairT __p = {__lhs, __rhs};
    return _HashT()(__p);
}

template<class _Tp>
struct __attribute__ ((__type_visibility__("default"))) hash<_Tp*>
    : public unary_function<_Tp*, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(_Tp* __v) const throw()
    {
        union
        {
            _Tp* __t;
            size_t __a;
        } __u;
        __u.__t = __v;
        return __murmur2_or_cityhash<size_t>()(&__u, sizeof(__u));
    }
};


template <>
struct __attribute__ ((__type_visibility__("default"))) hash<bool>
    : public unary_function<bool, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(bool __v) const throw() {return static_cast<size_t>(__v);}
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<char>
    : public unary_function<char, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(char __v) const throw() {return static_cast<size_t>(__v);}
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<signed char>
    : public unary_function<signed char, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(signed char __v) const throw() {return static_cast<size_t>(__v);}
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<unsigned char>
    : public unary_function<unsigned char, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(unsigned char __v) const throw() {return static_cast<size_t>(__v);}
};



template <>
struct __attribute__ ((__type_visibility__("default"))) hash<char16_t>
    : public unary_function<char16_t, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(char16_t __v) const throw() {return static_cast<size_t>(__v);}
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<char32_t>
    : public unary_function<char32_t, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(char32_t __v) const throw() {return static_cast<size_t>(__v);}
};



template <>
struct __attribute__ ((__type_visibility__("default"))) hash<wchar_t>
    : public unary_function<wchar_t, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(wchar_t __v) const throw() {return static_cast<size_t>(__v);}
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<short>
    : public unary_function<short, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(short __v) const throw() {return static_cast<size_t>(__v);}
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<unsigned short>
    : public unary_function<unsigned short, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(unsigned short __v) const throw() {return static_cast<size_t>(__v);}
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<int>
    : public unary_function<int, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(int __v) const throw() {return static_cast<size_t>(__v);}
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<unsigned int>
    : public unary_function<unsigned int, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(unsigned int __v) const throw() {return static_cast<size_t>(__v);}
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<long>
    : public unary_function<long, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(long __v) const throw() {return static_cast<size_t>(__v);}
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<unsigned long>
    : public unary_function<unsigned long, size_t>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(unsigned long __v) const throw() {return static_cast<size_t>(__v);}
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<long long>
    : public __scalar_hash<long long>
{
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<unsigned long long>
    : public __scalar_hash<unsigned long long>
{
};



template <>
struct __attribute__ ((__type_visibility__("default"))) hash<__int128_t>
    : public __scalar_hash<__int128_t>
{
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<__uint128_t>
    : public __scalar_hash<__uint128_t>
{
};



template <>
struct __attribute__ ((__type_visibility__("default"))) hash<float>
    : public __scalar_hash<float>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(float __v) const throw()
    {

       if (__v == 0)
           return 0;
        return __scalar_hash<float>::operator()(__v);
    }
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<double>
    : public __scalar_hash<double>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(double __v) const throw()
    {

       if (__v == 0)
           return 0;
        return __scalar_hash<double>::operator()(__v);
    }
};

template <>
struct __attribute__ ((__type_visibility__("default"))) hash<long double>
    : public __scalar_hash<long double>
{
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    size_t operator()(long double __v) const throw()
    {

        if (__v == 0)
            return 0;
# 1509 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 3
        union
        {
            long double __t;
            struct
            {
                size_t __a;
                size_t __b;
            } __s;
        } __u;
        __u.__s.__a = 0;
        __u.__s.__b = 0;
        __u.__t = __v;
        return __u.__s.__a ^ __u.__s.__b;



    }
};
# 1596 "/Library/Developer/CommandLineTools/usr/include/c++/v1/utility" 3
} }
# 20 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__functional_base" 2 3
# 23 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__functional_base" 3


namespace std {inline namespace __1 {

template <class _Arg1, class _Arg2, class _Result>
struct __attribute__ ((__type_visibility__("default"))) binary_function
{
    typedef _Arg1 first_argument_type;
    typedef _Arg2 second_argument_type;
    typedef _Result result_type;
};

template <class _Tp>
struct __has_result_type
{
private:
    struct __two {char __lx; char __lxx;};
    template <class _Up> static __two __test(...);
    template <class _Up> static char __test(typename _Up::result_type* = 0);
public:
    static const bool value = sizeof(__test<_Tp>(0)) == 1;
};




template <class _Tp>

struct __attribute__ ((__type_visibility__("default"))) less : binary_function<_Tp, _Tp, bool>
{
                                  __attribute__ ((__visibility__("hidden"), __always_inline__))
    bool operator()(const _Tp& __x, const _Tp& __y) const
        {return __x < __y;}
};
# 74 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__functional_base" 3
template <class _Tp>
struct __derives_from_unary_function
{
private:
    struct __two {char __lx; char __lxx;};
    static __two __test(...);
    template <class _Ap, class _Rp>
        static unary_function<_Ap, _Rp>
        __test(const volatile unary_function<_Ap, _Rp>*);
public:
    static const bool value = !is_same<__decltype(__test((_Tp*)0)), __two>::value;
    typedef __decltype(__test((_Tp*)0)) type;
};

template <class _Tp>
struct __derives_from_binary_function
{
private:
    struct __two {char __lx; char __lxx;};
    static __two __test(...);
    template <class _A1, class _A2, class _Rp>
        static binary_function<_A1, _A2, _Rp>
        __test(const volatile binary_function<_A1, _A2, _Rp>*);
public:
    static const bool value = !is_same<__decltype(__test((_Tp*)0)), __two>::value;
    typedef __decltype(__test((_Tp*)0)) type;
};

template <class _Tp, bool = __derives_from_unary_function<_Tp>::value>
struct __maybe_derive_from_unary_function
    : public __derives_from_unary_function<_Tp>::type
{
};

template <class _Tp>
struct __maybe_derive_from_unary_function<_Tp, false>
{
};

template <class _Tp, bool = __derives_from_binary_function<_Tp>::value>
struct __maybe_derive_from_binary_function
    : public __derives_from_binary_function<_Tp>::type
{
};

template <class _Tp>
struct __maybe_derive_from_binary_function<_Tp, false>
{
};

template <class _Tp, bool = __has_result_type<_Tp>::value>
struct __weak_result_type_imp
    : public __maybe_derive_from_unary_function<_Tp>,
      public __maybe_derive_from_binary_function<_Tp>
{
    typedef typename _Tp::result_type result_type;
};

template <class _Tp>
struct __weak_result_type_imp<_Tp, false>
    : public __maybe_derive_from_unary_function<_Tp>,
      public __maybe_derive_from_binary_function<_Tp>
{
};

template <class _Tp>
struct __weak_result_type
    : public __weak_result_type_imp<_Tp>
{
};



template <class _Rp>
struct __weak_result_type<_Rp ()>
{
    typedef _Rp result_type;
};

template <class _Rp>
struct __weak_result_type<_Rp (&)()>
{
    typedef _Rp result_type;
};

template <class _Rp>
struct __weak_result_type<_Rp (*)()>
{
    typedef _Rp result_type;
};



template <class _Rp, class _A1>
struct __weak_result_type<_Rp (_A1)>
    : public unary_function<_A1, _Rp>
{
};

template <class _Rp, class _A1>
struct __weak_result_type<_Rp (&)(_A1)>
    : public unary_function<_A1, _Rp>
{
};

template <class _Rp, class _A1>
struct __weak_result_type<_Rp (*)(_A1)>
    : public unary_function<_A1, _Rp>
{
};

template <class _Rp, class _Cp>
struct __weak_result_type<_Rp (_Cp::*)()>
    : public unary_function<_Cp*, _Rp>
{
};

template <class _Rp, class _Cp>
struct __weak_result_type<_Rp (_Cp::*)() const>
    : public unary_function<const _Cp*, _Rp>
{
};

template <class _Rp, class _Cp>
struct __weak_result_type<_Rp (_Cp::*)() volatile>
    : public unary_function<volatile _Cp*, _Rp>
{
};

template <class _Rp, class _Cp>
struct __weak_result_type<_Rp (_Cp::*)() const volatile>
    : public unary_function<const volatile _Cp*, _Rp>
{
};



template <class _Rp, class _A1, class _A2>
struct __weak_result_type<_Rp (_A1, _A2)>
    : public binary_function<_A1, _A2, _Rp>
{
};

template <class _Rp, class _A1, class _A2>
struct __weak_result_type<_Rp (*)(_A1, _A2)>
    : public binary_function<_A1, _A2, _Rp>
{
};

template <class _Rp, class _A1, class _A2>
struct __weak_result_type<_Rp (&)(_A1, _A2)>
    : public binary_function<_A1, _A2, _Rp>
{
};

template <class _Rp, class _Cp, class _A1>
struct __weak_result_type<_Rp (_Cp::*)(_A1)>
    : public binary_function<_Cp*, _A1, _Rp>
{
};

template <class _Rp, class _Cp, class _A1>
struct __weak_result_type<_Rp (_Cp::*)(_A1) const>
    : public binary_function<const _Cp*, _A1, _Rp>
{
};

template <class _Rp, class _Cp, class _A1>
struct __weak_result_type<_Rp (_Cp::*)(_A1) volatile>
    : public binary_function<volatile _Cp*, _A1, _Rp>
{
};

template <class _Rp, class _Cp, class _A1>
struct __weak_result_type<_Rp (_Cp::*)(_A1) const volatile>
    : public binary_function<const volatile _Cp*, _A1, _Rp>
{
};
# 307 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__functional_base" 3
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__functional_base_03" 1 3
# 18 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__functional_base_03" 3
template <class _Ret, class _T1, bool _IsFunc, bool _IsBase>
struct __enable_invoke_imp;

template <class _Ret, class _T1>
struct __enable_invoke_imp<_Ret, _T1, true, true> {
    typedef _Ret _Bullet1;
    typedef _Bullet1 type;
};

template <class _Ret, class _T1>
struct __enable_invoke_imp<_Ret, _T1, true, false> {
    typedef _Ret _Bullet2;
    typedef _Bullet2 type;
};

template <class _Ret, class _T1>
struct __enable_invoke_imp<_Ret, _T1, false, true> {
    typedef typename add_lvalue_reference<
                typename __apply_cv<_T1, _Ret>::type
            >::type _Bullet3;
    typedef _Bullet3 type;
};

template <class _Ret, class _T1>
struct __enable_invoke_imp<_Ret, _T1, false, false> {
    typedef typename add_lvalue_reference<
                typename __apply_cv<__decltype(*std::__1::declval<_T1>()), _Ret>::type
            >::type _Bullet4;
    typedef _Bullet4 type;
};

template <class _Ret, class _T1>
struct __enable_invoke_imp<_Ret, _T1*, false, false> {
    typedef typename add_lvalue_reference<
                typename __apply_cv<_T1, _Ret>::type
            >::type _Bullet4;
    typedef _Bullet4 type;
};

template <class _Fn, class _T1,
          class _Traits = __member_pointer_traits<_Fn>,
          class _Ret = typename _Traits::_ReturnType,
          class _Class = typename _Traits::_ClassType>
struct __enable_invoke : __enable_invoke_imp<
    _Ret, _T1,
    is_member_function_pointer<_Fn>::value,
    is_base_of<_Class, typename remove_reference<_T1>::type>::value>
{
};

__nat __invoke(__any, ...);



template <class _Fn, class _T1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename __enable_invoke<_Fn, _T1>::_Bullet1
__invoke(_Fn __f, _T1& __t1) {
    return (__t1.*__f)();
}

template <class _Fn, class _T1, class _A0>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename __enable_invoke<_Fn, _T1>::_Bullet1
__invoke(_Fn __f, _T1& __t1, _A0& __a0) {
    return (__t1.*__f)(__a0);
}

template <class _Fn, class _T1, class _A0, class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename __enable_invoke<_Fn, _T1>::_Bullet1
__invoke(_Fn __f, _T1& __t1, _A0& __a0, _A1& __a1) {
    return (__t1.*__f)(__a0, __a1);
}

template <class _Fn, class _T1, class _A0, class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename __enable_invoke<_Fn, _T1>::_Bullet1
__invoke(_Fn __f, _T1& __t1, _A0& __a0, _A1& __a1, _A2& __a2) {
    return (__t1.*__f)(__a0, __a1, __a2);
}

template <class _Fn, class _T1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename __enable_invoke<_Fn, _T1>::_Bullet2
__invoke(_Fn __f, _T1& __t1) {
    return ((*__t1).*__f)();
}

template <class _Fn, class _T1, class _A0>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename __enable_invoke<_Fn, _T1>::_Bullet2
__invoke(_Fn __f, _T1& __t1, _A0& __a0) {
    return ((*__t1).*__f)(__a0);
}

template <class _Fn, class _T1, class _A0, class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename __enable_invoke<_Fn, _T1>::_Bullet2
__invoke(_Fn __f, _T1& __t1, _A0& __a0, _A1& __a1) {
    return ((*__t1).*__f)(__a0, __a1);
}

template <class _Fn, class _T1, class _A0, class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename __enable_invoke<_Fn, _T1>::_Bullet2
__invoke(_Fn __f, _T1& __t1, _A0& __a0, _A1& __a1, _A2& __a2) {
    return ((*__t1).*__f)(__a0, __a1, __a2);
}

template <class _Fn, class _T1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename __enable_invoke<_Fn, _T1>::_Bullet3
__invoke(_Fn __f, _T1& __t1) {
    return __t1.*__f;
}

template <class _Fn, class _T1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename __enable_invoke<_Fn, _T1>::_Bullet4
__invoke(_Fn __f, _T1& __t1) {
    return (*__t1).*__f;
}



template <class _Fp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
__decltype(std::__1::declval<_Fp&>()())
__invoke(_Fp& __f)
{
    return __f();
}

template <class _Fp, class _A0>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
__decltype(std::__1::declval<_Fp&>()(std::__1::declval<_A0&>()))
__invoke(_Fp& __f, _A0& __a0)
{
    return __f(__a0);
}

template <class _Fp, class _A0, class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
__decltype(std::__1::declval<_Fp&>()(std::__1::declval<_A0&>(), std::__1::declval<_A1&>()))
__invoke(_Fp& __f, _A0& __a0, _A1& __a1)
{
    return __f(__a0, __a1);
}

template <class _Fp, class _A0, class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
__decltype(std::__1::declval<_Fp&>()(std::__1::declval<_A0&>(), std::__1::declval<_A1&>(), std::__1::declval<_A2&>()))
__invoke(_Fp& __f, _A0& __a0, _A1& __a1, _A2& __a2)
{
    return __f(__a0, __a1, __a2);
}

template <class _Fp, bool = __has_result_type<__weak_result_type<_Fp> >::value>
struct __invoke_return
{
    typedef typename __weak_result_type<_Fp>::result_type type;
};

template <class _Fp>
struct __invoke_return<_Fp, false>
{
    typedef __decltype(__invoke(std::__1::declval<_Fp&>())) type;
};

template <class _Tp, class _A0>
struct __invoke_return0
{
    typedef __decltype(__invoke(std::__1::declval<_Tp&>(), std::__1::declval<_A0&>())) type;
};

template <class _Rp, class _Tp, class _A0>
struct __invoke_return0<_Rp _Tp::*, _A0>
{
    typedef typename __enable_invoke<_Rp _Tp::*, _A0>::type type;
};

template <class _Tp, class _A0, class _A1>
struct __invoke_return1
{
    typedef __decltype(__invoke(std::__1::declval<_Tp&>(), std::__1::declval<_A0&>(), std::__1::declval<_A1&>())) type;

};

template <class _Rp, class _Class, class _A0, class _A1>
struct __invoke_return1<_Rp _Class::*, _A0, _A1> {
    typedef typename __enable_invoke<_Rp _Class::*, _A0>::type type;
};

template <class _Tp, class _A0, class _A1, class _A2>
struct __invoke_return2
{
    typedef __decltype(__invoke(std::__1::declval<_Tp&>(), std::__1::declval<_A0&>(), std::__1::declval<_A1&>(), std::__1::declval<_A2&>())) type;


};

template <class _Ret, class _Class, class _A0, class _A1, class _A2>
struct __invoke_return2<_Ret _Class::*, _A0, _A1, _A2> {
    typedef typename __enable_invoke<_Ret _Class::*, _A0>::type type;
};
# 308 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__functional_base" 2 3




template <class _Ret>
struct __invoke_void_return_wrapper
{






    template <class _Fn>
    static _Ret __call(_Fn __f) {
        return __invoke(__f);
    }

    template <class _Fn, class _A0>
    static _Ret __call(_Fn __f, _A0& __a0) {
        return __invoke(__f, __a0);
    }

    template <class _Fn, class _A0, class _A1>
    static _Ret __call(_Fn __f, _A0& __a0, _A1& __a1) {
        return __invoke(__f, __a0, __a1);
    }

    template <class _Fn, class _A0, class _A1, class _A2>
    static _Ret __call(_Fn __f, _A0& __a0, _A1& __a1, _A2& __a2){
        return __invoke(__f, __a0, __a1, __a2);
    }

};

template <>
struct __invoke_void_return_wrapper<void>
{






    template <class _Fn>
    static void __call(_Fn __f) {
        __invoke(__f);
    }

    template <class _Fn, class _A0>
    static void __call(_Fn __f, _A0& __a0) {
        __invoke(__f, __a0);
    }

    template <class _Fn, class _A0, class _A1>
    static void __call(_Fn __f, _A0& __a0, _A1& __a1) {
        __invoke(__f, __a0, __a1);
    }

    template <class _Fn, class _A0, class _A1, class _A2>
    static void __call(_Fn __f, _A0& __a0, _A1& __a1, _A2& __a2) {
        __invoke(__f, __a0, __a1, __a2);
    }

};

template <class _Tp>
class __attribute__ ((__type_visibility__("default"))) reference_wrapper
    : public __weak_result_type<_Tp>
{
public:

    typedef _Tp type;
private:
    type* __f_;

public:

    __attribute__ ((__visibility__("hidden"), __always_inline__)) reference_wrapper(type& __f) throw()
        : __f_(std::__1::addressof(__f)) {}





    __attribute__ ((__visibility__("hidden"), __always_inline__)) operator type& () const throw() {return *__f_;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) type& get() const throw() {return *__f_;}
# 406 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__functional_base" 3
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return<type>::type
    operator() () const {
        return __invoke(get());
    }

    template <class _A0>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return0<type, _A0>::type
    operator() (_A0& __a0) const {
        return __invoke(get(), __a0);
    }

    template <class _A0>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return0<type, _A0 const>::type
    operator() (_A0 const& __a0) const {
        return __invoke(get(), __a0);
    }

    template <class _A0, class _A1>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return1<type, _A0, _A1>::type
    operator() (_A0& __a0, _A1& __a1) const {
        return __invoke(get(), __a0, __a1);
    }

    template <class _A0, class _A1>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return1<type, _A0 const, _A1>::type
    operator() (_A0 const& __a0, _A1& __a1) const {
        return __invoke(get(), __a0, __a1);
    }

    template <class _A0, class _A1>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return1<type, _A0, _A1 const>::type
    operator() (_A0& __a0, _A1 const& __a1) const {
        return __invoke(get(), __a0, __a1);
    }

    template <class _A0, class _A1>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return1<type, _A0 const, _A1 const>::type
    operator() (_A0 const& __a0, _A1 const& __a1) const {
        return __invoke(get(), __a0, __a1);
    }

    template <class _A0, class _A1, class _A2>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return2<type, _A0, _A1, _A2>::type
    operator() (_A0& __a0, _A1& __a1, _A2& __a2) const {
        return __invoke(get(), __a0, __a1, __a2);
    }

    template <class _A0, class _A1, class _A2>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return2<type, _A0 const, _A1, _A2>::type
    operator() (_A0 const& __a0, _A1& __a1, _A2& __a2) const {
        return __invoke(get(), __a0, __a1, __a2);
    }

    template <class _A0, class _A1, class _A2>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return2<type, _A0, _A1 const, _A2>::type
    operator() (_A0& __a0, _A1 const& __a1, _A2& __a2) const {
        return __invoke(get(), __a0, __a1, __a2);
    }

    template <class _A0, class _A1, class _A2>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return2<type, _A0, _A1, _A2 const>::type
    operator() (_A0& __a0, _A1& __a1, _A2 const& __a2) const {
        return __invoke(get(), __a0, __a1, __a2);
    }

    template <class _A0, class _A1, class _A2>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return2<type, _A0 const, _A1 const, _A2>::type
    operator() (_A0 const& __a0, _A1 const& __a1, _A2& __a2) const {
        return __invoke(get(), __a0, __a1, __a2);
    }

    template <class _A0, class _A1, class _A2>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return2<type, _A0 const, _A1, _A2 const>::type
    operator() (_A0 const& __a0, _A1& __a1, _A2 const& __a2) const {
        return __invoke(get(), __a0, __a1, __a2);
    }

    template <class _A0, class _A1, class _A2>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return2<type, _A0, _A1 const, _A2 const>::type
    operator() (_A0& __a0, _A1 const& __a1, _A2 const& __a2) const {
        return __invoke(get(), __a0, __a1, __a2);
    }

    template <class _A0, class _A1, class _A2>
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    typename __invoke_return2<type, _A0 const, _A1 const, _A2 const>::type
    operator() (_A0 const& __a0, _A1 const& __a1, _A2 const& __a2) const {
        return __invoke(get(), __a0, __a1, __a2);
    }

};


template <class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
reference_wrapper<_Tp>
ref(_Tp& __t) throw()
{
    return reference_wrapper<_Tp>(__t);
}

template <class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
reference_wrapper<_Tp>
ref(reference_wrapper<_Tp> __t) throw()
{
    return ref(__t.get());
}

template <class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
reference_wrapper<const _Tp>
cref(const _Tp& __t) throw()
{
    return reference_wrapper<const _Tp>(__t);
}

template <class _Tp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
reference_wrapper<const _Tp>
cref(reference_wrapper<_Tp> __t) throw()
{
    return cref(__t.get());
}
# 562 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__functional_base" 3
struct __attribute__ ((__type_visibility__("default"))) allocator_arg_t { };


extern const allocator_arg_t allocator_arg;






template <class _Tp>
struct __has_allocator_type
{
private:
    struct __two {char __lx; char __lxx;};
    template <class _Up> static __two __test(...);
    template <class _Up> static char __test(typename _Up::allocator_type* = 0);
public:
    static const bool value = sizeof(__test<_Tp>(0)) == 1;
};

template <class _Tp, class _Alloc, bool = __has_allocator_type<_Tp>::value>
struct __uses_allocator
    : public integral_constant<bool,
        is_convertible<_Alloc, typename _Tp::allocator_type>::value>
{
};

template <class _Tp, class _Alloc>
struct __uses_allocator<_Tp, _Alloc, false>
    : public false_type
{
};

template <class _Tp, class _Alloc>
struct __attribute__ ((__type_visibility__("default"))) uses_allocator
    : public __uses_allocator<_Tp, _Alloc>
{
};
# 661 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__functional_base" 3
} }
# 428 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 2 3
# 439 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3


namespace std {inline namespace __1 {

struct __attribute__ ((__type_visibility__("default"))) input_iterator_tag {};
struct __attribute__ ((__type_visibility__("default"))) output_iterator_tag {};
struct __attribute__ ((__type_visibility__("default"))) forward_iterator_tag : public input_iterator_tag {};
struct __attribute__ ((__type_visibility__("default"))) bidirectional_iterator_tag : public forward_iterator_tag {};
struct __attribute__ ((__type_visibility__("default"))) random_access_iterator_tag : public bidirectional_iterator_tag {};

template <class _Tp>
struct __has_iterator_category
{
private:
    struct __two {char __lx; char __lxx;};
    template <class _Up> static __two __test(...);
    template <class _Up> static char __test(typename _Up::iterator_category* = 0);
public:
    static const bool value = sizeof(__test<_Tp>(0)) == 1;
};

template <class _Iter, bool> struct __iterator_traits_impl {};

template <class _Iter>
struct __iterator_traits_impl<_Iter, true>
{
    typedef typename _Iter::difference_type difference_type;
    typedef typename _Iter::value_type value_type;
    typedef typename _Iter::pointer pointer;
    typedef typename _Iter::reference reference;
    typedef typename _Iter::iterator_category iterator_category;
};

template <class _Iter, bool> struct __iterator_traits {};

template <class _Iter>
struct __iterator_traits<_Iter, true>
    : __iterator_traits_impl
      <
        _Iter,
        is_convertible<typename _Iter::iterator_category, input_iterator_tag>::value ||
        is_convertible<typename _Iter::iterator_category, output_iterator_tag>::value
      >
{};






template <class _Iter>
struct __attribute__ ((__type_visibility__("default"))) iterator_traits
    : __iterator_traits<_Iter, __has_iterator_category<_Iter>::value> {};

template<class _Tp>
struct __attribute__ ((__type_visibility__("default"))) iterator_traits<_Tp*>
{
    typedef ptrdiff_t difference_type;
    typedef typename remove_const<_Tp>::type value_type;
    typedef _Tp* pointer;
    typedef _Tp& reference;
    typedef random_access_iterator_tag iterator_category;
};

template <class _Tp, class _Up, bool = __has_iterator_category<iterator_traits<_Tp> >::value>
struct __has_iterator_category_convertible_to
    : public integral_constant<bool, is_convertible<typename iterator_traits<_Tp>::iterator_category, _Up>::value>
{};

template <class _Tp, class _Up>
struct __has_iterator_category_convertible_to<_Tp, _Up, false> : public false_type {};

template <class _Tp>
struct __is_input_iterator : public __has_iterator_category_convertible_to<_Tp, input_iterator_tag> {};

template <class _Tp>
struct __is_forward_iterator : public __has_iterator_category_convertible_to<_Tp, forward_iterator_tag> {};

template <class _Tp>
struct __is_bidirectional_iterator : public __has_iterator_category_convertible_to<_Tp, bidirectional_iterator_tag> {};

template <class _Tp>
struct __is_random_access_iterator : public __has_iterator_category_convertible_to<_Tp, random_access_iterator_tag> {};

template <class _Tp>
struct __is_exactly_input_iterator
    : public integral_constant<bool,
         __has_iterator_category_convertible_to<_Tp, input_iterator_tag>::value &&
        !__has_iterator_category_convertible_to<_Tp, forward_iterator_tag>::value> {};

template<class _Category, class _Tp, class _Distance = ptrdiff_t,
         class _Pointer = _Tp*, class _Reference = _Tp&>
struct __attribute__ ((__type_visibility__("default"))) iterator
{
    typedef _Tp value_type;
    typedef _Distance difference_type;
    typedef _Pointer pointer;
    typedef _Reference reference;
    typedef _Category iterator_category;
};

template <class _InputIter>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
void __advance(_InputIter& __i,
             typename iterator_traits<_InputIter>::difference_type __n, input_iterator_tag)
{
    for (; __n > 0; --__n)
        ++__i;
}

template <class _BiDirIter>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
void __advance(_BiDirIter& __i,
             typename iterator_traits<_BiDirIter>::difference_type __n, bidirectional_iterator_tag)
{
    if (__n >= 0)
        for (; __n > 0; --__n)
            ++__i;
    else
        for (; __n < 0; ++__n)
            --__i;
}

template <class _RandIter>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
void __advance(_RandIter& __i,
             typename iterator_traits<_RandIter>::difference_type __n, random_access_iterator_tag)
{
   __i += __n;
}

template <class _InputIter>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
void advance(_InputIter& __i,
             typename iterator_traits<_InputIter>::difference_type __n)
{
    __advance(__i, __n, typename iterator_traits<_InputIter>::iterator_category());
}

template <class _InputIter>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename iterator_traits<_InputIter>::difference_type
__distance(_InputIter __first, _InputIter __last, input_iterator_tag)
{
    typename iterator_traits<_InputIter>::difference_type __r(0);
    for (; __first != __last; ++__first)
        ++__r;
    return __r;
}

template <class _RandIter>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename iterator_traits<_RandIter>::difference_type
__distance(_RandIter __first, _RandIter __last, random_access_iterator_tag)
{
    return __last - __first;
}

template <class _InputIter>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename iterator_traits<_InputIter>::difference_type
distance(_InputIter __first, _InputIter __last)
{
    return __distance(__first, __last, typename iterator_traits<_InputIter>::iterator_category());
}

template <class _InputIter>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
_InputIter
next(_InputIter __x,
     typename iterator_traits<_InputIter>::difference_type __n = 1,
     typename enable_if<__is_input_iterator<_InputIter>::value>::type* = 0)
{
    std::__1::advance(__x, __n);
    return __x;
}

template <class _BidiretionalIter>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
_BidiretionalIter
prev(_BidiretionalIter __x,
     typename iterator_traits<_BidiretionalIter>::difference_type __n = 1,
     typename enable_if<__is_bidirectional_iterator<_BidiretionalIter>::value>::type* = 0)
{
    std::__1::advance(__x, -__n);
    return __x;
}


template <class _Tp, class = void>
struct __is_stashing_iterator : false_type {};

template <class _Tp>
struct __is_stashing_iterator<_Tp, typename __void_t<typename _Tp::__stashing_iterator_tag>::type>
  : true_type {};

template <class _Iter>
class __attribute__ ((__type_visibility__("default"))) reverse_iterator
    : public iterator<typename iterator_traits<_Iter>::iterator_category,
                      typename iterator_traits<_Iter>::value_type,
                      typename iterator_traits<_Iter>::difference_type,
                      typename iterator_traits<_Iter>::pointer,
                      typename iterator_traits<_Iter>::reference>
{
private:
                _Iter __t;

    _Static_assert(!__is_stashing_iterator<_Iter>::value, "The specified iterator type cannot be used with reverse_iterator; " "Using stashing iterators with reverse_iterator causes undefined behavior");



protected:
    _Iter current;
public:
    typedef _Iter iterator_type;
    typedef typename iterator_traits<_Iter>::difference_type difference_type;
    typedef typename iterator_traits<_Iter>::reference reference;
    typedef typename iterator_traits<_Iter>::pointer pointer;

    __attribute__ ((__visibility__("hidden"), __always_inline__))
    reverse_iterator() : __t(), current() {}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    explicit reverse_iterator(_Iter __x) : __t(__x), current(__x) {}
    template <class _Up>
        __attribute__ ((__visibility__("hidden"), __always_inline__))
        reverse_iterator(const reverse_iterator<_Up>& __u) : __t(__u.base()), current(__u.base()) {}
    template <class _Up>
        __attribute__ ((__visibility__("hidden"), __always_inline__))
        reverse_iterator& operator=(const reverse_iterator<_Up>& __u)
            { __t = current = __u.base(); return *this; }
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    _Iter base() const {return current;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    reference operator*() const {_Iter __tmp = current; return *--__tmp;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    pointer operator->() const {return std::__1::addressof(operator*());}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    reverse_iterator& operator++() {--current; return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    reverse_iterator operator++(int) {reverse_iterator __tmp(*this); --current; return __tmp;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    reverse_iterator& operator--() {++current; return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    reverse_iterator operator--(int) {reverse_iterator __tmp(*this); ++current; return __tmp;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    reverse_iterator operator+ (difference_type __n) const {return reverse_iterator(current - __n);}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    reverse_iterator& operator+=(difference_type __n) {current -= __n; return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    reverse_iterator operator- (difference_type __n) const {return reverse_iterator(current + __n);}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    reverse_iterator& operator-=(difference_type __n) {current += __n; return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    reference operator[](difference_type __n) const {return *(*this + __n);}
};

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator==(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
{
    return __x.base() == __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator<(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
{
    return __x.base() > __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator!=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
{
    return __x.base() != __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator>(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
{
    return __x.base() < __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator>=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
{
    return __x.base() <= __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator<=(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
{
    return __x.base() >= __y.base();
}
# 753 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3
template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename reverse_iterator<_Iter1>::difference_type
operator-(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)
{
    return __y.base() - __x.base();
}


template <class _Iter>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
reverse_iterator<_Iter>
operator+(typename reverse_iterator<_Iter>::difference_type __n, const reverse_iterator<_Iter>& __x)
{
    return reverse_iterator<_Iter>(__x.base() - __n);
}
# 779 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3
template <class _Container>
class __attribute__ ((__type_visibility__("default"))) back_insert_iterator
    : public iterator<output_iterator_tag,
                      void,
                      void,
                      void,
                      void>
{
protected:
    _Container* container;
public:
    typedef _Container container_type;

    __attribute__ ((__visibility__("hidden"), __always_inline__)) explicit back_insert_iterator(_Container& __x) : container(std::__1::addressof(__x)) {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) back_insert_iterator& operator=(const typename _Container::value_type& __value_)
        {container->push_back(__value_); return *this;}




    __attribute__ ((__visibility__("hidden"), __always_inline__)) back_insert_iterator& operator*() {return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) back_insert_iterator& operator++() {return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) back_insert_iterator operator++(int) {return *this;}
};

template <class _Container>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
back_insert_iterator<_Container>
back_inserter(_Container& __x)
{
    return back_insert_iterator<_Container>(__x);
}

template <class _Container>
class __attribute__ ((__type_visibility__("default"))) front_insert_iterator
    : public iterator<output_iterator_tag,
                      void,
                      void,
                      void,
                      void>
{
protected:
    _Container* container;
public:
    typedef _Container container_type;

    __attribute__ ((__visibility__("hidden"), __always_inline__)) explicit front_insert_iterator(_Container& __x) : container(std::__1::addressof(__x)) {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) front_insert_iterator& operator=(const typename _Container::value_type& __value_)
        {container->push_front(__value_); return *this;}




    __attribute__ ((__visibility__("hidden"), __always_inline__)) front_insert_iterator& operator*() {return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) front_insert_iterator& operator++() {return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) front_insert_iterator operator++(int) {return *this;}
};

template <class _Container>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
front_insert_iterator<_Container>
front_inserter(_Container& __x)
{
    return front_insert_iterator<_Container>(__x);
}

template <class _Container>
class __attribute__ ((__type_visibility__("default"))) insert_iterator
    : public iterator<output_iterator_tag,
                      void,
                      void,
                      void,
                      void>
{
protected:
    _Container* container;
    typename _Container::iterator iter;
public:
    typedef _Container container_type;

    __attribute__ ((__visibility__("hidden"), __always_inline__)) insert_iterator(_Container& __x, typename _Container::iterator __i)
        : container(std::__1::addressof(__x)), iter(__i) {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) insert_iterator& operator=(const typename _Container::value_type& __value_)
        {iter = container->insert(iter, __value_); ++iter; return *this;}




    __attribute__ ((__visibility__("hidden"), __always_inline__)) insert_iterator& operator*() {return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) insert_iterator& operator++() {return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) insert_iterator& operator++(int) {return *this;}
};

template <class _Container>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
insert_iterator<_Container>
inserter(_Container& __x, typename _Container::iterator __i)
{
    return insert_iterator<_Container>(__x, __i);
}

template <class _Tp, class _CharT = char,
          class _Traits = char_traits<_CharT>, class _Distance = ptrdiff_t>
class __attribute__ ((__type_visibility__("default"))) istream_iterator
    : public iterator<input_iterator_tag, _Tp, _Distance, const _Tp*, const _Tp&>
{
public:
    typedef _CharT char_type;
    typedef _Traits traits_type;
    typedef basic_istream<_CharT,_Traits> istream_type;
private:
    istream_type* __in_stream_;
    _Tp __value_;
public:
    __attribute__ ((__visibility__("hidden"), __always_inline__)) istream_iterator() : __in_stream_(0), __value_() {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) istream_iterator(istream_type& __s) : __in_stream_(std::__1::addressof(__s))
        {
            if (!(*__in_stream_ >> __value_))
                __in_stream_ = 0;
        }

    __attribute__ ((__visibility__("hidden"), __always_inline__)) const _Tp& operator*() const {return __value_;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) const _Tp* operator->() const {return std::__1::addressof((operator*()));}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) istream_iterator& operator++()
        {
            if (!(*__in_stream_ >> __value_))
                __in_stream_ = 0;
            return *this;
        }
    __attribute__ ((__visibility__("hidden"), __always_inline__)) istream_iterator operator++(int)
        {istream_iterator __t(*this); ++(*this); return __t;}

    friend __attribute__ ((__visibility__("hidden"), __always_inline__))
    bool operator==(const istream_iterator& __x, const istream_iterator& __y)
        {return __x.__in_stream_ == __y.__in_stream_;}

    friend __attribute__ ((__visibility__("hidden"), __always_inline__))
    bool operator!=(const istream_iterator& __x, const istream_iterator& __y)
        {return !(__x == __y);}
};

template <class _Tp, class _CharT = char, class _Traits = char_traits<_CharT> >
class __attribute__ ((__type_visibility__("default"))) ostream_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
{
public:
    typedef _CharT char_type;
    typedef _Traits traits_type;
    typedef basic_ostream<_CharT,_Traits> ostream_type;
private:
    ostream_type* __out_stream_;
    const char_type* __delim_;
public:
    __attribute__ ((__visibility__("hidden"), __always_inline__)) ostream_iterator(ostream_type& __s) throw()
        : __out_stream_(std::__1::addressof(__s)), __delim_(0) {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) ostream_iterator(ostream_type& __s, const _CharT* __delimiter) throw()
        : __out_stream_(std::__1::addressof(__s)), __delim_(__delimiter) {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) ostream_iterator& operator=(const _Tp& __value_)
        {
            *__out_stream_ << __value_;
            if (__delim_)
                *__out_stream_ << __delim_;
            return *this;
        }

    __attribute__ ((__visibility__("hidden"), __always_inline__)) ostream_iterator& operator*() {return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) ostream_iterator& operator++() {return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) ostream_iterator& operator++(int) {return *this;}
};

template<class _CharT, class _Traits>
class __attribute__ ((__type_visibility__("default"))) istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT,
                      typename _Traits::off_type, _CharT*,
                      _CharT>
{
public:
    typedef _CharT char_type;
    typedef _Traits traits_type;
    typedef typename _Traits::int_type int_type;
    typedef basic_streambuf<_CharT,_Traits> streambuf_type;
    typedef basic_istream<_CharT,_Traits> istream_type;
private:
    mutable streambuf_type* __sbuf_;

    class __proxy
    {
        char_type __keep_;
        streambuf_type* __sbuf_;
        __attribute__ ((__visibility__("hidden"), __always_inline__)) __proxy(char_type __c, streambuf_type* __s)
            : __keep_(__c), __sbuf_(__s) {}
        friend class istreambuf_iterator;
    public:
        __attribute__ ((__visibility__("hidden"), __always_inline__)) char_type operator*() const {return __keep_;}
    };

    __attribute__ ((__visibility__("hidden"), __always_inline__))
    bool __test_for_eof() const
    {
        if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sgetc(), traits_type::eof()))
            __sbuf_ = 0;
        return __sbuf_ == 0;
    }
public:
    __attribute__ ((__visibility__("hidden"), __always_inline__)) istreambuf_iterator() throw() : __sbuf_(0) {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) istreambuf_iterator(istream_type& __s) throw()
        : __sbuf_(__s.rdbuf()) {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) istreambuf_iterator(streambuf_type* __s) throw()
        : __sbuf_(__s) {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) istreambuf_iterator(const __proxy& __p) throw()
        : __sbuf_(__p.__sbuf_) {}

    __attribute__ ((__visibility__("hidden"), __always_inline__)) char_type operator*() const
        {return static_cast<char_type>(__sbuf_->sgetc());}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) istreambuf_iterator& operator++()
        {
            __sbuf_->sbumpc();
            return *this;
        }
    __attribute__ ((__visibility__("hidden"), __always_inline__)) __proxy operator++(int)
        {
            return __proxy(__sbuf_->sbumpc(), __sbuf_);
        }

    __attribute__ ((__visibility__("hidden"), __always_inline__)) bool equal(const istreambuf_iterator& __b) const
        {return __test_for_eof() == __b.__test_for_eof();}
};

template <class _CharT, class _Traits>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool operator==(const istreambuf_iterator<_CharT,_Traits>& __a,
                const istreambuf_iterator<_CharT,_Traits>& __b)
                {return __a.equal(__b);}

template <class _CharT, class _Traits>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool operator!=(const istreambuf_iterator<_CharT,_Traits>& __a,
                const istreambuf_iterator<_CharT,_Traits>& __b)
                {return !__a.equal(__b);}

template <class _CharT, class _Traits>
class __attribute__ ((__type_visibility__("default"))) ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
{
public:
    typedef _CharT char_type;
    typedef _Traits traits_type;
    typedef basic_streambuf<_CharT,_Traits> streambuf_type;
    typedef basic_ostream<_CharT,_Traits> ostream_type;
private:
    streambuf_type* __sbuf_;
public:
    __attribute__ ((__visibility__("hidden"), __always_inline__)) ostreambuf_iterator(ostream_type& __s) throw()
        : __sbuf_(__s.rdbuf()) {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) ostreambuf_iterator(streambuf_type* __s) throw()
        : __sbuf_(__s) {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) ostreambuf_iterator& operator=(_CharT __c)
        {
            if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sputc(__c), traits_type::eof()))
                __sbuf_ = 0;
            return *this;
        }
    __attribute__ ((__visibility__("hidden"), __always_inline__)) ostreambuf_iterator& operator*() {return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) ostreambuf_iterator& operator++() {return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) ostreambuf_iterator& operator++(int) {return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) bool failed() const throw() {return __sbuf_ == 0;}





    template <class _Ch, class _Tr>
    friend
    __attribute__ ((__visibility__("hidden")))
    ostreambuf_iterator<_Ch, _Tr>
    __pad_and_output(ostreambuf_iterator<_Ch, _Tr> __s,
                     const _Ch* __ob, const _Ch* __op, const _Ch* __oe,
                     ios_base& __iob, _Ch __fl);

};

template <class _Iter>
class __attribute__ ((__type_visibility__("default"))) move_iterator
{
private:
    _Iter __i;
public:
    typedef _Iter iterator_type;
    typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;
    typedef typename iterator_traits<iterator_type>::value_type value_type;
    typedef typename iterator_traits<iterator_type>::difference_type difference_type;
    typedef iterator_type pointer;
# 1079 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3
    typedef typename iterator_traits<iterator_type>::reference reference;


    __attribute__ ((__visibility__("hidden"), __always_inline__))
    move_iterator() : __i() {}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    explicit move_iterator(_Iter __x) : __i(__x) {}
    template <class _Up>
      __attribute__ ((__visibility__("hidden"), __always_inline__))
      move_iterator(const move_iterator<_Up>& __u) : __i(__u.base()) {}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) _Iter base() const {return __i;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    reference operator*() const { return static_cast<reference>(*__i); }
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    pointer operator->() const { return __i;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    move_iterator& operator++() {++__i; return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    move_iterator operator++(int) {move_iterator __tmp(*this); ++__i; return __tmp;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    move_iterator& operator--() {--__i; return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    move_iterator operator--(int) {move_iterator __tmp(*this); --__i; return __tmp;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    move_iterator operator+ (difference_type __n) const {return move_iterator(__i + __n);}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    move_iterator& operator+=(difference_type __n) {__i += __n; return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    move_iterator operator- (difference_type __n) const {return move_iterator(__i - __n);}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    move_iterator& operator-=(difference_type __n) {__i -= __n; return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__))
    reference operator[](difference_type __n) const { return static_cast<reference>(__i[__n]); }
};

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator==(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
{
    return __x.base() == __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator<(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
{
    return __x.base() < __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator!=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
{
    return __x.base() != __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator>(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
{
    return __x.base() > __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator>=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
{
    return __x.base() >= __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator<=(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
{
    return __x.base() <= __y.base();
}
# 1172 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3
template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename move_iterator<_Iter1>::difference_type
operator-(const move_iterator<_Iter1>& __x, const move_iterator<_Iter2>& __y)
{
    return __x.base() - __y.base();
}


template <class _Iter>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
move_iterator<_Iter>
operator+(typename move_iterator<_Iter>::difference_type __n, const move_iterator<_Iter>& __x)
{
    return move_iterator<_Iter>(__x.base() + __n);
}

template <class _Iter>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
move_iterator<_Iter>
make_move_iterator(_Iter __i)
{
    return move_iterator<_Iter>(__i);
}



template <class _Iter> class __wrap_iter;

template <class _Iter1, class _Iter2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator==(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();

template <class _Iter1, class _Iter2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator<(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();

template <class _Iter1, class _Iter2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator!=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();

template <class _Iter1, class _Iter2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator>(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();

template <class _Iter1, class _Iter2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator>=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();

template <class _Iter1, class _Iter2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator<=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();
# 1238 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3
template <class _Iter1, class _Iter2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
typename __wrap_iter<_Iter1>::difference_type
operator-(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();


template <class _Iter>
__attribute__ ((__visibility__("hidden"), __always_inline__))
__wrap_iter<_Iter>
operator+(typename __wrap_iter<_Iter>::difference_type, __wrap_iter<_Iter>) throw();

template <class _Ip, class _Op> _Op __attribute__ ((__visibility__("hidden"), __always_inline__)) copy(_Ip, _Ip, _Op);
template <class _B1, class _B2> _B2 __attribute__ ((__visibility__("hidden"), __always_inline__)) copy_backward(_B1, _B1, _B2);
template <class _Ip, class _Op> _Op __attribute__ ((__visibility__("hidden"), __always_inline__)) move(_Ip, _Ip, _Op);
template <class _B1, class _B2> _B2 __attribute__ ((__visibility__("hidden"), __always_inline__)) move_backward(_B1, _B1, _B2);



template <class _Tp>
__attribute__ ((__visibility__("hidden"), __always_inline__))
typename enable_if
<
    is_trivially_copy_assignable<_Tp>::value,
    _Tp*
>::type
__unwrap_iter(__wrap_iter<_Tp*>);
# 1278 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3
template <class _Iter>
class __wrap_iter
{
public:
    typedef _Iter iterator_type;
    typedef typename iterator_traits<iterator_type>::iterator_category iterator_category;
    typedef typename iterator_traits<iterator_type>::value_type value_type;
    typedef typename iterator_traits<iterator_type>::difference_type difference_type;
    typedef typename iterator_traits<iterator_type>::pointer pointer;
    typedef typename iterator_traits<iterator_type>::reference reference;
private:
    iterator_type __i;
public:
    __attribute__ ((__visibility__("hidden"), __always_inline__)) __wrap_iter() throw()



    {



    }
    template <class _Up> __attribute__ ((__visibility__("hidden"), __always_inline__)) __wrap_iter(const __wrap_iter<_Up>& __u,
        typename enable_if<is_convertible<_Up, iterator_type>::value>::type* = 0) throw()
        : __i(__u.base())
    {



    }
# 1331 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3
    __attribute__ ((__visibility__("hidden"), __always_inline__)) reference operator*() const throw()
    {




        return *__i;
    }
    __attribute__ ((__visibility__("hidden"), __always_inline__)) pointer operator->() const throw()
    {




        return (pointer)std::__1::addressof(*__i);
    }
    __attribute__ ((__visibility__("hidden"), __always_inline__)) __wrap_iter& operator++() throw()
    {




        ++__i;
        return *this;
    }
    __attribute__ ((__visibility__("hidden"), __always_inline__)) __wrap_iter operator++(int) throw()
        {__wrap_iter __tmp(*this); ++(*this); return __tmp;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) __wrap_iter& operator--() throw()
    {




        --__i;
        return *this;
    }
    __attribute__ ((__visibility__("hidden"), __always_inline__)) __wrap_iter operator--(int) throw()
        {__wrap_iter __tmp(*this); --(*this); return __tmp;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) __wrap_iter operator+ (difference_type __n) const throw()
        {__wrap_iter __w(*this); __w += __n; return __w;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) __wrap_iter& operator+=(difference_type __n) throw()
    {




        __i += __n;
        return *this;
    }
    __attribute__ ((__visibility__("hidden"), __always_inline__)) __wrap_iter operator- (difference_type __n) const throw()
        {return *this + (-__n);}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) __wrap_iter& operator-=(difference_type __n) throw()
        {*this += -__n; return *this;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) reference operator[](difference_type __n) const throw()
    {




        return __i[__n];
    }

    __attribute__ ((__visibility__("hidden"), __always_inline__)) iterator_type base() const throw() {return __i;}

private:






    __attribute__ ((__visibility__("hidden"), __always_inline__)) __wrap_iter(iterator_type __x) throw() : __i(__x) {}


    template <class _Up> friend class __wrap_iter;
    template <class _CharT, class _Traits, class _Alloc> friend class basic_string;
    template <class _Tp, class _Alloc> friend class __attribute__ ((__type_visibility__("default"))) vector;

    template <class _Iter1, class _Iter2>
    friend
    bool
    operator==(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();

    template <class _Iter1, class _Iter2>
    friend
    bool
    operator<(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();

    template <class _Iter1, class _Iter2>
    friend
    bool
    operator!=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();

    template <class _Iter1, class _Iter2>
    friend
    bool
    operator>(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();

    template <class _Iter1, class _Iter2>
    friend
    bool
    operator>=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();

    template <class _Iter1, class _Iter2>
    friend
    bool
    operator<=(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();
# 1446 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3
    template <class _Iter1, class _Iter2>
    friend
    typename __wrap_iter<_Iter1>::difference_type
    operator-(const __wrap_iter<_Iter1>&, const __wrap_iter<_Iter2>&) throw();


    template <class _Iter1>
    friend
    __wrap_iter<_Iter1>
    operator+(typename __wrap_iter<_Iter1>::difference_type, __wrap_iter<_Iter1>) throw();

    template <class _Ip, class _Op> friend _Op copy(_Ip, _Ip, _Op);
    template <class _B1, class _B2> friend _B2 copy_backward(_B1, _B1, _B2);
    template <class _Ip, class _Op> friend _Op move(_Ip, _Ip, _Op);
    template <class _B1, class _B2> friend _B2 move_backward(_B1, _B1, _B2);


    template <class _Tp>
    friend
    typename enable_if
    <
        is_trivially_copy_assignable<_Tp>::value,
        _Tp*
    >::type
    __unwrap_iter(__wrap_iter<_Tp*>);
# 1481 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3
};

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator==(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) throw()
{
    return __x.base() == __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator<(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) throw()
{




    return __x.base() < __y.base();
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) throw()
{
    return !(__x == __y);
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) throw()
{
    return __y < __x;
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) throw()
{
    return !(__x < __y);
}

template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) throw()
{
    return !(__y < __x);
}

template <class _Iter1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator!=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) throw()
{
    return !(__x == __y);
}

template <class _Iter1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator>(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) throw()
{
    return __y < __x;
}

template <class _Iter1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator>=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) throw()
{
    return !(__x < __y);
}

template <class _Iter1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
bool
operator<=(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y) throw()
{
    return !(__y < __x);
}
# 1581 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3
template <class _Iter1, class _Iter2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename __wrap_iter<_Iter1>::difference_type
operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) throw()
{




    return __x.base() - __y.base();
}


template <class _Iter>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
__wrap_iter<_Iter>
operator+(typename __wrap_iter<_Iter>::difference_type __n,
          __wrap_iter<_Iter> __x) throw()
{
    __x += __n;
    return __x;
}

template <class _Iter>
struct __libcpp_is_trivial_iterator
    : public integral_constant<bool,(is_pointer<_Iter>::value)> {};

template <class _Iter>
struct __libcpp_is_trivial_iterator<move_iterator<_Iter> >
    : public integral_constant<bool,(__libcpp_is_trivial_iterator<_Iter>::value)> {};

template <class _Iter>
struct __libcpp_is_trivial_iterator<reverse_iterator<_Iter> >
    : public integral_constant<bool,(__libcpp_is_trivial_iterator<_Iter>::value)> {};

template <class _Iter>
struct __libcpp_is_trivial_iterator<__wrap_iter<_Iter> >
    : public integral_constant<bool,(__libcpp_is_trivial_iterator<_Iter>::value)> {};


template <class _Tp, size_t _Np>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
_Tp*
begin(_Tp (&__array)[_Np])
{
    return __array;
}

template <class _Tp, size_t _Np>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
_Tp*
end(_Tp (&__array)[_Np])
{
    return __array + _Np;
}
# 1762 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3
template <class _Cp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename _Cp::iterator
begin(_Cp& __c)
{
    return __c.begin();
}

template <class _Cp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename _Cp::const_iterator
begin(const _Cp& __c)
{
    return __c.begin();
}

template <class _Cp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename _Cp::iterator
end(_Cp& __c)
{
    return __c.end();
}

template <class _Cp>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename _Cp::const_iterator
end(const _Cp& __c)
{
    return __c.end();
}
# 1826 "/Library/Developer/CommandLineTools/usr/include/c++/v1/iterator" 3
} }
# 117 "/usr/local/include/wx-3.0/wx/arrstr.h" 2
# 1 "/usr/local/include/wx-3.0/wx/afterstd.h" 1
# 118 "/usr/local/include/wx-3.0/wx/arrstr.h" 2


class wxArrayString
{
public:

  typedef int ( *CompareFunction)(const wxString& first,
                                 const wxString& second);


  typedef int ( *CompareFunction2)(wxString* first,
                                  wxString* second);



  wxArrayString() { Init(false); }
# 142 "/usr/local/include/wx-3.0/wx/arrstr.h"
             wxArrayString(int autoSort) { Init(autoSort != 0); }

  wxArrayString(size_t sz, const char** a);
  wxArrayString(size_t sz, const wchar_t** a);

  wxArrayString(size_t sz, const wxString* a);

  wxArrayString(const wxArrayString& array);

  wxArrayString& operator=(const wxArrayString& src);

 ~wxArrayString();



  void Empty();

  void Clear();

  void Alloc(size_t nCount);

  void Shrink();



  size_t GetCount() const { return m_nCount; }

  bool IsEmpty() const { return m_nCount == 0; }

  size_t Count() const { return m_nCount; }



  wxString& Item(size_t nIndex)
    {
        do { if ( wxTheAssertHandler && !(nIndex < m_nCount) && (wxOnAssert("/usr/local/include/wx-3.0/wx/arrstr.h", 178, __FUNCTION__, "nIndex < m_nCount", "wxArrayString: index out of bounds"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );


        return m_pItems[nIndex];
    }
  const wxString& Item(size_t nIndex) const { return const_cast<wxArrayString*>(this)->Item(nIndex); }


  wxString& operator[](size_t nIndex) { return Item(nIndex); }
  const wxString& operator[](size_t nIndex) const { return Item(nIndex); }

  wxString& Last()
  {
      do { if ( wxTheAssertHandler && !(!IsEmpty()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/arrstr.h", 191, __FUNCTION__, "!IsEmpty()", "wxArrayString: index out of bounds"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );

      return Item(GetCount() - 1);
  }
  const wxString& Last() const { return const_cast<wxArrayString*>(this)->Last(); }







  int Index (const wxString& str, bool bCase = true, bool bFromEnd = false) const;


  size_t Add(const wxString& str, size_t nInsert = 1);

  void Insert(const wxString& str, size_t uiIndex, size_t nInsert = 1);

  void SetCount(size_t count);

  void Remove(const wxString& sz);

  void RemoveAt(size_t nIndex, size_t nRemove = 1);




  void Sort(bool reverseOrder = false);

  void Sort(CompareFunction compareFunction);
  void Sort(CompareFunction2 compareFunction);



  bool operator==(const wxArrayString& a) const;

  bool operator!=(const wxArrayString& a) const { return !(*this == a); }


  typedef wxString value_type;
  typedef value_type* pointer;
  typedef const value_type* const_pointer;
  typedef value_type* iterator;
  typedef const value_type* const_iterator;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef int difference_type;
  typedef size_t size_type;


  class reverse_iterator
  {
    typedef wxString value_type;
    typedef value_type* pointer;
    typedef value_type& reference;
    typedef reverse_iterator itor;
    friend itor operator+(int o, const itor& it);
    friend itor operator+(const itor& it, int o);
    friend itor operator-(const itor& it, int o);
    friend difference_type operator -(const itor& i1, const itor& i2);
  public:
    pointer m_ptr;
    reverse_iterator() : m_ptr(__null) { }
               reverse_iterator(pointer ptr) : m_ptr(ptr) { }
    reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { }
    reference operator*() const { return *m_ptr; }
    pointer operator->() const { return m_ptr; }
    itor& operator++() { --m_ptr; return *this; }
    const itor operator++(int)
      { reverse_iterator tmp = *this; --m_ptr; return tmp; }
    itor& operator--() { ++m_ptr; return *this; }
    const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; }
    bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; }
    bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; }
  };

  class const_reverse_iterator
  {
    typedef wxString value_type;
    typedef const value_type* pointer;
    typedef const value_type& reference;
    typedef const_reverse_iterator itor;
    friend itor operator+(int o, const itor& it);
    friend itor operator+(const itor& it, int o);
    friend itor operator-(const itor& it, int o);
    friend difference_type operator -(const itor& i1, const itor& i2);
  public:
    pointer m_ptr;
    const_reverse_iterator() : m_ptr(__null) { }
               const_reverse_iterator(pointer ptr) : m_ptr(ptr) { }
    const_reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { }
    const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { }
    reference operator*() const { return *m_ptr; }
    pointer operator->() const { return m_ptr; }
    itor& operator++() { --m_ptr; return *this; }
    const itor operator++(int)
      { itor tmp = *this; --m_ptr; return tmp; }
    itor& operator--() { ++m_ptr; return *this; }
    const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; }
    bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; }
    bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; }
  };

  wxArrayString(const_iterator first, const_iterator last)
    { Init(false); assign(first, last); }
  wxArrayString(size_type n, const_reference v) { Init(false); assign(n, v); }


  template <class Iterator>
  void assign(Iterator first, Iterator last)
  {
      clear();
      reserve(std::distance(first, last));
      for(; first != last; ++first)
          push_back(*first);
  }
# 317 "/usr/local/include/wx-3.0/wx/arrstr.h"
  void assign(size_type n, const_reference v)
    { clear(); Add(v, n); }
  reference back() { return *(end() - 1); }
  const_reference back() const { return *(end() - 1); }
  iterator begin() { return m_pItems; }
  const_iterator begin() const { return m_pItems; }
  size_type capacity() const { return m_nSize; }
  void clear() { Clear(); }
  bool empty() const { return IsEmpty(); }
  iterator end() { return begin() + GetCount(); }
  const_iterator end() const { return begin() + GetCount(); }
  iterator erase(iterator first, iterator last)
  {
      size_t idx = first - begin();
      RemoveAt(idx, last - first);
      return begin() + idx;
  }
  iterator erase(iterator it) { return erase(it, it + 1); }
  reference front() { return *begin(); }
  const_reference front() const { return *begin(); }
  void insert(iterator it, size_type n, const_reference v)
    { Insert(v, it - begin(), n); }
  iterator insert(iterator it, const_reference v = value_type())
    { size_t idx = it - begin(); Insert(v, idx); return begin() + idx; }
  void insert(iterator it, const_iterator first, const_iterator last);
  size_type max_size() const { return 2147483647; }
  void pop_back() { RemoveAt(GetCount() - 1); }
  void push_back(const_reference v) { Add(v); }
  reverse_iterator rbegin() { return reverse_iterator(end() - 1); }
  const_reverse_iterator rbegin() const
    { return const_reverse_iterator(end() - 1); }
  reverse_iterator rend() { return reverse_iterator(begin() - 1); }
  const_reverse_iterator rend() const
    { return const_reverse_iterator(begin() - 1); }
  void reserve(size_type n) ;
  void resize(size_type n, value_type v = value_type());
  size_type size() const { return GetCount(); }
  void swap(wxArrayString& other)
  {
      wxSwap(m_nSize, other.m_nSize);
      wxSwap(m_nCount, other.m_nCount);
      wxSwap(m_pItems, other.m_pItems);
      wxSwap(m_autoSort, other.m_autoSort);
  }

protected:
  void Init(bool autoSort);
  void Copy(const wxArrayString& src);

private:



  wxString *Grow(size_t nIncrement);

  size_t m_nSize,
          m_nCount;

  wxString *m_pItems;

  bool m_autoSort;
};

class wxSortedArrayString : public wxArrayString
{
public:
  wxSortedArrayString() : wxArrayString(true)
    { }
  wxSortedArrayString(const wxArrayString& array) : wxArrayString(true)
    { Copy(array); }
};





class wxCArrayString
{
public:
    wxCArrayString( const wxArrayString& array )
        : m_array( array ), m_strings( __null )
    { }
    ~wxCArrayString() { delete[] m_strings; }

    size_t GetCount() const { return m_array.GetCount(); }
    wxString* GetStrings()
    {
        if( m_strings ) return m_strings;
        size_t count = m_array.GetCount();
        m_strings = new wxString[count];
        for( size_t i = 0; i < count; ++i )
            m_strings[i] = m_array[i];
        return m_strings;
    }

    wxString* Release()
    {
        wxString *r = GetStrings();
        m_strings = __null;
        return r;
    }

private:
    const wxArrayString& m_array;
    wxString* m_strings;
};
# 433 "/usr/local/include/wx-3.0/wx/arrstr.h"
                 wxString wxJoin(const wxArrayString& arr,
                                 const wxChar sep,
                                 const wxChar escape = '\\');

                 wxArrayString wxSplit(const wxString& str,
                                       const wxChar sep,
                                       const wxChar escape = '\\');
# 456 "/usr/local/include/wx-3.0/wx/arrstr.h"
class wxArrayStringsAdapter
{
public:

    wxArrayStringsAdapter(const wxArrayString& strings)
        : m_type(wxSTRING_ARRAY), m_size(strings.size())
    {
        m_data.array = &strings;
    }


    wxArrayStringsAdapter(unsigned int n, const wxString *strings)
        : m_type(wxSTRING_POINTER), m_size(n)
    {
        m_data.ptr = strings;
    }


    wxArrayStringsAdapter(const wxString& s)
        : m_type(wxSTRING_POINTER), m_size(1)
    {
        m_data.ptr = &s;
    }




    size_t GetCount() const { return m_size; }
    bool IsEmpty() const { return GetCount() == 0; }
    const wxString& operator[] (unsigned int i) const
    {
        do { if ( wxTheAssertHandler && !(i < GetCount()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/arrstr.h", 487, __FUNCTION__, "i < GetCount()", "index out of bounds"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
        if(m_type == wxSTRING_POINTER)
            return m_data.ptr[i];
        return m_data.array->Item(i);
    }
    wxArrayString AsArrayString() const
    {
        if(m_type == wxSTRING_ARRAY)
            return *m_data.array;
        return wxArrayString(GetCount(), m_data.ptr);
    }

private:

    enum wxStringContainerType
    {
        wxSTRING_ARRAY,
        wxSTRING_POINTER
    };

    wxStringContainerType m_type;
    size_t m_size;
    union
    {
        const wxString * ptr;
        const wxArrayString * array;
    } m_data;

    private: wxArrayStringsAdapter& operator=(const wxArrayStringsAdapter&);
};
# 22 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 1 "/usr/local/include/wx-3.0/wx/intl.h" 1
# 17 "/usr/local/include/wx-3.0/wx/intl.h"
# 1 "/usr/local/include/wx-3.0/wx/translation.h" 1
# 293 "/usr/local/include/wx-3.0/wx/translation.h"
template<typename TString>
inline TString wxGetTranslation(TString str)
    { return str; }

template<typename TString, typename TDomain>
inline TString wxGetTranslation(TString str, TDomain )
    { return str; }

template<typename TString, typename TDomain>
inline TString wxGetTranslation(TString str1, TString str2, size_t n)
    { return n == 1 ? str1 : str2; }

template<typename TString, typename TDomain>
inline TString wxGetTranslation(TString str1, TString str2, size_t n,
                                TDomain )
    { return n == 1 ? str1 : str2; }
# 18 "/usr/local/include/wx-3.0/wx/intl.h" 2




enum wxLayoutDirection
{
    wxLayout_Default,
    wxLayout_LeftToRight,
    wxLayout_RightToLeft
};
# 23 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 1 "/usr/local/include/wx-3.0/wx/log.h" 1
# 22 "/usr/local/include/wx-3.0/wx/log.h"
typedef unsigned long wxLogLevel;
# 50 "/usr/local/include/wx-3.0/wx/log.h"
class wxObject;
# 1499 "/usr/local/include/wx-3.0/wx/log.h"
inline void wxLogFatalError(const wxFormatString& ) {} template<typename T1> void wxLogFatalError(const wxFormatString& , T1 ) {} template<typename T1, typename T2> void wxLogFatalError(const wxFormatString& , T1 , T2 ) {} template<typename T1, typename T2, typename T3> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 ) {} template<typename T1, typename T2, typename T3, typename T4> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void wxLogFatalError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 , T30 ) {} inline void wxVLogFatalError(const wxFormatString& , va_list ) { };
inline void wxLogError(const wxFormatString& ) {} template<typename T1> void wxLogError(const wxFormatString& , T1 ) {} template<typename T1, typename T2> void wxLogError(const wxFormatString& , T1 , T2 ) {} template<typename T1, typename T2, typename T3> void wxLogError(const wxFormatString& , T1 , T2 , T3 ) {} template<typename T1, typename T2, typename T3, typename T4> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void wxLogError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 , T30 ) {} inline void wxVLogError(const wxFormatString& , va_list ) { };
inline void wxLogSysError(const wxFormatString& ) {} template<typename T1> void wxLogSysError(const wxFormatString& , T1 ) {} template<typename T1, typename T2> void wxLogSysError(const wxFormatString& , T1 , T2 ) {} template<typename T1, typename T2, typename T3> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 ) {} template<typename T1, typename T2, typename T3, typename T4> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void wxLogSysError(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 , T30 ) {} inline void wxVLogSysError(const wxFormatString& , va_list ) { };
inline void wxLogSysError(long , const wxFormatString& ) {} template<typename T1> void wxLogSysError(long , const wxFormatString& , T1 ) {} template<typename T1, typename T2> void wxLogSysError(long , const wxFormatString& , T1 , T2 ) {} template<typename T1, typename T2, typename T3> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 ) {} template<typename T1, typename T2, typename T3, typename T4> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void wxLogSysError(long , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 , T30 ) {} inline void wxVLogSysError(long , const wxFormatString& , va_list ) {};
inline void wxLogWarning(const wxFormatString& ) {} template<typename T1> void wxLogWarning(const wxFormatString& , T1 ) {} template<typename T1, typename T2> void wxLogWarning(const wxFormatString& , T1 , T2 ) {} template<typename T1, typename T2, typename T3> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 ) {} template<typename T1, typename T2, typename T3, typename T4> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void wxLogWarning(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 , T30 ) {} inline void wxVLogWarning(const wxFormatString& , va_list ) { };
inline void wxLogMessage(const wxFormatString& ) {} template<typename T1> void wxLogMessage(const wxFormatString& , T1 ) {} template<typename T1, typename T2> void wxLogMessage(const wxFormatString& , T1 , T2 ) {} template<typename T1, typename T2, typename T3> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 ) {} template<typename T1, typename T2, typename T3, typename T4> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void wxLogMessage(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 , T30 ) {} inline void wxVLogMessage(const wxFormatString& , va_list ) { };
inline void wxLogInfo(const wxFormatString& ) {} template<typename T1> void wxLogInfo(const wxFormatString& , T1 ) {} template<typename T1, typename T2> void wxLogInfo(const wxFormatString& , T1 , T2 ) {} template<typename T1, typename T2, typename T3> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 ) {} template<typename T1, typename T2, typename T3, typename T4> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void wxLogInfo(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 , T30 ) {} inline void wxVLogInfo(const wxFormatString& , va_list ) { };
inline void wxLogVerbose(const wxFormatString& ) {} template<typename T1> void wxLogVerbose(const wxFormatString& , T1 ) {} template<typename T1, typename T2> void wxLogVerbose(const wxFormatString& , T1 , T2 ) {} template<typename T1, typename T2, typename T3> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 ) {} template<typename T1, typename T2, typename T3, typename T4> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void wxLogVerbose(const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 , T30 ) {} inline void wxVLogVerbose(const wxFormatString& , va_list ) { };

inline void wxLogGeneric(wxLogLevel , const wxFormatString& ) {} template<typename T1> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 ) {} template<typename T1, typename T2> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 ) {} template<typename T1, typename T2, typename T3> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 ) {} template<typename T1, typename T2, typename T3, typename T4> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 ) {} template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> void wxLogGeneric(wxLogLevel , const wxFormatString& , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 , T25 , T26 , T27 , T28 , T29 , T30 ) {} inline void wxVLogGeneric(wxLogLevel , const wxFormatString& , va_list ) {};







class wxLogNull
{
public:
    wxLogNull() { }
};
# 1551 "/usr/local/include/wx-3.0/wx/log.h"
    inline void wxLogNop() { }
# 1598 "/usr/local/include/wx-3.0/wx/log.h"
void
wxSafeShowMessage(const wxString& title, const wxString& text);
# 24 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 1 "/usr/local/include/wx-3.0/wx/event.h" 1
# 17 "/usr/local/include/wx-3.0/wx/event.h"
# 1 "/usr/local/include/wx-3.0/wx/clntdata.h" 1
# 18 "/usr/local/include/wx-3.0/wx/clntdata.h"
typedef int (*wxShadowObjectMethod)(void*, void*);
class wxShadowObjectMethods_wxImplementation_Pair { public: typedef wxString first_type; typedef wxShadowObjectMethod second_type; typedef wxString t1; typedef wxShadowObjectMethod t2; typedef const wxString const_t1; typedef const wxShadowObjectMethod const_t2; wxShadowObjectMethods_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class wxShadowObjectMethods_wxImplementation_KeyEx { typedef wxString key_type; typedef wxShadowObjectMethods_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: wxShadowObjectMethods_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; } wxShadowObjectMethods_wxImplementation_KeyEx& operator=(const wxShadowObjectMethods_wxImplementation_KeyEx&) { return *this; } }; class wxShadowObjectMethods_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef wxString key_type; typedef wxShadowObjectMethods_wxImplementation_Pair value_type; typedef wxStringHash hasher; typedef wxStringEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const wxString const_key_type; typedef const wxShadowObjectMethods_wxImplementation_Pair const_mapped_type; public: typedef wxShadowObjectMethods_wxImplementation_KeyEx key_extractor; typedef wxShadowObjectMethods_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(__null), m_ht(__null) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return __null; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; wxShadowObjectMethods_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } wxShadowObjectMethods_wxImplementation_HashTable( const Self& ht ) : m_table(__null), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~wxShadowObjectMethods_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(__null, this); } iterator end() { return iterator(__null, this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return __null; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return __null; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class wxShadowObjectMethods:public wxShadowObjectMethods_wxImplementation_HashTable { public: typedef wxShadowObjectMethod mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; wxShadowObjectMethods( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : wxShadowObjectMethods_wxImplementation_HashTable( hint, hf, eq, wxShadowObjectMethods_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( wxShadowObjectMethods_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( wxShadowObjectMethods_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return wxShadowObjectMethods_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } };




class wxShadowObjectFields_wxImplementation_Pair { public: typedef wxString first_type; typedef void * second_type; typedef wxString t1; typedef void * t2; typedef const wxString const_t1; typedef const void * const_t2; wxShadowObjectFields_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class wxShadowObjectFields_wxImplementation_KeyEx { typedef wxString key_type; typedef wxShadowObjectFields_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: wxShadowObjectFields_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; } wxShadowObjectFields_wxImplementation_KeyEx& operator=(const wxShadowObjectFields_wxImplementation_KeyEx&) { return *this; } }; class wxShadowObjectFields_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef wxString key_type; typedef wxShadowObjectFields_wxImplementation_Pair value_type; typedef wxStringHash hasher; typedef wxStringEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const wxString const_key_type; typedef const wxShadowObjectFields_wxImplementation_Pair const_mapped_type; public: typedef wxShadowObjectFields_wxImplementation_KeyEx key_extractor; typedef wxShadowObjectFields_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(__null), m_ht(__null) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return __null; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; wxShadowObjectFields_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } wxShadowObjectFields_wxImplementation_HashTable( const Self& ht ) : m_table(__null), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~wxShadowObjectFields_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(__null, this); } iterator end() { return iterator(__null, this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return __null; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return __null; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class wxShadowObjectFields:public wxShadowObjectFields_wxImplementation_HashTable { public: typedef void * mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; wxShadowObjectFields( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : wxShadowObjectFields_wxImplementation_HashTable( hint, hf, eq, wxShadowObjectFields_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( wxShadowObjectFields_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( wxShadowObjectFields_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return wxShadowObjectFields_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } };





class wxShadowObject
{
public:
    wxShadowObject() { }

    void AddMethod( const wxString &name, wxShadowObjectMethod method )
    {
        wxShadowObjectMethods::iterator it = m_methods.find( name );
        if (it == m_methods.end())
            m_methods[ name ] = method;
        else
            it->second = method;
    }

    bool InvokeMethod( const wxString &name, void* window, void* param, int* returnValue )
    {
        wxShadowObjectMethods::iterator it = m_methods.find( name );
        if (it == m_methods.end())
            return false;
        wxShadowObjectMethod method = it->second;
        int ret = (*method)(window, param);
        if (returnValue)
            *returnValue = ret;
        return true;
    }

    void AddField( const wxString &name, void* initialValue = __null )
    {
        wxShadowObjectFields::iterator it = m_fields.find( name );
        if (it == m_fields.end())
            m_fields[ name ] = initialValue;
        else
            it->second = initialValue;
    }

    void SetField( const wxString &name, void* value )
    {
        wxShadowObjectFields::iterator it = m_fields.find( name );
        if (it == m_fields.end())
            return;
        it->second = value;
    }

    void* GetField( const wxString &name, void *defaultValue = __null )
    {
        wxShadowObjectFields::iterator it = m_fields.find( name );
        if (it == m_fields.end())
            return defaultValue;
        return it->second;
    }

private:
    wxShadowObjectMethods m_methods;
    wxShadowObjectFields m_fields;
};





enum wxClientDataType
{
    wxClientData_None,
    wxClientData_Object,
    wxClientData_Void
};

class wxClientData
{
public:
    wxClientData() { }
    virtual ~wxClientData() { }
};

class wxStringClientData : public wxClientData
{
public:
    wxStringClientData() : m_data() { }
    wxStringClientData( const wxString &data ) : m_data(data) { }
    void SetData( const wxString &data ) { m_data = data; }
    const wxString& GetData() const { return m_data; }

private:
    wxString m_data;
};
# 125 "/usr/local/include/wx-3.0/wx/clntdata.h"
class wxClientDataContainer
{
public:
    wxClientDataContainer();
    virtual ~wxClientDataContainer();

    void SetClientObject( wxClientData *data ) { DoSetClientObject(data); }
    wxClientData *GetClientObject() const { return DoGetClientObject(); }

    void SetClientData( void *data ) { DoSetClientData(data); }
    void *GetClientData() const { return DoGetClientData(); }

protected:





    union
    {
        wxClientData *m_clientObject;
        void *m_clientData;
    };


    virtual void DoSetClientObject( wxClientData *data );
    virtual wxClientData *DoGetClientObject() const;

    virtual void DoSetClientData( void *data );
    virtual void *DoGetClientData() const;


    wxClientDataType m_clientDataType;

};
# 18 "/usr/local/include/wx-3.0/wx/event.h" 2








# 1 "/usr/local/include/wx-3.0/wx/thread.h" 1
# 804 "/usr/local/include/wx-3.0/wx/thread.h"
inline void wxMutexGuiEnter() { }
inline void wxMutexGuiLeave() { }
# 819 "/usr/local/include/wx-3.0/wx/thread.h"
inline bool wxIsMainThread() { return true; }
# 845 "/usr/local/include/wx-3.0/wx/thread.h"
class wxMutexGuiLocker
{
public:
    wxMutexGuiLocker() { wxMutexGuiEnter(); }
   ~wxMutexGuiLocker() { wxMutexGuiLeave(); }
};
# 27 "/usr/local/include/wx-3.0/wx/event.h" 2
# 1 "/usr/local/include/wx-3.0/wx/tracker.h" 1
# 15 "/usr/local/include/wx-3.0/wx/tracker.h"
class wxEventConnectionRef;



class wxTrackerNode
{
public:
    wxTrackerNode() : m_nxt(__null) { }
    virtual ~wxTrackerNode() { }

    virtual void OnObjectDestroy() = 0;

    virtual wxEventConnectionRef *ToEventConnection() { return __null; }

private:
    wxTrackerNode *m_nxt;

    friend class wxTrackable;
    friend class wxEvtHandler;
};


class wxTrackable
{
public:
    void AddNode(wxTrackerNode *prn)
    {
        prn->m_nxt = m_first;
        m_first = prn;
    }

    void RemoveNode(wxTrackerNode *prn)
    {
        for ( wxTrackerNode **pprn = &m_first; *pprn; pprn = &(*pprn)->m_nxt )
        {
            if ( *pprn == prn )
            {
                *pprn = prn->m_nxt;
                return;
            }
        }

        do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/tracker.h", 57, __FUNCTION__, "Assert failure", "removing invalid tracker node"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
    }

    wxTrackerNode *GetFirst() const { return m_first; }

protected:



    wxTrackable() : m_first(__null) { }



    wxTrackable(const wxTrackable& ) : m_first(__null) { }
    wxTrackable& operator=(const wxTrackable& ) { return *this; }




    ~wxTrackable()
    {

        while ( m_first )
        {
            wxTrackerNode * const first = m_first;
            m_first = first->m_nxt;
            first->OnObjectDestroy();
        }
    }

    wxTrackerNode *m_first;
};
# 28 "/usr/local/include/wx-3.0/wx/event.h" 2
# 1 "/usr/local/include/wx-3.0/wx/typeinfo.h" 1
# 63 "/usr/local/include/wx-3.0/wx/typeinfo.h"
class wxTypeIdentifier
{
public:
    wxTypeIdentifier(const char* className)
    {
        m_className = className;
    }

    bool operator==(const wxTypeIdentifier& other)
    {
        return strcmp(m_className, other.m_className) == 0;
    }

    bool operator!=(const wxTypeIdentifier& other)
    {
        return strcmp(m_className, other.m_className) != 0;
    }
private:
    const char* m_className;
};
# 29 "/usr/local/include/wx-3.0/wx/event.h" 2
# 1 "/usr/local/include/wx-3.0/wx/any.h" 1
# 30 "/usr/local/include/wx-3.0/wx/event.h" 2


# 1 "/usr/local/include/wx-3.0/wx/meta/convertible.h" 1
# 16 "/usr/local/include/wx-3.0/wx/meta/convertible.h"
template <class D, class B>
struct wxConvertibleTo_SizeHelper
{
    static char Match(B* pb);
    static int Match(...);
};



template <class D, class B>
struct wxConvertibleTo
{
    enum
    {
        value =
            sizeof(wxConvertibleTo_SizeHelper<D,B>::Match(static_cast<D*>(__null)))
            ==
            sizeof(char)
    };
};
# 33 "/usr/local/include/wx-3.0/wx/event.h" 2





# 1 "/usr/local/include/wx-3.0/wx/meta/removeref.h" 1
# 20 "/usr/local/include/wx-3.0/wx/meta/removeref.h"
template <typename T>
struct wxRemoveRef
{
    typedef T type;
};

template <typename T>
struct wxRemoveRef<T&>
{
    typedef T type;
};
# 39 "/usr/local/include/wx-3.0/wx/event.h" 2








class wxList;
class wxEvent;
class wxEventFilter;
# 74 "/usr/local/include/wx-3.0/wx/event.h"
class wxEvtHandler;
class wxEventConnectionRef;





typedef int wxEventType;
# 97 "/usr/local/include/wx-3.0/wx/event.h"
extern wxEventType wxNewEventType();
# 157 "/usr/local/include/wx-3.0/wx/event.h"
template <typename T>
class wxEventTypeTag
{
public:

    typedef T EventClass;

    wxEventTypeTag(wxEventType type) { m_type = type; }




    operator const wxEventType&() const { return m_type; }

private:
    wxEventType m_type;
};




typedef void (wxEvtHandler::*wxEventFunction)(wxEvent&);
# 187 "/usr/local/include/wx-3.0/wx/event.h"
typedef wxEventFunction wxObjectEventFunction;


class wxEventFunctor
{
public:
    virtual ~wxEventFunctor();


    virtual void operator()(wxEvtHandler *, wxEvent&) = 0;



    virtual bool IsMatching(const wxEventFunctor& functor) const = 0;



    virtual wxEvtHandler *GetEvtHandler() const
        { return __null; }





    virtual wxEventFunction GetEvtMethod() const
        { return __null; }

private:

};


class wxObjectEventFunctor : public wxEventFunctor
{
public:
    wxObjectEventFunctor(wxObjectEventFunction method, wxEvtHandler *handler)
        : m_handler( handler ), m_method( method )
        { }

    virtual void operator()(wxEvtHandler *handler, wxEvent& event);

    virtual bool IsMatching(const wxEventFunctor& functor) const
    {
        if ( wxTypeIdentifier(typeid(functor).name()) == wxTypeIdentifier(typeid(*this).name()) )
        {
            const wxObjectEventFunctor &other =
                static_cast< const wxObjectEventFunctor & >( functor );







            return ( m_method == other.m_method || other.m_method == 0 ) &&
                   ( m_handler == other.m_handler || other.m_handler == __null );
        }
        else
            return false;
    }

    virtual wxEvtHandler *GetEvtHandler() const
        { return m_handler; }

    virtual wxEventFunction GetEvtMethod() const
        { return m_method; }

private:
    wxEvtHandler *m_handler;
    wxEventFunction m_method;


    wxObjectEventFunctor() { }


};


inline wxObjectEventFunctor *
wxNewEventFunctor(const wxEventType& ,
                  wxObjectEventFunction method,
                  wxEvtHandler *handler)
{
    return new wxObjectEventFunctor(method, handler);
}


inline wxObjectEventFunctor *
wxNewEventTableFunctor(const wxEventType& ,
                       wxObjectEventFunction method)
{
    return new wxObjectEventFunctor(method, __null);
}

inline wxObjectEventFunctor
wxMakeEventFunctor(const wxEventType& ,
                        wxObjectEventFunction method,
                        wxEvtHandler *handler)
{
    return wxObjectEventFunctor(method, handler);
}



namespace wxPrivate
{



template <typename T> struct EventClassOf;



template <typename T>
struct EventClassOf< wxEventTypeTag<T> >
{
    typedef typename wxEventTypeTag<T>::EventClass type;
};



template <>
struct EventClassOf<wxEventType>
{
    typedef wxEvent type;
};




template <typename T, typename A, bool> struct HandlerImpl;


template <typename T, typename A>
struct HandlerImpl<T, A, true>
{
    static bool IsEvtHandler()
        { return true; }
    static T *ConvertFromEvtHandler(wxEvtHandler *p)
        { return static_cast<T *>(p); }
    static wxEvtHandler *ConvertToEvtHandler(T *p)
        { return p; }
    static wxEventFunction ConvertToEvtMethod(void (T::*f)(A&))
        { return static_cast<wxEventFunction>(
                    reinterpret_cast<void (T::*)(wxEvent&)>(f)); }
};


template <typename T, typename A>
struct HandlerImpl<T, A, false>
{
    static bool IsEvtHandler()
        { return false; }
    static T *ConvertFromEvtHandler(wxEvtHandler *)
        { return __null; }
    static wxEvtHandler *ConvertToEvtHandler(T *)
        { return __null; }
    static wxEventFunction ConvertToEvtMethod(void (T::*)(A&))
        { return __null; }
};

}
# 359 "/usr/local/include/wx-3.0/wx/event.h"
template
  <typename EventTag, typename Class, typename EventArg, typename EventHandler>
class wxEventFunctorMethod
    : public wxEventFunctor,
      private wxPrivate::HandlerImpl
              <
                Class,
                EventArg,
                wxConvertibleTo<Class, wxEvtHandler>::value != 0
              >
{
private:
    static void CheckHandlerArgument(EventArg *) { }

public:

    typedef typename wxPrivate::EventClassOf<EventTag>::type EventClass;


    wxEventFunctorMethod(void (Class::*method)(EventArg&), EventHandler *handler)
        : m_handler( handler ), m_method( method )
    {
        do { if ( wxTheAssertHandler && !(handler || this->IsEvtHandler()) && (wxOnAssert("/usr/local/include/wx-3.0/wx/event.h", 383, __FUNCTION__, "handler || this->IsEvtHandler()", "handlers defined in non-wxEvtHandler-derived classes " "must be connected with a valid sink object"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );






        CheckHandlerArgument(static_cast<EventClass *>(__null));
    }

    virtual void operator()(wxEvtHandler *handler, wxEvent& event)
    {
        Class * realHandler = m_handler;
        if ( !realHandler )
        {
            realHandler = this->ConvertFromEvtHandler(handler);


            if ( realHandler ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/event.h", 399, __FUNCTION__, "realHandler", "invalid event handler"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct;
        }




        (realHandler->*m_method)(static_cast<EventArg&>(event));
    }

    virtual bool IsMatching(const wxEventFunctor& functor) const
    {
        if ( wxTypeIdentifier(typeid(functor).name()) != wxTypeIdentifier(typeid(*this).name()) )
            return false;

        typedef wxEventFunctorMethod<EventTag, Class, EventArg, EventHandler>
            ThisFunctor;


        const ThisFunctor& other = static_cast<const ThisFunctor &>(functor);

        return (m_method == other.m_method || other.m_method == __null) &&
               (m_handler == other.m_handler || other.m_handler == __null);
    }

    virtual wxEvtHandler *GetEvtHandler() const
        { return this->ConvertToEvtHandler(m_handler); }

    virtual wxEventFunction GetEvtMethod() const
        { return this->ConvertToEvtMethod(m_method); }

private:
    EventHandler *m_handler;
    void (Class::*m_method)(EventArg&);


    wxEventFunctorMethod() { }

    typedef wxEventFunctorMethod<EventTag, Class,
                                 EventArg, EventHandler> thisClass;

};



template <typename EventTag, typename EventArg>
class wxEventFunctorFunction : public wxEventFunctor
{
private:
    static void CheckHandlerArgument(EventArg *) { }

public:

    typedef typename wxPrivate::EventClassOf<EventTag>::type EventClass;

    wxEventFunctorFunction( void ( *handler )( EventArg & ))
        : m_handler( handler )
    {



        CheckHandlerArgument(static_cast<EventClass *>(__null));
    }

    virtual void operator()(wxEvtHandler *, wxEvent& event)
    {







        m_handler(static_cast<EventArg&>(event));
    }

    virtual bool IsMatching(const wxEventFunctor &functor) const
    {
        if ( wxTypeIdentifier(typeid(functor).name()) != wxTypeIdentifier(typeid(*this).name()) )
            return false;

        typedef wxEventFunctorFunction<EventTag, EventArg> ThisFunctor;

        const ThisFunctor& other = static_cast<const ThisFunctor&>( functor );

        return m_handler == other.m_handler;
    }

private:
    void (*m_handler)(EventArg&);


    wxEventFunctorFunction() { }

    typedef wxEventFunctorFunction<EventTag, EventArg> thisClass;

};


template <typename EventTag, typename Functor>
class wxEventFunctorFunctor : public wxEventFunctor
{
public:
    typedef typename EventTag::EventClass EventArg;

    wxEventFunctorFunctor(const Functor& handler)
        : m_handler(handler), m_handlerAddr(&handler)
        { }

    virtual void operator()(wxEvtHandler *, wxEvent& event)
    {







        m_handler(static_cast<EventArg&>(event));
    }

    virtual bool IsMatching(const wxEventFunctor &functor) const
    {
        if ( wxTypeIdentifier(typeid(functor).name()) != wxTypeIdentifier(typeid(*this).name()) )
            return false;

        typedef wxEventFunctorFunctor<EventTag, Functor> FunctorThis;

        const FunctorThis& other = static_cast<const FunctorThis&>(functor);



        return m_handlerAddr == other.m_handlerAddr;
    }

private:


    Functor m_handler;


    const void *m_handlerAddr;


    wxEventFunctorFunctor() { }

    typedef wxEventFunctorFunctor<EventTag, Functor> thisClass;

};
# 555 "/usr/local/include/wx-3.0/wx/event.h"
template <typename EventTag, typename EventArg>
inline wxEventFunctorFunction<EventTag, EventArg> *
wxNewEventFunctor(const EventTag&, void (*func)(EventArg &))
{
    return new wxEventFunctorFunction<EventTag, EventArg>(func);
}

template <typename EventTag, typename EventArg>
inline wxEventFunctorFunction<EventTag, EventArg>
wxMakeEventFunctor(const EventTag&, void (*func)(EventArg &))
{
    return wxEventFunctorFunction<EventTag, EventArg>(func);
}


template <typename EventTag, typename Functor>
inline wxEventFunctorFunctor<EventTag, Functor> *
wxNewEventFunctor(const EventTag&, const Functor &func)
{
    return new wxEventFunctorFunctor<EventTag, Functor>(func);
}

template <typename EventTag, typename Functor>
inline wxEventFunctorFunctor<EventTag, Functor>
wxMakeEventFunctor(const EventTag&, const Functor &func)
{
    return wxEventFunctorFunctor<EventTag, Functor>(func);
}


template
  <typename EventTag, typename Class, typename EventArg, typename EventHandler>
inline wxEventFunctorMethod<EventTag, Class, EventArg, EventHandler> *
wxNewEventFunctor(const EventTag&,
                  void (Class::*method)(EventArg&),
                  EventHandler *handler)
{
    return new wxEventFunctorMethod<EventTag, Class, EventArg, EventHandler>(
                method, handler);
}

template
    <typename EventTag, typename Class, typename EventArg, typename EventHandler>
inline wxEventFunctorMethod<EventTag, Class, EventArg, EventHandler>
wxMakeEventFunctor(const EventTag&,
                   void (Class::*method)(EventArg&),
                   EventHandler *handler)
{
    return wxEventFunctorMethod<EventTag, Class, EventArg, EventHandler>(
                method, handler);
}




template <typename EventTag, typename Class, typename EventArg>
inline wxEventFunctorMethod<EventTag, Class, EventArg, Class> *
wxNewEventTableFunctor(const EventTag&, void (Class::*method)(EventArg&))
{
    return new wxEventFunctorMethod<EventTag, Class, EventArg, Class>(
                    method, __null);
}







extern const wxEventType wxEVT_NULL;
extern const wxEventType wxEVT_FIRST;
extern const wxEventType wxEVT_USER_FIRST;


class wxIdleEvent;
class wxThreadEvent;
class wxAsyncMethodCallEvent;
class wxCommandEvent;
class wxMouseEvent;
class wxFocusEvent;
class wxChildFocusEvent;
class wxKeyEvent;
class wxNavigationKeyEvent;
class wxSetCursorEvent;
class wxScrollEvent;
class wxSpinEvent;
class wxScrollWinEvent;
class wxSizeEvent;
class wxMoveEvent;
class wxCloseEvent;
class wxActivateEvent;
class wxWindowCreateEvent;
class wxWindowDestroyEvent;
class wxShowEvent;
class wxIconizeEvent;
class wxMaximizeEvent;
class wxMouseCaptureChangedEvent;
class wxMouseCaptureLostEvent;
class wxPaintEvent;
class wxEraseEvent;
class wxNcPaintEvent;
class wxMenuEvent;
class wxContextMenuEvent;
class wxSysColourChangedEvent;
class wxDisplayChangedEvent;
class wxQueryNewPaletteEvent;
class wxPaletteChangedEvent;
class wxJoystickEvent;
class wxDropFilesEvent;
class wxInitDialogEvent;
class wxUpdateUIEvent;
class wxClipboardTextEvent;
class wxHelpEvent;



extern const wxEventTypeTag< wxCommandEvent > wxEVT_BUTTON;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_CHECKBOX;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_CHOICE;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_LISTBOX;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_LISTBOX_DCLICK;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_CHECKLISTBOX;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_MENU;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_SLIDER;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_RADIOBOX;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_RADIOBUTTON;


extern const wxEventTypeTag< wxCommandEvent > wxEVT_SCROLLBAR;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_VLBOX;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_COMBOBOX;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_TOOL_RCLICKED;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_TOOL_DROPDOWN;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_TOOL_ENTER;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_COMBOBOX_DROPDOWN;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_COMBOBOX_CLOSEUP;


extern const wxEventTypeTag< wxThreadEvent > wxEVT_THREAD;
extern const wxEventTypeTag< wxAsyncMethodCallEvent > wxEVT_ASYNC_METHOD_CALL;


extern const wxEventTypeTag< wxMouseEvent > wxEVT_LEFT_DOWN;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_LEFT_UP;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_MIDDLE_DOWN;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_MIDDLE_UP;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_RIGHT_DOWN;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_RIGHT_UP;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_MOTION;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_ENTER_WINDOW;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_LEAVE_WINDOW;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_LEFT_DCLICK;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_MIDDLE_DCLICK;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_RIGHT_DCLICK;
extern const wxEventTypeTag< wxFocusEvent > wxEVT_SET_FOCUS;
extern const wxEventTypeTag< wxFocusEvent > wxEVT_KILL_FOCUS;
extern const wxEventTypeTag< wxChildFocusEvent > wxEVT_CHILD_FOCUS;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_MOUSEWHEEL;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_AUX1_DOWN;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_AUX1_UP;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_AUX1_DCLICK;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_AUX2_DOWN;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_AUX2_UP;
extern const wxEventTypeTag< wxMouseEvent > wxEVT_AUX2_DCLICK;


extern const wxEventTypeTag< wxKeyEvent > wxEVT_CHAR;
extern const wxEventTypeTag< wxKeyEvent > wxEVT_CHAR_HOOK;
extern const wxEventTypeTag< wxNavigationKeyEvent > wxEVT_NAVIGATION_KEY;
extern const wxEventTypeTag< wxKeyEvent > wxEVT_KEY_DOWN;
extern const wxEventTypeTag< wxKeyEvent > wxEVT_KEY_UP;





extern const wxEventTypeTag< wxKeyEvent > wxEVT_AFTER_CHAR;


extern const wxEventTypeTag< wxSetCursorEvent > wxEVT_SET_CURSOR;


extern const wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_TOP;
extern const wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_BOTTOM;
extern const wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_LINEUP;
extern const wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_LINEDOWN;
extern const wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_PAGEUP;
extern const wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_PAGEDOWN;
extern const wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_THUMBTRACK;
extern const wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_THUMBRELEASE;
extern const wxEventTypeTag< wxScrollEvent > wxEVT_SCROLL_CHANGED;
# 763 "/usr/local/include/wx-3.0/wx/event.h"
extern const wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_TOP;
extern const wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_BOTTOM;
extern const wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_LINEUP;
extern const wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_LINEDOWN;
extern const wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_PAGEUP;
extern const wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_PAGEDOWN;
extern const wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_THUMBTRACK;
extern const wxEventTypeTag< wxScrollWinEvent > wxEVT_SCROLLWIN_THUMBRELEASE;


extern const wxEventTypeTag< wxSizeEvent > wxEVT_SIZE;
extern const wxEventTypeTag< wxMoveEvent > wxEVT_MOVE;
extern const wxEventTypeTag< wxCloseEvent > wxEVT_CLOSE_WINDOW;
extern const wxEventTypeTag< wxCloseEvent > wxEVT_END_SESSION;
extern const wxEventTypeTag< wxCloseEvent > wxEVT_QUERY_END_SESSION;
extern const wxEventTypeTag< wxActivateEvent > wxEVT_ACTIVATE_APP;
extern const wxEventTypeTag< wxActivateEvent > wxEVT_ACTIVATE;
extern const wxEventTypeTag< wxWindowCreateEvent > wxEVT_CREATE;
extern const wxEventTypeTag< wxWindowDestroyEvent > wxEVT_DESTROY;
extern const wxEventTypeTag< wxShowEvent > wxEVT_SHOW;
extern const wxEventTypeTag< wxIconizeEvent > wxEVT_ICONIZE;
extern const wxEventTypeTag< wxMaximizeEvent > wxEVT_MAXIMIZE;
extern const wxEventTypeTag< wxMouseCaptureChangedEvent > wxEVT_MOUSE_CAPTURE_CHANGED;
extern const wxEventTypeTag< wxMouseCaptureLostEvent > wxEVT_MOUSE_CAPTURE_LOST;
extern const wxEventTypeTag< wxPaintEvent > wxEVT_PAINT;
extern const wxEventTypeTag< wxEraseEvent > wxEVT_ERASE_BACKGROUND;
extern const wxEventTypeTag< wxNcPaintEvent > wxEVT_NC_PAINT;
extern const wxEventTypeTag< wxMenuEvent > wxEVT_MENU_OPEN;
extern const wxEventTypeTag< wxMenuEvent > wxEVT_MENU_CLOSE;
extern const wxEventTypeTag< wxMenuEvent > wxEVT_MENU_HIGHLIGHT;
extern const wxEventTypeTag< wxContextMenuEvent > wxEVT_CONTEXT_MENU;
extern const wxEventTypeTag< wxSysColourChangedEvent > wxEVT_SYS_COLOUR_CHANGED;
extern const wxEventTypeTag< wxDisplayChangedEvent > wxEVT_DISPLAY_CHANGED;
extern const wxEventTypeTag< wxQueryNewPaletteEvent > wxEVT_QUERY_NEW_PALETTE;
extern const wxEventTypeTag< wxPaletteChangedEvent > wxEVT_PALETTE_CHANGED;
extern const wxEventTypeTag< wxJoystickEvent > wxEVT_JOY_BUTTON_DOWN;
extern const wxEventTypeTag< wxJoystickEvent > wxEVT_JOY_BUTTON_UP;
extern const wxEventTypeTag< wxJoystickEvent > wxEVT_JOY_MOVE;
extern const wxEventTypeTag< wxJoystickEvent > wxEVT_JOY_ZMOVE;
extern const wxEventTypeTag< wxDropFilesEvent > wxEVT_DROP_FILES;
extern const wxEventTypeTag< wxInitDialogEvent > wxEVT_INIT_DIALOG;
extern const wxEventTypeTag< wxIdleEvent > wxEVT_IDLE;
extern const wxEventTypeTag< wxUpdateUIEvent > wxEVT_UPDATE_UI;
extern const wxEventTypeTag< wxSizeEvent > wxEVT_SIZING;
extern const wxEventTypeTag< wxMoveEvent > wxEVT_MOVING;
extern const wxEventTypeTag< wxMoveEvent > wxEVT_MOVE_START;
extern const wxEventTypeTag< wxMoveEvent > wxEVT_MOVE_END;
extern const wxEventTypeTag< wxActivateEvent > wxEVT_HIBERNATE;


extern const wxEventTypeTag< wxClipboardTextEvent > wxEVT_TEXT_COPY;
extern const wxEventTypeTag< wxClipboardTextEvent > wxEVT_TEXT_CUT;
extern const wxEventTypeTag< wxClipboardTextEvent > wxEVT_TEXT_PASTE;



extern const wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_LEFT_CLICK;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_LEFT_DCLICK;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_RIGHT_CLICK;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_RIGHT_DCLICK;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_SET_FOCUS;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_KILL_FOCUS;
extern const wxEventTypeTag< wxCommandEvent > wxEVT_COMMAND_ENTER;


extern const wxEventTypeTag< wxHelpEvent > wxEVT_HELP;
extern const wxEventTypeTag< wxHelpEvent > wxEVT_DETAILED_HELP;
# 842 "/usr/local/include/wx-3.0/wx/event.h"
extern const wxEventTypeTag< wxCommandEvent > wxEVT_TEXT;
# 851 "/usr/local/include/wx-3.0/wx/event.h"
enum wxEventPropagation
{

    wxEVENT_PROPAGATE_NONE = 0,


    wxEVENT_PROPAGATE_MAX = 2147483647
};



enum wxEventCategory
{





    wxEVT_CATEGORY_UI = 1,





    wxEVT_CATEGORY_USER_INPUT = 2,


    wxEVT_CATEGORY_SOCKET = 4,


    wxEVT_CATEGORY_TIMER = 8,




    wxEVT_CATEGORY_THREAD = 16,





    wxEVT_CATEGORY_UNKNOWN = 32,




    wxEVT_CATEGORY_CLIPBOARD = 64,






    wxEVT_CATEGORY_NATIVE_EVENTS = wxEVT_CATEGORY_UI|wxEVT_CATEGORY_USER_INPUT,


    wxEVT_CATEGORY_ALL =
        wxEVT_CATEGORY_UI|wxEVT_CATEGORY_USER_INPUT|wxEVT_CATEGORY_SOCKET| wxEVT_CATEGORY_TIMER|wxEVT_CATEGORY_THREAD|wxEVT_CATEGORY_UNKNOWN| wxEVT_CATEGORY_CLIPBOARD


};
# 925 "/usr/local/include/wx-3.0/wx/event.h"
class wxEvent : public wxObject
{
public:
    wxEvent(int winid = 0, wxEventType commandType = wxEVT_NULL );

    void SetEventType(wxEventType typ) { m_eventType = typ; }
    wxEventType GetEventType() const { return m_eventType; }

    wxObject *GetEventObject() const { return m_eventObject; }
    void SetEventObject(wxObject *obj) { m_eventObject = obj; }

    long GetTimestamp() const { return m_timeStamp; }
    void SetTimestamp(long ts = 0) { m_timeStamp = ts; }

    int GetId() const { return m_id; }
    void SetId(int Id) { m_id = Id; }



    wxObject *GetEventUserData() const { return m_callbackUserData; }





    void Skip(bool skip = true) { m_skipped = skip; }
    bool GetSkipped() const { return m_skipped; }




    virtual wxEvent *Clone() const = 0;




    virtual wxEventCategory GetEventCategory() const
        { return wxEVT_CATEGORY_UI; }



    bool IsCommandEvent() const { return m_isCommandEvent; }


    bool ShouldPropagate() const
        { return m_propagationLevel != wxEVENT_PROPAGATE_NONE; }



    int StopPropagation()
    {
        int propagationLevel = m_propagationLevel;
        m_propagationLevel = wxEVENT_PROPAGATE_NONE;
        return propagationLevel;
    }



    void ResumePropagation(int propagationLevel)
    {
        m_propagationLevel = propagationLevel;
    }



    wxEvtHandler* GetPropagatedFrom() const { return m_propagatedFrom; }




    bool WasProcessed()
    {
        if ( m_wasProcessed )
            return true;

        m_wasProcessed = true;

        return false;
    }



    void SetWillBeProcessedAgain()
    {
        m_willBeProcessedAgain = true;
    }

    bool WillBeProcessedAgain()
    {
        if ( m_willBeProcessedAgain )
        {
            m_willBeProcessedAgain = false;
            return true;
        }

        return false;
    }




    bool ShouldProcessOnlyIn(wxEvtHandler *h) const
    {
        return h == m_handlerToProcessOnlyIn;
    }







    void DidntHonourProcessOnlyIn()
    {
        m_handlerToProcessOnlyIn = __null;
    }

protected:
    wxObject* m_eventObject;
    wxEventType m_eventType;
    long m_timeStamp;
    int m_id;

public:

    wxObject* m_callbackUserData;

private:

    wxEvtHandler *m_handlerToProcessOnlyIn;

protected:


    int m_propagationLevel;



    wxEvtHandler* m_propagatedFrom;

    bool m_skipped;
    bool m_isCommandEvent;





    bool m_wasProcessed;




    bool m_willBeProcessedAgain;

protected:
    wxEvent(const wxEvent&);
    wxEvent& operator=(const wxEvent&);

private:

    friend class wxPropagateOnce;


    friend class wxEventProcessInHandlerOnly;


    public: static wxClassInfo ms_classInfo; virtual wxClassInfo *GetClassInfo() const;
};




class wxPropagationDisabler
{
public:
    wxPropagationDisabler(wxEvent& event) : m_event(event)
    {
        m_propagationLevelOld = m_event.StopPropagation();
    }

    ~wxPropagationDisabler()
    {
        m_event.ResumePropagation(m_propagationLevelOld);
    }

private:
    wxEvent& m_event;
    int m_propagationLevelOld;

    private: wxPropagationDisabler(const wxPropagationDisabler&); wxPropagationDisabler& operator=(const wxPropagationDisabler&);
};





class wxPropagateOnce
{
public:



    wxPropagateOnce(wxEvent& event, wxEvtHandler* handler = __null)
        : m_event(event),
          m_propagatedFromOld(event.m_propagatedFrom)
    {
        do { if ( wxTheAssertHandler && !(m_event.m_propagationLevel > 0) && (wxOnAssert("/usr/local/include/wx-3.0/wx/event.h", 1132, __FUNCTION__, "m_event.m_propagationLevel > 0", "shouldn't be used unless ShouldPropagate()!"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );


        m_event.m_propagationLevel--;
        m_event.m_propagatedFrom = handler;
    }

    ~wxPropagateOnce()
    {
        m_event.m_propagatedFrom = m_propagatedFromOld;
        m_event.m_propagationLevel++;
    }

private:
    wxEvent& m_event;
    wxEvtHandler* const m_propagatedFromOld;

    private: wxPropagateOnce(const wxPropagateOnce&); wxPropagateOnce& operator=(const wxPropagateOnce&);
};



class wxEventProcessInHandlerOnly
{
public:
    wxEventProcessInHandlerOnly(wxEvent& event, wxEvtHandler *handler)
        : m_event(event),
          m_handlerToProcessOnlyInOld(event.m_handlerToProcessOnlyIn)
    {
        m_event.m_handlerToProcessOnlyIn = handler;
    }

    ~wxEventProcessInHandlerOnly()
    {
        m_event.m_handlerToProcessOnlyIn = m_handlerToProcessOnlyInOld;
    }

private:
    wxEvent& m_event;
    wxEvtHandler * const m_handlerToProcessOnlyInOld;

    private: wxEventProcessInHandlerOnly(const wxEventProcessInHandlerOnly&); wxEventProcessInHandlerOnly& operator=(const wxEventProcessInHandlerOnly&);
};


class wxEventBasicPayloadMixin
{
public:
    wxEventBasicPayloadMixin()
        : m_commandInt(0),
          m_extraLong(0)
    {
    }

    void SetString(const wxString& s) { m_cmdString = s; }
    const wxString& GetString() const { return m_cmdString; }

    void SetInt(int i) { m_commandInt = i; }
    int GetInt() const { return m_commandInt; }

    void SetExtraLong(long extraLong) { m_extraLong = extraLong; }
    long GetExtraLong() const { return m_extraLong; }

protected:


    wxString m_cmdString;
    int m_commandInt;
    long m_extraLong;

    private: wxEventBasicPayloadMixin& operator=(const wxEventBasicPayloadMixin&);
};

class wxEventAnyPayloadMixin : public wxEventBasicPayloadMixin
{
public:
    wxEventAnyPayloadMixin() : wxEventBasicPayloadMixin() {}
# 1226 "/usr/local/include/wx-3.0/wx/event.h"
    private: wxEventBasicPayloadMixin& operator=(const wxEventBasicPayloadMixin&);
};
# 1239 "/usr/local/include/wx-3.0/wx/event.h"
enum wxIdleMode
{

    wxIDLE_PROCESS_ALL,



    wxIDLE_PROCESS_SPECIFIED
};

class wxIdleEvent : public wxEvent
{
public:
    wxIdleEvent()
        : wxEvent(0, wxEVT_IDLE),
          m_requestMore(false)
        { }
    wxIdleEvent(const wxIdleEvent& event)
        : wxEvent(event),
          m_requestMore(event.m_requestMore)
    { }

    void RequestMore(bool needMore = true) { m_requestMore = needMore; }
    bool MoreRequested() const { return m_requestMore; }

    virtual wxEvent *Clone() const { return new wxIdleEvent(*this); }




    static void SetMode(wxIdleMode mode) { sm_idleMode = mode; }


    static wxIdleMode GetMode() { return sm_idleMode; }

protected:
    bool m_requestMore;
    static wxIdleMode sm_idleMode;

private:
    private: wxIdleEvent& operator=(const wxIdleEvent&); public: static wxClassInfo ms_classInfo; virtual wxClassInfo *GetClassInfo() const; static wxObject* wxCreateObject();
};




class wxThreadEvent : public wxEvent,
                                       public wxEventAnyPayloadMixin
{
public:
    wxThreadEvent(wxEventType eventType = wxEVT_THREAD, int id = wxID_ANY)
        : wxEvent(id, eventType)
        { }

    wxThreadEvent(const wxThreadEvent& event)
        : wxEvent(event),
          wxEventAnyPayloadMixin(event)
    {


        SetString(GetString().Clone());
    }

    virtual wxEvent *Clone() const
    {
        return new wxThreadEvent(*this);
    }



    virtual wxEventCategory GetEventCategory() const
        { return wxEVT_CATEGORY_THREAD; }

private:
    private: wxThreadEvent& operator=(const wxThreadEvent&); public: static wxClassInfo ms_classInfo; virtual wxClassInfo *GetClassInfo() const; static wxObject* wxCreateObject();
};
# 1326 "/usr/local/include/wx-3.0/wx/event.h"
class wxAsyncMethodCallEvent : public wxEvent
{
public:
    wxAsyncMethodCallEvent(wxObject* object)
        : wxEvent(wxID_ANY, wxEVT_ASYNC_METHOD_CALL)
    {
        SetEventObject(object);
    }

    wxAsyncMethodCallEvent(const wxAsyncMethodCallEvent& other)
        : wxEvent(other)
    {
    }

    virtual void Execute() = 0;
};


template <typename T>
class wxAsyncMethodCallEvent0 : public wxAsyncMethodCallEvent
{
public:
    typedef T ObjectType;
    typedef void (ObjectType::*MethodType)();

    wxAsyncMethodCallEvent0(ObjectType* object,
                            MethodType method)
        : wxAsyncMethodCallEvent(object),
          m_object(object),
          m_method(method)
    {
    }

    wxAsyncMethodCallEvent0(const wxAsyncMethodCallEvent0& other)
        : wxAsyncMethodCallEvent(other),
          m_object(other.m_object),
          m_method(other.m_method)
    {
    }

    virtual wxEvent *Clone() const
    {
        return new wxAsyncMethodCallEvent0(*this);
    }

    virtual void Execute()
    {
        (m_object->*m_method)();
    }

private:
    ObjectType* const m_object;
    const MethodType m_method;
};


template <typename T, typename T1>
class wxAsyncMethodCallEvent1 : public wxAsyncMethodCallEvent
{
public:
    typedef T ObjectType;
    typedef void (ObjectType::*MethodType)(T1 x1);
    typedef typename wxRemoveRef<T1>::type ParamType1;

    wxAsyncMethodCallEvent1(ObjectType* object,
                            MethodType method,
                            const ParamType1& x1)
        : wxAsyncMethodCallEvent(object),
          m_object(object),
          m_method(method),
          m_param1(x1)
    {
    }

    wxAsyncMethodCallEvent1(const wxAsyncMethodCallEvent1& other)
        : wxAsyncMethodCallEvent(other),
          m_object(other.m_object),
          m_method(other.m_method),
          m_param1(other.m_param1)
    {
    }

    virtual wxEvent *Clone() const
    {
        return new wxAsyncMethodCallEvent1(*this);
    }

    virtual void Execute()
    {
        (m_object->*m_method)(m_param1);
    }

private:
    ObjectType* const m_object;
    const MethodType m_method;
    const ParamType1 m_param1;
};


template <typename T, typename T1, typename T2>
class wxAsyncMethodCallEvent2 : public wxAsyncMethodCallEvent
{
public:
    typedef T ObjectType;
    typedef void (ObjectType::*MethodType)(T1 x1, T2 x2);
    typedef typename wxRemoveRef<T1>::type ParamType1;
    typedef typename wxRemoveRef<T2>::type ParamType2;

    wxAsyncMethodCallEvent2(ObjectType* object,
                            MethodType method,
                            const ParamType1& x1,
                            const ParamType2& x2)
        : wxAsyncMethodCallEvent(object),
          m_object(object),
          m_method(method),
          m_param1(x1),
          m_param2(x2)
    {
    }

    wxAsyncMethodCallEvent2(const wxAsyncMethodCallEvent2& other)
        : wxAsyncMethodCallEvent(other),
          m_object(other.m_object),
          m_method(other.m_method),
          m_param1(other.m_param1),
          m_param2(other.m_param2)
    {
    }

    virtual wxEvent *Clone() const
    {
        return new wxAsyncMethodCallEvent2(*this);
    }

    virtual void Execute()
    {
        (m_object->*m_method)(m_param1, m_param2);
    }

private:
    ObjectType* const m_object;
    const MethodType m_method;
    const ParamType1 m_param1;
    const ParamType2 m_param2;
};


template <typename T>
class wxAsyncMethodCallEventFunctor : public wxAsyncMethodCallEvent
{
public:
    typedef T FunctorType;

    wxAsyncMethodCallEventFunctor(wxObject *object, const FunctorType& fn)
        : wxAsyncMethodCallEvent(object),
          m_fn(fn)
    {
    }

    wxAsyncMethodCallEventFunctor(const wxAsyncMethodCallEventFunctor& other)
        : wxAsyncMethodCallEvent(other),
          m_fn(other.m_fn)
    {
    }

    virtual wxEvent *Clone() const
    {
        return new wxAsyncMethodCallEventFunctor(*this);
    }

    virtual void Execute()
    {
        m_fn();
    }

private:
    FunctorType m_fn;
};
# 3147 "/usr/local/include/wx-3.0/wx/event.h"
struct wxEventTableEntryBase
{
    wxEventTableEntryBase(int winid, int idLast,
                          wxEventFunctor* fn, wxObject *data)
        : m_id(winid),
          m_lastId(idLast),
          m_fn(fn),
          m_callbackUserData(data)
    {
        do { if ( wxTheAssertHandler && !(idLast == wxID_ANY || winid <= idLast) && (wxOnAssert("/usr/local/include/wx-3.0/wx/event.h", 3157, __FUNCTION__, "idLast == wxID_ANY || winid <= idLast", "invalid IDs range: lower bound > upper bound"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );

    }

    wxEventTableEntryBase( const wxEventTableEntryBase &entry )
        : m_id( entry.m_id ),
          m_lastId( entry.m_lastId ),
          m_fn( entry.m_fn ),
          m_callbackUserData( entry.m_callbackUserData )
    {






        const_cast<wxEventTableEntryBase&>( entry ).m_fn = __null;
    }

    ~wxEventTableEntryBase()
    {
        delete m_fn;
    }



    int m_id,
        m_lastId;


    wxEventFunctor* m_fn;


    wxObject* m_callbackUserData;

private:
    private: wxEventTableEntryBase& operator=(const wxEventTableEntryBase&);
};


struct wxEventTableEntry : public wxEventTableEntryBase
{
    wxEventTableEntry(const int& evType, int winid, int idLast,
                      wxEventFunctor* fn, wxObject *data)
        : wxEventTableEntryBase(winid, idLast, fn, data),
        m_eventType(evType)
    { }







    const int& m_eventType;

private:
    private: wxEventTableEntry& operator=(const wxEventTableEntry&);
};


struct wxDynamicEventTableEntry : public wxEventTableEntryBase
{
    wxDynamicEventTableEntry(int evType, int winid, int idLast,
                             wxEventFunctor* fn, wxObject *data)
        : wxEventTableEntryBase(winid, idLast, fn, data),
          m_eventType(evType)
    { }




    int m_eventType;

private:
    private: wxDynamicEventTableEntry& operator=(const wxDynamicEventTableEntry&);
};





struct wxEventTable
{
    const wxEventTable *baseTable;
    const wxEventTableEntry *entries;
};





typedef const wxEventTableEntry* _wxArraywxEventTableEntryPointerArray; struct wxAssert_wxEventTableEntryPointerArray { unsigned int TypeTooBigToBeStoredInwxBaseArrayPtrVoid: sizeof(_wxArraywxEventTableEntryPointerArray) <= sizeof(wxBaseArrayPtrVoid::base_type); }; typedef int ( *CMPFUNC_wxArraywxEventTableEntryPointerArray)(_wxArraywxEventTableEntryPointerArray *pItem1, _wxArraywxEventTableEntryPointerArray *pItem2); class wxEventTableEntryPointerArray : public wxBaseArrayPtrVoid { public: wxEventTableEntryPointerArray() { } ~wxEventTableEntryPointerArray() { } _wxArraywxEventTableEntryPointerArray& operator[](size_t uiIndex) const { return (_wxArraywxEventTableEntryPointerArray&)(wxBaseArrayPtrVoid::operator[](uiIndex)); } _wxArraywxEventTableEntryPointerArray& Item(size_t uiIndex) const { return (_wxArraywxEventTableEntryPointerArray&)(wxBaseArrayPtrVoid::operator[](uiIndex)); } _wxArraywxEventTableEntryPointerArray& Last() const { return (_wxArraywxEventTableEntryPointerArray&)(wxBaseArrayPtrVoid::operator[](GetCount() - 1)); } int Index(_wxArraywxEventTableEntryPointerArray lItem, bool bFromEnd = false) const { return wxBaseArrayPtrVoid::Index((base_type)lItem, bFromEnd); } void Add(_wxArraywxEventTableEntryPointerArray lItem, size_t nInsert = 1) { wxBaseArrayPtrVoid::Add((base_type)lItem, nInsert); } void Insert(_wxArraywxEventTableEntryPointerArray lItem, size_t uiIndex, size_t nInsert = 1) { wxBaseArrayPtrVoid::Insert((base_type)lItem, uiIndex, nInsert) ; } void RemoveAt(size_t uiIndex, size_t nRemove = 1) { wxBaseArrayPtrVoid::RemoveAt(uiIndex, nRemove); } void Remove(_wxArraywxEventTableEntryPointerArray lItem) { int iIndex = Index(lItem); if ( iIndex != (-1) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/event.h", 3248, __FUNCTION__, "iIndex != (-1)", "removing inexistent element in wxArray::Remove"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct; wxBaseArrayPtrVoid::RemoveAt((size_t)iIndex); } void Sort(CMPFUNC_wxArraywxEventTableEntryPointerArray fCmp) { wxBaseArrayPtrVoid::Sort((CMPFUNC)fCmp); } private: typedef wxBaseArrayPtrVoid::iterator biterator; typedef wxBaseArrayPtrVoid::const_iterator bconst_iterator; typedef wxBaseArrayPtrVoid::value_type bvalue_type; typedef wxBaseArrayPtrVoid::const_reference bconst_reference; public: typedef _wxArraywxEventTableEntryPointerArray value_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef wxBaseArrayPtrVoid::difference_type difference_type; typedef wxBaseArrayPtrVoid::size_type size_type; class reverse_iterator { typedef _wxArraywxEventTableEntryPointerArray value_type; typedef value_type& reference; typedef value_type* pointer; typedef reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; reverse_iterator() : m_ptr(__null) { } reverse_iterator(pointer ptr) : m_ptr(ptr) { } reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { reverse_iterator tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; class const_reverse_iterator { typedef _wxArraywxEventTableEntryPointerArray value_type; typedef const value_type& reference; typedef const value_type* pointer; typedef const_reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; const_reverse_iterator() : m_ptr(__null) { } const_reverse_iterator(pointer ptr) : m_ptr(ptr) { } const_reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { itor tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; wxEventTableEntryPointerArray(size_type n) { assign(n, value_type()); } wxEventTableEntryPointerArray(size_type n, const_reference v) { assign(n, v); } wxEventTableEntryPointerArray(const_iterator first, const_iterator last) { assign(first, last); } void assign(const_iterator first, const_iterator last) { wxBaseArrayPtrVoid::assign((bconst_iterator)first, (bconst_iterator)last); } void assign(size_type n, const_reference v) { wxBaseArrayPtrVoid::assign(n, (bconst_reference)v); } reference back() { return *(end() - 1); } const_reference back() const { return *(end() - 1); } iterator begin() { return (iterator)wxBaseArrayPtrVoid::begin(); } const_iterator begin() const { return (const_iterator)wxBaseArrayPtrVoid::begin(); } size_type capacity() const { return wxBaseArrayPtrVoid::capacity(); } iterator end() { return (iterator)wxBaseArrayPtrVoid::end(); } const_iterator end() const { return (const_iterator)wxBaseArrayPtrVoid::end(); } iterator erase(iterator first, iterator last) { return (iterator)wxBaseArrayPtrVoid::erase((biterator)first, (biterator)last); } iterator erase(iterator it) { return (iterator)wxBaseArrayPtrVoid::erase((biterator)it); } reference front() { return *begin(); } const_reference front() const { return *begin(); } void insert(iterator it, size_type n, const_reference v) { wxBaseArrayPtrVoid::insert((biterator)it, n, (bconst_reference)v); } iterator insert(iterator it, const_reference v = value_type()) { return (iterator)wxBaseArrayPtrVoid::insert((biterator)it, (bconst_reference)v); } void insert(iterator it, const_iterator first, const_iterator last) { wxBaseArrayPtrVoid::insert((biterator)it, (bconst_iterator)first, (bconst_iterator)last); } void pop_back() { wxBaseArrayPtrVoid::pop_back(); } void push_back(const_reference v) { wxBaseArrayPtrVoid::push_back((bconst_reference)v); } reverse_iterator rbegin() { return reverse_iterator(end() - 1); } const_reverse_iterator rbegin() const; reverse_iterator rend() { return reverse_iterator(begin() - 1); } const_reverse_iterator rend() const; void reserve(size_type n) { wxBaseArrayPtrVoid::reserve(n); } void resize(size_type n, value_type v = value_type()) { wxBaseArrayPtrVoid::resize(n, v); } void swap(wxEventTableEntryPointerArray& other) { wxBaseArrayPtrVoid::swap(other); } };

class wxEventHashTable
{
private:

    struct EventTypeTable
    {
        wxEventType eventType;
        wxEventTableEntryPointerArray eventEntryTable;
    };
    typedef EventTypeTable* EventTypeTablePointer;

public:




    wxEventHashTable(const wxEventTable &table);

    ~wxEventHashTable();



    bool HandleEvent(wxEvent& event, wxEvtHandler *self);


    void Clear();







protected:

    void InitHashTable();

    void AddEntry(const wxEventTableEntry &entry);

    void AllocEventTypeTable(size_t size);


    void GrowEventTypeTable();

protected:
    const wxEventTable &m_table;
    bool m_rebuildHash;

    size_t m_size;
    EventTypeTablePointer *m_eventTypeTable;

    static wxEventHashTable* sm_first;
    wxEventHashTable* m_previous;
    wxEventHashTable* m_next;

    private: wxEventHashTable(const wxEventHashTable&); wxEventHashTable& operator=(const wxEventHashTable&);
};





class wxEvtHandler : public wxObject
                                    , public wxTrackable
{
public:
    wxEvtHandler();
    virtual ~wxEvtHandler();





    wxEvtHandler *GetNextHandler() const { return m_nextHandler; }
    wxEvtHandler *GetPreviousHandler() const { return m_previousHandler; }
    virtual void SetNextHandler(wxEvtHandler *handler) { m_nextHandler = handler; }
    virtual void SetPreviousHandler(wxEvtHandler *handler) { m_previousHandler = handler; }

    void SetEvtHandlerEnabled(bool enabled) { m_enabled = enabled; }
    bool GetEvtHandlerEnabled() const { return m_enabled; }

    void Unlink();
    bool IsUnlinked() const;
# 3343 "/usr/local/include/wx-3.0/wx/event.h"
    static void AddFilter(wxEventFilter* filter);


    static void RemoveFilter(wxEventFilter* filter);
# 3355 "/usr/local/include/wx-3.0/wx/event.h"
    virtual bool ProcessEvent(wxEvent& event);





    bool SafelyProcessEvent(wxEvent& event);
# 3376 "/usr/local/include/wx-3.0/wx/event.h"
    bool ProcessEventLocally(wxEvent& event);






    virtual void QueueEvent(wxEvent *event);



    virtual void AddPendingEvent(const wxEvent& event)
    {






        QueueEvent(event.Clone());
    }

    void ProcessPendingEvents();


    void DeletePendingEvents();
# 3417 "/usr/local/include/wx-3.0/wx/event.h"
    template <typename T>
    void CallAfter(void (T::*method)())
    {
        QueueEvent(
            new wxAsyncMethodCallEvent0<T>(static_cast<T*>(this), method)
        );
    }





    template <typename T, typename T1, typename P1>
    void CallAfter(void (T::*method)(T1 x1), P1 x1)
    {
        QueueEvent(
            new wxAsyncMethodCallEvent1<T, T1>(
                static_cast<T*>(this), method, x1)
        );
    }

    template <typename T, typename T1, typename T2, typename P1, typename P2>
    void CallAfter(void (T::*method)(T1 x1, T2 x2), P1 x1, P2 x2)
    {
        QueueEvent(
            new wxAsyncMethodCallEvent2<T, T1, T2>(
                static_cast<T*>(this), method, x1, x2)
        );
    }

    template <typename T>
    void CallAfter(const T& fn)
    {
        QueueEvent(new wxAsyncMethodCallEventFunctor<T>(this, fn));
    }
# 3469 "/usr/local/include/wx-3.0/wx/event.h"
    void Connect(int winid,
                 int lastId,
                 wxEventType eventType,
                 wxObjectEventFunction func,
                 wxObject *userData = __null,
                 wxEvtHandler *eventSink = __null)
    {
        DoBind(winid, lastId, eventType,
                  wxNewEventFunctor(eventType, func, eventSink),
                  userData);
    }


    void Connect(int winid,
                 wxEventType eventType,
                 wxObjectEventFunction func,
                 wxObject *userData = __null,
                 wxEvtHandler *eventSink = __null)
        { Connect(winid, wxID_ANY, eventType, func, userData, eventSink); }


    void Connect(wxEventType eventType,
                 wxObjectEventFunction func,
                 wxObject *userData = __null,
                 wxEvtHandler *eventSink = __null)
        { Connect(wxID_ANY, wxID_ANY, eventType, func, userData, eventSink); }

    bool Disconnect(int winid,
                    int lastId,
                    wxEventType eventType,
                    wxObjectEventFunction func = __null,
                    wxObject *userData = __null,
                    wxEvtHandler *eventSink = __null)
    {
        return DoUnbind(winid, lastId, eventType,
                            wxMakeEventFunctor(eventType, func, eventSink),
                            userData );
    }

    bool Disconnect(int winid = wxID_ANY,
                    wxEventType eventType = wxEVT_NULL,
                    wxObjectEventFunction func = __null,
                    wxObject *userData = __null,
                    wxEvtHandler *eventSink = __null)
        { return Disconnect(winid, wxID_ANY, eventType, func, userData, eventSink); }

    bool Disconnect(wxEventType eventType,
                    wxObjectEventFunction func,
                    wxObject *userData = __null,
                    wxEvtHandler *eventSink = __null)
        { return Disconnect(wxID_ANY, eventType, func, userData, eventSink); }



    template <typename EventTag, typename EventArg>
    void Bind(const EventTag& eventType,
              void (*function)(EventArg &),
              int winid = wxID_ANY,
              int lastId = wxID_ANY,
              wxObject *userData = __null)
    {
        DoBind(winid, lastId, eventType,
                  wxNewEventFunctor(eventType, function),
                  userData);
    }


    template <typename EventTag, typename EventArg>
    bool Unbind(const EventTag& eventType,
                void (*function)(EventArg &),
                int winid = wxID_ANY,
                int lastId = wxID_ANY,
                wxObject *userData = __null)
    {
        return DoUnbind(winid, lastId, eventType,
                            wxMakeEventFunctor(eventType, function),
                            userData);
    }


    template <typename EventTag, typename Functor>
    void Bind(const EventTag& eventType,
              const Functor &functor,
              int winid = wxID_ANY,
              int lastId = wxID_ANY,
              wxObject *userData = __null)
    {
        DoBind(winid, lastId, eventType,
                  wxNewEventFunctor(eventType, functor),
                  userData);
    }


    template <typename EventTag, typename Functor>
    bool Unbind(const EventTag& eventType,
                const Functor &functor,
                int winid = wxID_ANY,
                int lastId = wxID_ANY,
                wxObject *userData = __null)
    {
        return DoUnbind(winid, lastId, eventType,
                            wxMakeEventFunctor(eventType, functor),
                            userData);
    }





    template <typename EventTag, typename Class, typename EventArg, typename EventHandler>
    void Bind(const EventTag &eventType,
              void (Class::*method)(EventArg &),
              EventHandler *handler,
              int winid = wxID_ANY,
              int lastId = wxID_ANY,
              wxObject *userData = __null)
    {
        DoBind(winid, lastId, eventType,
                  wxNewEventFunctor(eventType, method, handler),
                  userData);
    }

    template <typename EventTag, typename Class, typename EventArg, typename EventHandler>
    bool Unbind(const EventTag &eventType,
                void (Class::*method)(EventArg&),
                EventHandler *handler,
                int winid = wxID_ANY,
                int lastId = wxID_ANY,
                wxObject *userData = __null )
    {
        return DoUnbind(winid, lastId, eventType,
                            wxMakeEventFunctor(eventType, method, handler),
                            userData);
    }


    wxList* GetDynamicEventTable() const { return m_dynamicEvents ; }


    void SetClientObject( wxClientData *data ) { DoSetClientObject(data); }
    wxClientData *GetClientObject() const { return DoGetClientObject(); }

    void SetClientData( void *data ) { DoSetClientData(data); }
    void *GetClientData() const { return DoGetClientData(); }
# 3624 "/usr/local/include/wx-3.0/wx/event.h"
    static bool ProcessEventIfMatchesId(const wxEventTableEntryBase& tableEntry,
                                        wxEvtHandler *handler,
                                        wxEvent& event);

    virtual bool SearchEventTable(wxEventTable& table, wxEvent& event);
    bool SearchDynamicEventTable( wxEvent& event );


    void ClearEventHashTable() { GetEventHashTable().Clear(); }
    void OnSinkDestroyed( wxEvtHandler *sink );


private:
    void DoBind(int winid,
                   int lastId,
                   wxEventType eventType,
                   wxEventFunctor *func,
                   wxObject* userData = __null);

    bool DoUnbind(int winid,
                      int lastId,
                      wxEventType eventType,
                      const wxEventFunctor& func,
                      wxObject *userData = __null);

    static const wxEventTableEntry sm_eventTableEntries[];

protected:






    virtual bool TryBefore(wxEvent& event);






    bool TryHereOnly(wxEvent& event);



    bool TryBeforeAndHere(wxEvent& event)
    {
        return TryBefore(event) || TryHereOnly(event);
    }





    virtual bool TryAfter(wxEvent& event);
# 3690 "/usr/local/include/wx-3.0/wx/event.h"
    static const wxEventTable sm_eventTable;
    virtual const wxEventTable *GetEventTable() const;

    static wxEventHashTable sm_eventHashTable;
    virtual wxEventHashTable& GetEventHashTable() const;

    wxEvtHandler* m_nextHandler;
    wxEvtHandler* m_previousHandler;
    wxList* m_dynamicEvents;
    wxList* m_pendingEvents;







    bool m_enabled;







    union
    {
        wxClientData *m_clientObject;
        void *m_clientData;
    };


    wxClientDataType m_clientDataType;


    virtual void DoSetClientObject( wxClientData *data );
    virtual wxClientData *DoGetClientObject() const;

    virtual void DoSetClientData( void *data );
    virtual void *DoGetClientData() const;


    wxEventConnectionRef *FindRefInTrackerList(wxEvtHandler *handler);

private:

    bool DoTryApp(wxEvent& event);


    bool DoTryChain(wxEvent& event);


    static wxEventFilter* ms_filterList;

    private: wxEvtHandler(const wxEvtHandler&); wxEvtHandler& operator=(const wxEvtHandler&); public: static wxClassInfo ms_classInfo; virtual wxClassInfo *GetClassInfo() const; static wxObject* wxCreateObject();
};

typedef wxEvtHandler * _wxArraywxEvtHandlerArray; struct wxAssert_wxEvtHandlerArray { unsigned int TypeTooBigToBeStoredInwxBaseArrayPtrVoid: sizeof(_wxArraywxEvtHandlerArray) <= sizeof(wxBaseArrayPtrVoid::base_type); }; typedef int ( *CMPFUNC_wxArraywxEvtHandlerArray)(_wxArraywxEvtHandlerArray *pItem1, _wxArraywxEvtHandlerArray *pItem2); class wxEvtHandlerArray : public wxBaseArrayPtrVoid { public: wxEvtHandlerArray() { } ~wxEvtHandlerArray() { } _wxArraywxEvtHandlerArray& operator[](size_t uiIndex) const { return (_wxArraywxEvtHandlerArray&)(wxBaseArrayPtrVoid::operator[](uiIndex)); } _wxArraywxEvtHandlerArray& Item(size_t uiIndex) const { return (_wxArraywxEvtHandlerArray&)(wxBaseArrayPtrVoid::operator[](uiIndex)); } _wxArraywxEvtHandlerArray& Last() const { return (_wxArraywxEvtHandlerArray&)(wxBaseArrayPtrVoid::operator[](GetCount() - 1)); } int Index(_wxArraywxEvtHandlerArray lItem, bool bFromEnd = false) const { return wxBaseArrayPtrVoid::Index((base_type)lItem, bFromEnd); } void Add(_wxArraywxEvtHandlerArray lItem, size_t nInsert = 1) { wxBaseArrayPtrVoid::Add((base_type)lItem, nInsert); } void Insert(_wxArraywxEvtHandlerArray lItem, size_t uiIndex, size_t nInsert = 1) { wxBaseArrayPtrVoid::Insert((base_type)lItem, uiIndex, nInsert) ; } void RemoveAt(size_t uiIndex, size_t nRemove = 1) { wxBaseArrayPtrVoid::RemoveAt(uiIndex, nRemove); } void Remove(_wxArraywxEvtHandlerArray lItem) { int iIndex = Index(lItem); if ( iIndex != (-1) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/event.h", 3747, __FUNCTION__, "iIndex != (-1)", "removing inexistent element in wxArray::Remove"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct; wxBaseArrayPtrVoid::RemoveAt((size_t)iIndex); } void Sort(CMPFUNC_wxArraywxEvtHandlerArray fCmp) { wxBaseArrayPtrVoid::Sort((CMPFUNC)fCmp); } private: typedef wxBaseArrayPtrVoid::iterator biterator; typedef wxBaseArrayPtrVoid::const_iterator bconst_iterator; typedef wxBaseArrayPtrVoid::value_type bvalue_type; typedef wxBaseArrayPtrVoid::const_reference bconst_reference; public: typedef _wxArraywxEvtHandlerArray value_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef wxBaseArrayPtrVoid::difference_type difference_type; typedef wxBaseArrayPtrVoid::size_type size_type; class reverse_iterator { typedef _wxArraywxEvtHandlerArray value_type; typedef value_type& reference; typedef value_type* pointer; typedef reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; reverse_iterator() : m_ptr(__null) { } reverse_iterator(pointer ptr) : m_ptr(ptr) { } reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { reverse_iterator tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; class const_reverse_iterator { typedef _wxArraywxEvtHandlerArray value_type; typedef const value_type& reference; typedef const value_type* pointer; typedef const_reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; const_reverse_iterator() : m_ptr(__null) { } const_reverse_iterator(pointer ptr) : m_ptr(ptr) { } const_reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { itor tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; wxEvtHandlerArray(size_type n) { assign(n, value_type()); } wxEvtHandlerArray(size_type n, const_reference v) { assign(n, v); } wxEvtHandlerArray(const_iterator first, const_iterator last) { assign(first, last); } void assign(const_iterator first, const_iterator last) { wxBaseArrayPtrVoid::assign((bconst_iterator)first, (bconst_iterator)last); } void assign(size_type n, const_reference v) { wxBaseArrayPtrVoid::assign(n, (bconst_reference)v); } reference back() { return *(end() - 1); } const_reference back() const { return *(end() - 1); } iterator begin() { return (iterator)wxBaseArrayPtrVoid::begin(); } const_iterator begin() const { return (const_iterator)wxBaseArrayPtrVoid::begin(); } size_type capacity() const { return wxBaseArrayPtrVoid::capacity(); } iterator end() { return (iterator)wxBaseArrayPtrVoid::end(); } const_iterator end() const { return (const_iterator)wxBaseArrayPtrVoid::end(); } iterator erase(iterator first, iterator last) { return (iterator)wxBaseArrayPtrVoid::erase((biterator)first, (biterator)last); } iterator erase(iterator it) { return (iterator)wxBaseArrayPtrVoid::erase((biterator)it); } reference front() { return *begin(); } const_reference front() const { return *begin(); } void insert(iterator it, size_type n, const_reference v) { wxBaseArrayPtrVoid::insert((biterator)it, n, (bconst_reference)v); } iterator insert(iterator it, const_reference v = value_type()) { return (iterator)wxBaseArrayPtrVoid::insert((biterator)it, (bconst_reference)v); } void insert(iterator it, const_iterator first, const_iterator last) { wxBaseArrayPtrVoid::insert((biterator)it, (bconst_iterator)first, (bconst_iterator)last); } void pop_back() { wxBaseArrayPtrVoid::pop_back(); } void push_back(const_reference v) { wxBaseArrayPtrVoid::push_back((bconst_reference)v); } reverse_iterator rbegin() { return reverse_iterator(end() - 1); } const_reverse_iterator rbegin() const; reverse_iterator rend() { return reverse_iterator(begin() - 1); } const_reverse_iterator rend() const; void reserve(size_type n) { wxBaseArrayPtrVoid::reserve(n); } void resize(size_type n, value_type v = value_type()) { wxBaseArrayPtrVoid::resize(n, v); } void swap(wxEvtHandlerArray& other) { wxBaseArrayPtrVoid::swap(other); } };





inline void wxObjectEventFunctor::operator()(wxEvtHandler *handler, wxEvent& event)
{
    wxEvtHandler * const realHandler = m_handler ? m_handler : handler;

    (realHandler->*m_method)(event);
}
# 3767 "/usr/local/include/wx-3.0/wx/event.h"
class wxEventConnectionRef : public wxTrackerNode
{
public:
    wxEventConnectionRef() : m_src(__null), m_sink(__null), m_refCount(0) { }
    wxEventConnectionRef(wxEvtHandler *src, wxEvtHandler *sink)
        : m_src(src), m_sink(sink), m_refCount(1)
    {
        m_sink->AddNode(this);
    }


    virtual void OnObjectDestroy( )
    {
        if ( m_src )
            m_src->OnSinkDestroyed( m_sink );
        delete this;
    }

    virtual wxEventConnectionRef *ToEventConnection() { return this; }

    void IncRef() { m_refCount++; }
    void DecRef()
    {
        if ( !--m_refCount )
        {

            if ( m_sink )
                m_sink->RemoveNode(this);
            delete this;
        }
    }

private:
    wxEvtHandler *m_src,
                 *m_sink;
    int m_refCount;

    friend class wxEvtHandler;

    private: wxEventConnectionRef& operator=(const wxEventConnectionRef&);
};





inline void wxPostEvent(wxEvtHandler *dest, const wxEvent& event)
{
    if ( dest ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/event.h", 3815, __FUNCTION__, "dest", "need an object to post event to"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct;

    dest->AddPendingEvent(event);
}




inline void wxQueueEvent(wxEvtHandler *dest, wxEvent *event)
{
    if ( dest ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/event.h", 3825, __FUNCTION__, "dest", "need an object to queue event for"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct;

    dest->QueueEvent(event);
}

typedef void (wxEvtHandler::*wxEventFunction)(wxEvent&);
typedef void (wxEvtHandler::*wxIdleEventFunction)(wxIdleEvent&);
typedef void (wxEvtHandler::*wxThreadEventFunction)(wxThreadEvent&);
# 25 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 1 "/usr/local/include/wx-3.0/wx/app.h" 1
# 20 "/usr/local/include/wx-3.0/wx/app.h"
# 1 "/usr/local/include/wx-3.0/wx/eventfilter.h" 1
# 15 "/usr/local/include/wx-3.0/wx/eventfilter.h"
class wxEvent;
class wxEvtHandler;





class wxEventFilter
{
public:




    enum
    {

        Event_Skip = -1,


        Event_Ignore = 0,


        Event_Processed = 1
    };

    wxEventFilter()
    {
        m_next = __null;
    }

    virtual ~wxEventFilter()
    {
        do { if ( wxTheAssertHandler && !(!m_next) && (wxOnAssert("/usr/local/include/wx-3.0/wx/eventfilter.h", 48, __FUNCTION__, "!m_next", "Forgot to call wxEvtHandler::RemoveFilter()?"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );
    }
# 58 "/usr/local/include/wx-3.0/wx/eventfilter.h"
    virtual int FilterEvent(wxEvent& event) = 0;

private:


    wxEventFilter* m_next;


    friend class wxEvtHandler;

    private: wxEventFilter(const wxEventFilter&); wxEventFilter& operator=(const wxEventFilter&);
};
# 21 "/usr/local/include/wx-3.0/wx/app.h" 2
# 1 "/usr/local/include/wx-3.0/wx/build.h" 1
# 22 "/usr/local/include/wx-3.0/wx/app.h" 2
# 1 "/usr/local/include/wx-3.0/wx/cmdargs.h" 1
# 23 "/usr/local/include/wx-3.0/wx/app.h" 2
# 1 "/usr/local/include/wx-3.0/wx/init.h" 1
# 29 "/usr/local/include/wx-3.0/wx/init.h"
extern bool wxEntryStart(int& argc, wxChar **argv);



extern void wxEntryCleanup();
# 45 "/usr/local/include/wx-3.0/wx/init.h"
extern int wxEntry(int& argc, wxChar **argv);
# 69 "/usr/local/include/wx-3.0/wx/init.h"
extern bool wxInitialize();
extern bool wxInitialize(int argc, wxChar **argv);






extern void wxUninitialize();



class wxInitializer
{
public:

    wxInitializer()
    {
        m_ok = wxInitialize();
    }

    wxInitializer(int argc, wxChar **argv)
    {
        m_ok = wxInitialize(argc, argv);
    }
# 103 "/usr/local/include/wx-3.0/wx/init.h"
    bool IsOk() const { return m_ok; }


    operator bool() const { return m_ok; }


    ~wxInitializer() { if ( m_ok ) wxUninitialize(); }

private:
    bool m_ok;
};
# 24 "/usr/local/include/wx-3.0/wx/app.h" 2



class wxAppConsole;
class wxAppTraits;
class wxCmdLineParser;
class wxEventLoopBase;
class wxMessageOutput;
# 48 "/usr/local/include/wx-3.0/wx/app.h"
typedef wxAppConsole* (*wxAppInitializerFunction)();





enum
{
    wxPRINT_WINDOWS = 1,
    wxPRINT_POSTSCRIPT = 2
};
# 67 "/usr/local/include/wx-3.0/wx/app.h"
extern wxList wxPendingDelete;





class wxAppConsoleBase : public wxEvtHandler,
                                          public wxEventFilter
{
public:

    wxAppConsoleBase();
    virtual ~wxAppConsoleBase();
# 90 "/usr/local/include/wx-3.0/wx/app.h"
    virtual bool Initialize(int& argc, wxChar **argv);


    virtual bool CallOnInit() { return OnInit(); }





    virtual bool OnInit();



    virtual int OnRun();


    virtual void OnLaunched();






    virtual void OnEventLoopEnter(wxEventLoopBase* ) {}



    virtual int OnExit();



    virtual void OnEventLoopExit(wxEventLoopBase* ) {}




    virtual void CleanUp();







    virtual void OnFatalException() { }


    virtual void Exit();
# 148 "/usr/local/include/wx-3.0/wx/app.h"
    wxString GetAppName() const;
    void SetAppName(const wxString& name) { m_appName = name; }
# 158 "/usr/local/include/wx-3.0/wx/app.h"
    wxString GetAppDisplayName() const;

    void SetAppDisplayName(const wxString& name) { m_appDisplayName = name; }


    wxString GetClassName() const { return m_className; }
    void SetClassName(const wxString& name) { m_className = name; }


    const wxString& GetVendorName() const { return m_vendorName; }
    void SetVendorName(const wxString& name) { m_vendorName = name; }




    const wxString& GetVendorDisplayName() const
    {
        return m_vendorDisplayName.empty() ? GetVendorName()
                                           : m_vendorDisplayName;
    }
    void SetVendorDisplayName(const wxString& name)
    {
        m_vendorDisplayName = name;
    }
# 223 "/usr/local/include/wx-3.0/wx/app.h"
    wxAppTraits *GetTraits();







    static wxAppTraits *GetTraitsIfExists();







    static wxAppTraits& GetValidTraits();






    wxEventLoopBase* GetMainLoop() const
        { return m_mainLoop; }
# 259 "/usr/local/include/wx-3.0/wx/app.h"
    virtual void SetCLocale();







    virtual int FilterEvent(wxEvent& event);



    static bool IsMainLoopRunning();
# 321 "/usr/local/include/wx-3.0/wx/app.h"
    virtual void ProcessPendingEvents();


    bool HasPendingEvents() const;


    void SuspendProcessingOfPendingEvents();



    void ResumeProcessingOfPendingEvents();



    void RemovePendingEventHandler(wxEvtHandler* toRemove);


    void AppendPendingEventHandler(wxEvtHandler* toAppend);



    void DelayPendingEventHandler(wxEvtHandler* toDelay);


    void DeletePendingEvents();
# 361 "/usr/local/include/wx-3.0/wx/app.h"
    void ScheduleForDestruction(wxObject *object);


    bool IsScheduledForDestruction(wxObject *object) const;







    virtual bool Pending();
    virtual bool Dispatch();

    virtual int MainLoop();
    virtual void ExitMainLoop();

    bool Yield(bool onlyIfNeeded = false);

    virtual void WakeUpIdle();







    virtual bool ProcessIdle();





    virtual bool UsesEventLoop() const;
# 407 "/usr/local/include/wx-3.0/wx/app.h"
    virtual void OnAssertFailure(const wxChar *file,
                                 int line,
                                 const wxChar *func,
                                 const wxChar *cond,
                                 const wxChar *msg);



    virtual void OnAssert(const wxChar *file,
                          int line,
                          const wxChar *cond,
                          const wxChar *msg);




    static bool CheckBuildOptions(const char *optionsSignature,
                                  const char *componentName);





    static void SetInitializerFunction(wxAppInitializerFunction fn)
        { ms_appInitFn = fn; }
    static wxAppInitializerFunction GetInitializerFunction()
        { return ms_appInitFn; }





    static wxAppConsole *GetInstance() { return ms_appInstance; }
    static void SetInstance(wxAppConsole *app) { ms_appInstance = app; }



    int argc;
# 453 "/usr/local/include/wx-3.0/wx/app.h"
    char **argv;


protected:



    void DeletePendingObjects();



    virtual wxAppTraits *CreateTraits();


    static wxAppInitializerFunction ms_appInitFn;


    static wxAppConsole *ms_appInstance;



    wxEventLoopBase *CreateMainLoop();


    wxString m_vendorName,
             m_vendorDisplayName,
             m_appName,
             m_appDisplayName,
             m_className;



    wxAppTraits *m_traits;



    wxEventLoopBase *m_mainLoop;






    wxEvtHandlerArray m_handlersWithPendingEvents;





    wxEvtHandlerArray m_handlersWithPendingDelayedEvents;







    bool m_bDoPendingEventProcessing;

    friend class wxEvtHandler;



    private: wxAppConsoleBase(const wxAppConsoleBase&); wxAppConsoleBase& operator=(const wxAppConsoleBase&);
};



# 1 "/usr/local/include/wx-3.0/wx/unix/app.h" 1
# 11 "/usr/local/include/wx-3.0/wx/unix/app.h"
# 1 "/usr/include/signal.h" 1 3 4
# 66 "/usr/include/signal.h" 3 4
# 1 "/usr/include/sys/_pthread/_pthread_t.h" 1 3 4
# 31 "/usr/include/sys/_pthread/_pthread_t.h" 3 4
typedef __darwin_pthread_t pthread_t;
# 67 "/usr/include/signal.h" 2 3 4


extern const char *const sys_signame[32];
extern const char *const sys_siglist[32];


extern "C" {
int raise(int);
}


extern "C" {
void (* _Nullable bsd_signal(int, void (* _Nullable)(int)))(int);
int kill(pid_t, int) __asm("_" "kill" );
int killpg(pid_t, int) __asm("_" "killpg" );
int pthread_kill(pthread_t, int);
int pthread_sigmask(int, const sigset_t *, sigset_t *) __asm("_" "pthread_sigmask" );
int sigaction(int, const struct sigaction * ,
     struct sigaction * );
int sigaddset(sigset_t *, int);
int sigaltstack(const stack_t * , stack_t * ) __asm("_" "sigaltstack" ) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int sigdelset(sigset_t *, int);
int sigemptyset(sigset_t *);
int sigfillset(sigset_t *);
int sighold(int);
int sigignore(int);
int siginterrupt(int, int);
int sigismember(const sigset_t *, int);
int sigpause(int) __asm("_" "sigpause" );
int sigpending(sigset_t *);
int sigprocmask(int, const sigset_t * , sigset_t * );
int sigrelse(int);
void (* _Nullable sigset(int, void (* _Nullable)(int)))(int);
int sigsuspend(const sigset_t *) __asm("_" "sigsuspend" );
int sigwait(const sigset_t * , int * ) __asm("_" "sigwait" );

void psignal(unsigned int, const char *);
int sigblock(int);
int sigsetmask(int);
int sigvec(int, struct sigvec *, struct sigvec *);

}




inline __attribute__ ((__always_inline__)) int
__sigbits(int __signo)
{
    return __signo > 32 ? 0 : (1 << (__signo - 1));
}
# 12 "/usr/local/include/wx-3.0/wx/unix/app.h" 2

class wxFDIODispatcher;
class wxFDIOHandler;
class wxWakeUpPipe;


class wxAppConsole : public wxAppConsoleBase
{
public:
    wxAppConsole();
    virtual ~wxAppConsole();


    virtual bool Initialize(int& argc, wxChar** argv);
# 35 "/usr/local/include/wx-3.0/wx/unix/app.h"
    typedef void (*SignalHandler)(int);





    bool SetSignalHandler(int signal, SignalHandler handler);



    void CheckSignal();







    wxFDIOHandler* RegisterSignalWakeUpPipe(wxFDIODispatcher& dispatcher);

private:



    static void HandleSignal(int signal);




    sigset_t m_signalsCaught;


    class SignalHandlerHash_wxImplementation_Pair { public: typedef int first_type; typedef SignalHandler second_type; typedef int t1; typedef SignalHandler t2; typedef const int const_t1; typedef const SignalHandler const_t2; SignalHandlerHash_wxImplementation_Pair(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; class SignalHandlerHash_wxImplementation_KeyEx { typedef int key_type; typedef SignalHandlerHash_wxImplementation_Pair pair_type; typedef const key_type const_key_type; typedef const pair_type const_pair_type; typedef const_key_type& const_key_reference; typedef const_pair_type& const_pair_reference; public: SignalHandlerHash_wxImplementation_KeyEx() { } const_key_reference operator()( const_pair_reference pair ) const { return pair.first; } SignalHandlerHash_wxImplementation_KeyEx& operator=(const SignalHandlerHash_wxImplementation_KeyEx&) { return *this; } }; class SignalHandlerHash_wxImplementation_HashTable : protected _wxHashTableBase2 { public: typedef int key_type; typedef SignalHandlerHash_wxImplementation_Pair value_type; typedef wxIntegerHash hasher; typedef wxIntegerEqual key_equal; typedef size_t size_type; typedef ptrdiff_t difference_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type& reference; typedef const value_type& const_reference; typedef const int const_key_type; typedef const SignalHandlerHash_wxImplementation_Pair const_mapped_type; public: typedef SignalHandlerHash_wxImplementation_KeyEx key_extractor; typedef SignalHandlerHash_wxImplementation_HashTable Self; protected: _wxHashTable_NodeBase** m_table; size_t m_tableBuckets; size_t m_items; hasher m_hasher; key_equal m_equals; key_extractor m_getKey; public: struct Node:public _wxHashTable_NodeBase { public: Node( const value_type& value ) : m_value( value ) {} Node* next() { return static_cast<Node*>(m_next); } value_type m_value; }; protected: static void DeleteNode( _wxHashTable_NodeBase* node ) { delete static_cast<Node*>(node); } public: class Iterator { public: Node* m_node; Self* m_ht; Iterator() : m_node(__null), m_ht(__null) {} Iterator( Node* node, const Self* ht ) : m_node(node), m_ht(const_cast<Self*>(ht)) {} bool operator ==( const Iterator& it ) const { return m_node == it.m_node; } bool operator !=( const Iterator& it ) const { return m_node != it.m_node; } protected: Node* GetNextNode() { size_type bucket = GetBucketForNode(m_ht,m_node); for( size_type i = bucket + 1; i < m_ht->m_tableBuckets; ++i ) { if( m_ht->m_table[i] ) return static_cast<Node*>(m_ht->m_table[i]); } return __null; } void PlusPlus() { Node* next = m_node->next(); m_node = next ? next : GetNextNode(); } }; friend class Iterator; public: class iterator : public Iterator { public: iterator() : Iterator() {} iterator( Node* node, Self* ht ) : Iterator( node, ht ) {} iterator& operator++() { PlusPlus(); return *this; } iterator operator++(int) { iterator it=*this;PlusPlus();return it; } reference operator *() const { return m_node->m_value; } pointer operator ->() const { return &(m_node->m_value); } }; class const_iterator : public Iterator { public: const_iterator() : Iterator() {} const_iterator(iterator i) : Iterator(i) {} const_iterator( Node* node, const Self* ht ) : Iterator(node, const_cast<Self*>(ht)) {} const_iterator& operator++() { PlusPlus();return *this; } const_iterator operator++(int) { const_iterator it=*this;PlusPlus();return it; } const_reference operator *() const { return m_node->m_value; } const_pointer operator ->() const { return &(m_node->m_value); } }; SignalHandlerHash_wxImplementation_HashTable( size_type sz = 10, const hasher& hfun = hasher(), const key_equal& k_eq = key_equal(), const key_extractor& k_ex = key_extractor() ) : m_tableBuckets( GetNextPrime( (unsigned long) sz ) ), m_items( 0 ), m_hasher( hfun ), m_equals( k_eq ), m_getKey( k_ex ) { m_table = (_wxHashTable_NodeBase**)AllocTable(m_tableBuckets); } SignalHandlerHash_wxImplementation_HashTable( const Self& ht ) : m_table(__null), m_tableBuckets( 0 ), m_items( ht.m_items ), m_hasher( ht.m_hasher ), m_equals( ht.m_equals ), m_getKey( ht.m_getKey ) { HashCopy( ht ); } const Self& operator=( const Self& ht ) { if (&ht != this) { clear(); m_hasher = ht.m_hasher; m_equals = ht.m_equals; m_getKey = ht.m_getKey; m_items = ht.m_items; HashCopy( ht ); } return *this; } ~SignalHandlerHash_wxImplementation_HashTable() { clear(); FreeTable(m_table); } hasher hash_funct() { return m_hasher; } key_equal key_eq() { return m_equals; } void clear() { DeleteNodes(m_tableBuckets, m_table, DeleteNode); m_items = 0; } size_type size() const { return m_items; } size_type max_size() const { return size_type(-1); } bool empty() const { return size() == 0; } const_iterator end() const { return const_iterator(__null, this); } iterator end() { return iterator(__null, this); } const_iterator begin() const { return const_iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } iterator begin() { return iterator(static_cast<Node*>(GetFirstNode(m_tableBuckets, m_table)), this); } size_type erase( const const_key_type& key ) { _wxHashTable_NodeBase** node = GetNodePtr(key); if( !node ) return 0; --m_items; _wxHashTable_NodeBase* temp = (*node)->m_next; delete static_cast<Node*>(*node); (*node) = temp; if( never_shrink( m_tableBuckets, m_items ) ) ResizeTable( GetPreviousPrime( (unsigned long) m_tableBuckets ) - 1 ); return 1; } protected: static size_type GetBucketForNode( Self* ht, Node* node ) { return ht->m_hasher( ht->m_getKey( node->m_value ) ) % ht->m_tableBuckets; } static Node* CopyNode( Node* node ) { return new Node( *node ); } Node* GetOrCreateNode( const value_type& value, bool& created ) { const const_key_type& key = m_getKey( value ); size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) { created = false; return node; } node = node->next(); } created = true; return CreateNode( value, bucket); } Node * CreateNode( const value_type& value, size_t bucket ) { Node* node = new Node( value ); node->m_next = m_table[bucket]; m_table[bucket] = node; ++m_items; if( grow_lf70( m_tableBuckets, m_items ) ) ResizeTable( m_tableBuckets ); return node; } void CreateNode( const value_type& value ) { CreateNode(value, m_hasher( m_getKey(value) ) % m_tableBuckets ); } _wxHashTable_NodeBase** GetNodePtr(const const_key_type& key) const { size_t bucket = m_hasher( key ) % m_tableBuckets; _wxHashTable_NodeBase** node = &m_table[bucket]; while( *node ) { if (m_equals(m_getKey(static_cast<Node*>(*node)->m_value), key)) return node; node = &(*node)->m_next; } return __null; } Node* GetNode( const const_key_type& key ) const { size_t bucket = m_hasher( key ) % m_tableBuckets; Node* node = static_cast<Node*>(m_table[bucket]); while( node ) { if( m_equals( m_getKey( node->m_value ), key ) ) return node; node = node->next(); } return __null; } void ResizeTable( size_t newSize ) { newSize = GetNextPrime( (unsigned long)newSize ); _wxHashTable_NodeBase** srcTable = m_table; size_t srcBuckets = m_tableBuckets; m_table = (_wxHashTable_NodeBase**)AllocTable( newSize ); m_tableBuckets = newSize; CopyHashTable( srcTable, srcBuckets, this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)&DummyProcessNode ); FreeTable(srcTable); } void HashCopy( const Self& ht ) { ResizeTable( ht.size() ); CopyHashTable( ht.m_table, ht.m_tableBuckets, (_wxHashTableBase2*)this, m_table, (BucketFromNode)GetBucketForNode, (ProcessNode)CopyNode ); } }; class SignalHandlerHash:public SignalHandlerHash_wxImplementation_HashTable { public: typedef SignalHandler mapped_type; class Insert_Result { public: typedef iterator first_type; typedef bool second_type; typedef iterator t1; typedef bool t2; typedef const iterator const_t1; typedef const bool const_t2; Insert_Result(const const_t1& f, const const_t2& s) : first(const_cast<t1&>(f)), second(const_cast<t2&>(s)) {} t1 first; t2 second; }; SignalHandlerHash( size_type hint = 100, hasher hf = hasher(), key_equal eq = key_equal() ) : SignalHandlerHash_wxImplementation_HashTable( hint, hf, eq, SignalHandlerHash_wxImplementation_KeyEx() ) {} mapped_type& operator[]( const const_key_type& key ) { bool created; return GetOrCreateNode( SignalHandlerHash_wxImplementation_Pair( key, mapped_type() ), created)->m_value.second; } const_iterator find( const const_key_type& key ) const { return const_iterator( GetNode( key ), this ); } iterator find( const const_key_type& key ) { return iterator( GetNode( key ), this ); } Insert_Result insert( const value_type& v ) { bool created; Node *node = GetOrCreateNode( SignalHandlerHash_wxImplementation_Pair( v.first, v.second ), created); return Insert_Result(iterator(node, this), created); } size_type erase( const key_type& k ) { return SignalHandlerHash_wxImplementation_HashTable::erase( k ); } void erase( const iterator& it ) { erase( (*it).first ); } size_type count( const const_key_type& key ) { return GetNode( key ) ? 1u : 0u; } };
    SignalHandlerHash m_signalHandlerHash;



    wxWakeUpPipe *m_signalWakeUpPipe;
};
# 521 "/usr/local/include/wx-3.0/wx/app.h" 2
# 756 "/usr/local/include/wx-3.0/wx/app.h"
                 void wxExit();







                 bool wxYield();




                 void wxWakeUpIdle();
# 779 "/usr/local/include/wx-3.0/wx/app.h"
class wxAppInitializer
{
public:
    wxAppInitializer(wxAppInitializerFunction fn)
        { wxAppConsole::SetInitializerFunction(fn); }
};
# 869 "/usr/local/include/wx-3.0/wx/app.h"
extern wxAppConsole *wxCreateApp();
extern wxAppInitializer wxTheAppInitializer;
# 26 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 1 "/usr/local/include/wx-3.0/wx/utils.h" 1
# 20 "/usr/local/include/wx-3.0/wx/utils.h"
# 1 "/usr/local/include/wx-3.0/wx/filefn.h" 1
# 25 "/usr/local/include/wx-3.0/wx/filefn.h"
# 1 "/usr/include/sys/types.h" 1 3 4
# 84 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/_types/_u_char.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_char.h" 3 4
typedef unsigned char u_char;
# 85 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_u_short.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_short.h" 3 4
typedef unsigned short u_short;
# 86 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_u_int.h" 1 3 4
# 30 "/usr/include/sys/_types/_u_int.h" 3 4
typedef unsigned int u_int;
# 87 "/usr/include/sys/types.h" 2 3 4

typedef unsigned long u_long;


typedef unsigned short ushort;
typedef unsigned int uint;


typedef u_int64_t u_quad_t;
typedef int64_t quad_t;
typedef quad_t * qaddr_t;


# 1 "/usr/include/sys/_types/_caddr_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_caddr_t.h" 3 4
typedef char * caddr_t;
# 100 "/usr/include/sys/types.h" 2 3 4

typedef int32_t daddr_t;



typedef u_int32_t fixpt_t;


# 1 "/usr/include/sys/_types/_blkcnt_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_blkcnt_t.h" 3 4
typedef __darwin_blkcnt_t blkcnt_t;
# 108 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_blksize_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_blksize_t.h" 3 4
typedef __darwin_blksize_t blksize_t;
# 109 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_gid_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_gid_t.h" 3 4
typedef __darwin_gid_t gid_t;
# 110 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_in_addr_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_in_addr_t.h" 3 4
typedef __uint32_t in_addr_t;
# 111 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_in_port_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_in_port_t.h" 3 4
typedef __uint16_t in_port_t;
# 112 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_ino_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_ino_t.h" 3 4
typedef __darwin_ino_t ino_t;
# 113 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/_types/_ino64_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_ino64_t.h" 3 4
typedef __darwin_ino64_t ino64_t;
# 116 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/_types/_key_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_key_t.h" 3 4
typedef __int32_t key_t;
# 119 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/sys/_types/_nlink_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_nlink_t.h" 3 4
typedef __uint16_t nlink_t;
# 121 "/usr/include/sys/types.h" 2 3 4




typedef int32_t segsz_t;
typedef int32_t swblk_t;
# 138 "/usr/include/sys/types.h" 3 4
static inline __int32_t major(__uint32_t _x)
{
 return (__int32_t)(((__uint32_t)_x >> 24) & 0xff);
}

static inline __int32_t minor(__uint32_t _x)
{
 return (__int32_t)((_x) & 0xffffff);
}

static inline dev_t makedev(__uint32_t _major, __uint32_t _minor)
{
 return (dev_t)(((_major) << 24) | (_minor));
}
# 163 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 164 "/usr/include/sys/types.h" 2 3 4



# 1 "/usr/include/sys/_types/_useconds_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_useconds_t.h" 3 4
typedef __darwin_useconds_t useconds_t;
# 168 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_suseconds_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_suseconds_t.h" 3 4
typedef __darwin_suseconds_t suseconds_t;
# 169 "/usr/include/sys/types.h" 2 3 4
# 181 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/_types/_fd_def.h" 1 3 4
# 48 "/usr/include/sys/_types/_fd_def.h" 3 4
extern "C" {
typedef struct fd_set {
 __int32_t fds_bits[((((1024) % ((sizeof(__int32_t) * 8))) == 0) ? ((1024) / ((sizeof(__int32_t) * 8))) : (((1024) / ((sizeof(__int32_t) * 8))) + 1))];
} fd_set;
}


static inline int
__darwin_fd_isset(int _n, const struct fd_set *_p)
{
 return (_p->fds_bits[(unsigned long)_n/(sizeof(__int32_t) * 8)] & ((__int32_t)(((unsigned long)1)<<((unsigned long)_n % (sizeof(__int32_t) * 8)))));
}
# 182 "/usr/include/sys/types.h" 2 3 4




typedef __int32_t fd_mask;








# 1 "/usr/include/sys/_types/_fd_setsize.h" 1 3 4
# 195 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_set.h" 1 3 4
# 196 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_clr.h" 1 3 4
# 197 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_zero.h" 1 3 4
# 198 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_fd_isset.h" 1 3 4
# 199 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/_types/_fd_copy.h" 1 3 4
# 202 "/usr/include/sys/types.h" 2 3 4
# 213 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/_pthread/_pthread_cond_t.h" 1 3 4
# 31 "/usr/include/sys/_pthread/_pthread_cond_t.h" 3 4
typedef __darwin_pthread_cond_t pthread_cond_t;
# 214 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_condattr_t.h" 1 3 4
# 31 "/usr/include/sys/_pthread/_pthread_condattr_t.h" 3 4
typedef __darwin_pthread_condattr_t pthread_condattr_t;
# 215 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_mutex_t.h" 1 3 4
# 31 "/usr/include/sys/_pthread/_pthread_mutex_t.h" 3 4
typedef __darwin_pthread_mutex_t pthread_mutex_t;
# 216 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 1 3 4
# 31 "/usr/include/sys/_pthread/_pthread_mutexattr_t.h" 3 4
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
# 217 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_once_t.h" 1 3 4
# 31 "/usr/include/sys/_pthread/_pthread_once_t.h" 3 4
typedef __darwin_pthread_once_t pthread_once_t;
# 218 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_rwlock_t.h" 1 3 4
# 31 "/usr/include/sys/_pthread/_pthread_rwlock_t.h" 3 4
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
# 219 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 1 3 4
# 31 "/usr/include/sys/_pthread/_pthread_rwlockattr_t.h" 3 4
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
# 220 "/usr/include/sys/types.h" 2 3 4




# 1 "/usr/include/sys/_pthread/_pthread_key_t.h" 1 3 4
# 31 "/usr/include/sys/_pthread/_pthread_key_t.h" 3 4
typedef __darwin_pthread_key_t pthread_key_t;
# 225 "/usr/include/sys/types.h" 2 3 4




# 1 "/usr/include/sys/_types/_fsblkcnt_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_fsblkcnt_t.h" 3 4
typedef __darwin_fsblkcnt_t fsblkcnt_t;
# 230 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/sys/_types/_fsfilcnt_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_fsfilcnt_t.h" 3 4
typedef __darwin_fsfilcnt_t fsfilcnt_t;
# 231 "/usr/include/sys/types.h" 2 3 4
# 26 "/usr/local/include/wx-3.0/wx/filefn.h" 2
# 1 "/usr/include/sys/stat.h" 1 3 4
# 110 "/usr/include/sys/stat.h" 3 4
struct ostat {
 __uint16_t st_dev;
 ino_t st_ino;
 mode_t st_mode;
 nlink_t st_nlink;
 __uint16_t st_uid;
 __uint16_t st_gid;
 __uint16_t st_rdev;
 __int32_t st_size;
 struct timespec st_atimespec;
 struct timespec st_mtimespec;
 struct timespec st_ctimespec;
 __int32_t st_blksize;
 __int32_t st_blocks;
 __uint32_t st_flags;
 __uint32_t st_gen;
};
# 182 "/usr/include/sys/stat.h" 3 4
struct stat { dev_t st_dev; mode_t st_mode; nlink_t st_nlink; __darwin_ino64_t st_ino; uid_t st_uid; gid_t st_gid; dev_t st_rdev; struct timespec st_atimespec; struct timespec st_mtimespec; struct timespec st_ctimespec; struct timespec st_birthtimespec; off_t st_size; blkcnt_t st_blocks; blksize_t st_blksize; __uint32_t st_flags; __uint32_t st_gen; __int32_t st_lspare; __int64_t st_qspare[2]; };
# 221 "/usr/include/sys/stat.h" 3 4
struct stat64 { dev_t st_dev; mode_t st_mode; nlink_t st_nlink; __darwin_ino64_t st_ino; uid_t st_uid; gid_t st_gid; dev_t st_rdev; struct timespec st_atimespec; struct timespec st_mtimespec; struct timespec st_ctimespec; struct timespec st_birthtimespec; off_t st_size; blkcnt_t st_blocks; blksize_t st_blksize; __uint32_t st_flags; __uint32_t st_gen; __int32_t st_lspare; __int64_t st_qspare[2]; };
# 241 "/usr/include/sys/stat.h" 3 4
# 1 "/usr/include/sys/_types/_s_ifmt.h" 1 3 4
# 242 "/usr/include/sys/stat.h" 2 3 4
# 353 "/usr/include/sys/stat.h" 3 4
extern "C" {

int chmod(const char *, mode_t) __asm("_" "chmod" );
int fchmod(int, mode_t) __asm("_" "fchmod" );
int fstat(int, struct stat *) __asm("_" "fstat" "$INODE64");
int lstat(const char *, struct stat *) __asm("_" "lstat" "$INODE64");
int mkdir(const char *, mode_t);
int mkfifo(const char *, mode_t);
int stat(const char *, struct stat *) __asm("_" "stat" "$INODE64");
int mknod(const char *, mode_t, dev_t);
mode_t umask(mode_t);


int fchmodat(int, const char *, mode_t, int) __attribute__((availability(macosx,introduced=10.10)));
int fstatat(int, const char *, struct stat *, int) __asm("_" "fstatat" "$INODE64") __attribute__((availability(macosx,introduced=10.10)));
int mkdirat(int, const char *, mode_t) __attribute__((availability(macosx,introduced=10.10)));




int futimens(int __fd, const struct timespec __times[2]) __attribute__((availability(macosx,introduced=10.13))) __attribute__((availability(ios,introduced=11.0))) __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
int utimensat(int __fd, const char *__path, const struct timespec __times[2],
  int __flag) __attribute__((availability(macosx,introduced=10.13))) __attribute__((availability(ios,introduced=11.0))) __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));





# 1 "/usr/include/sys/_types/_filesec_t.h" 1 3 4
# 30 "/usr/include/sys/_types/_filesec_t.h" 3 4
struct _filesec;
typedef struct _filesec *filesec_t;
# 381 "/usr/include/sys/stat.h" 2 3 4

int chflags(const char *, __uint32_t);
int chmodx_np(const char *, filesec_t);
int fchflags(int, __uint32_t);
int fchmodx_np(int, filesec_t);
int fstatx_np(int, struct stat *, filesec_t) __asm("_" "fstatx_np" "$INODE64");
int lchflags(const char *, __uint32_t) __attribute__((availability(macosx,introduced=10.5)));
int lchmod(const char *, mode_t) __attribute__((availability(macosx,introduced=10.5)));
int lstatx_np(const char *, struct stat *, filesec_t) __asm("_" "lstatx_np" "$INODE64");
int mkdirx_np(const char *, filesec_t);
int mkfifox_np(const char *, filesec_t);
int statx_np(const char *, struct stat *, filesec_t) __asm("_" "statx_np" "$INODE64");
int umaskx_np(filesec_t) __attribute__((availability(macosx,introduced=10.4,deprecated=10.6)));



int fstatx64_np(int, struct stat64 *, filesec_t) __attribute__((availability(macosx,introduced=10.5,deprecated=10.6)));
int lstatx64_np(const char *, struct stat64 *, filesec_t) __attribute__((availability(macosx,introduced=10.5,deprecated=10.6)));
int statx64_np(const char *, struct stat64 *, filesec_t) __attribute__((availability(macosx,introduced=10.5,deprecated=10.6)));
int fstat64(int, struct stat64 *) __attribute__((availability(macosx,introduced=10.5,deprecated=10.6)));
int lstat64(const char *, struct stat64 *) __attribute__((availability(macosx,introduced=10.5,deprecated=10.6)));
int stat64(const char *, struct stat64 *) __attribute__((availability(macosx,introduced=10.5,deprecated=10.6)));



}
# 27 "/usr/local/include/wx-3.0/wx/filefn.h" 2
# 42 "/usr/local/include/wx-3.0/wx/filefn.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 72 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/sys/unistd.h" 1 3 4
# 84 "/usr/include/sys/unistd.h" 3 4
# 1 "/usr/include/sys/_types/_posix_vdisable.h" 1 3 4
# 85 "/usr/include/sys/unistd.h" 2 3 4
# 122 "/usr/include/sys/unistd.h" 3 4
# 1 "/usr/include/sys/_types/_seek_set.h" 1 3 4
# 123 "/usr/include/sys/unistd.h" 2 3 4
# 132 "/usr/include/sys/unistd.h" 3 4
struct accessx_descriptor {
 unsigned int ad_name_offset;
 int ad_flags;
 int ad_pad[2];
};
# 180 "/usr/include/sys/unistd.h" 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 181 "/usr/include/sys/unistd.h" 2 3 4




extern "C" {

int getattrlistbulk(int, void *, void *, size_t, uint64_t) __attribute__((availability(macosx,introduced=10.10)));
int getattrlistat(int, const char *, void *, void *, size_t, unsigned long) __attribute__((availability(macosx,introduced=10.10)));
int setattrlistat(int, const char *, void *, void *, size_t, uint32_t) __attribute__((availability(macosx,introduced=10.13))) __attribute__((availability(ios,introduced=11.0))) __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));

}







# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 199 "/usr/include/sys/unistd.h" 2 3 4






extern "C" {

int faccessat(int, const char *, int, int) __attribute__((availability(macosx,introduced=10.10)));
int fchownat(int, const char *, uid_t, gid_t, int) __attribute__((availability(macosx,introduced=10.10)));
int linkat(int, const char *, int, const char *, int) __attribute__((availability(macosx,introduced=10.10)));
ssize_t readlinkat(int, const char *, char *, size_t) __attribute__((availability(macosx,introduced=10.10)));
int symlinkat(const char *, int, const char *) __attribute__((availability(macosx,introduced=10.10)));
int unlinkat(int, const char *, int) __attribute__((availability(macosx,introduced=10.10)));

}
# 73 "/usr/include/unistd.h" 2 3 4







# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 81 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/sys/_types/_null.h" 1 3 4
# 85 "/usr/include/unistd.h" 2 3 4
# 428 "/usr/include/unistd.h" 3 4
extern "C" {
void _exit(int) __attribute__((noreturn));
int access(const char *, int);
unsigned int
  alarm(unsigned int);
int chdir(const char *);
int chown(const char *, uid_t, gid_t);

int close(int) __asm("_" "close" );

int dup(int);
int dup2(int, int);
int execl(const char * __path, const char * __arg0, ...) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execle(const char * __path, const char * __arg0, ...) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execlp(const char * __file, const char * __arg0, ...) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execv(const char * __path, char * const * __argv) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execve(const char * __file, char * const * __argv, char * const * __envp) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int execvp(const char * __file, char * const * __argv) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
pid_t fork(void) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
long fpathconf(int, int);
char *getcwd(char *, size_t);
gid_t getegid(void);
uid_t geteuid(void);
gid_t getgid(void);



int getgroups(int, gid_t []);

char *getlogin(void);
pid_t getpgrp(void);
pid_t getpid(void);
pid_t getppid(void);
uid_t getuid(void);
int isatty(int);
int link(const char *, const char *);
off_t lseek(int, off_t, int);
long pathconf(const char *, int);

int pause(void) __asm("_" "pause" );

int pipe(int [2]);

ssize_t read(int, void *, size_t) __asm("_" "read" );

int rmdir(const char *);
int setgid(gid_t);
int setpgid(pid_t, pid_t);
pid_t setsid(void);
int setuid(uid_t);

unsigned int
  sleep(unsigned int) __asm("_" "sleep" );

long sysconf(int);
pid_t tcgetpgrp(int);
int tcsetpgrp(int, pid_t);
char *ttyname(int);


int ttyname_r(int, char *, size_t) __asm("_" "ttyname_r" );




int unlink(const char *);

ssize_t write(int __fd, const void * __buf, size_t __nbyte) __asm("_" "write" );
}
# 505 "/usr/include/unistd.h" 3 4
extern "C" {
size_t confstr(int, char *, size_t) __asm("_" "confstr" );

int getopt(int, char * const [], const char *) __asm("_" "getopt" );

extern char *optarg;
extern int optind, opterr, optopt;
}
# 530 "/usr/include/unistd.h" 3 4
 extern "C" {





__attribute__((deprecated)) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))

void *brk(const void *);
int chroot(const char *) ;


char *crypt(const char *, const char *);






void encrypt(char *, int) __asm("_" "encrypt" );



int fchdir(int);
long gethostid(void);
pid_t getpgid(pid_t);
pid_t getsid(pid_t);



int getdtablesize(void) ;
int getpagesize(void) __attribute__((const)) ;
char *getpass(const char *) ;




char *getwd(char *) ;


int lchown(const char *, uid_t, gid_t) __asm("_" "lchown" );

int lockf(int, int, off_t) __asm("_" "lockf" );

int nice(int) __asm("_" "nice" );

ssize_t pread(int __fd, void * __buf, size_t __nbyte, off_t __offset) __asm("_" "pread" );

ssize_t pwrite(int __fd, const void * __buf, size_t __nbyte, off_t __offset) __asm("_" "pwrite" );






__attribute__((deprecated)) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))

void *sbrk(int);



pid_t setpgrp(void) __asm("_" "setpgrp" );




int setregid(gid_t, gid_t) __asm("_" "setregid" );

int setreuid(uid_t, uid_t) __asm("_" "setreuid" );

void swab(const void * , void * , ssize_t);
void sync(void);
int truncate(const char *, off_t);
useconds_t ualarm(useconds_t, useconds_t);
int usleep(useconds_t) __asm("_" "usleep" );
pid_t vfork(void) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));


int fsync(int) __asm("_" "fsync" );

int ftruncate(int, off_t);
int getlogin_r(char *, size_t);
}
# 623 "/usr/include/unistd.h" 3 4
extern "C" {
int fchown(int, uid_t, gid_t);
int gethostname(char *, size_t);
ssize_t readlink(const char * , char * , size_t);
int setegid(gid_t);
int seteuid(uid_t);
int symlink(const char *, const char *);
}








# 1 "/usr/include/sys/select.h" 1 3 4
# 111 "/usr/include/sys/select.h" 3 4
extern "C" {


int pselect(int, fd_set * , fd_set * ,
  fd_set * , const struct timespec * ,
  const sigset_t * )




  __asm("_" "pselect" "$1050")




  ;



# 1 "/usr/include/sys/_select.h" 1 3 4
# 39 "/usr/include/sys/_select.h" 3 4
int select(int, fd_set * , fd_set * ,
  fd_set * , struct timeval * )




  __asm("_" "select" "$1050")




  ;
# 130 "/usr/include/sys/select.h" 2 3 4

}
# 639 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/sys/_types/_uuid_t.h" 1 3 4
# 31 "/usr/include/sys/_types/_uuid_t.h" 3 4
typedef __darwin_uuid_t uuid_t;
# 643 "/usr/include/unistd.h" 2 3 4

extern "C" {
void _Exit(int) __attribute__((noreturn));
int accessx_np(const struct accessx_descriptor *, size_t, int *, uid_t);
int acct(const char *);
int add_profil(char *, size_t, unsigned long, unsigned int) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
void endusershell(void);
int execvP(const char * __file, const char * __searchpath, char * const * __argv) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
char *fflagstostr(unsigned long);
int getdomainname(char *, int);
int getgrouplist(const char *, int, int *, int *);





# 1 "/usr/include/gethostuuid.h" 1 3 4
# 39 "/usr/include/gethostuuid.h" 3 4
int gethostuuid(uuid_t, const struct timespec *) __attribute__((availability(macosx,introduced=10.5)));
# 659 "/usr/include/unistd.h" 2 3 4




mode_t getmode(const void *, mode_t);
int getpeereid(int, uid_t *, gid_t *);
int getsgroups_np(int *, uuid_t);
char *getusershell(void);
int getwgroups_np(int *, uuid_t);
int initgroups(const char *, int);
int issetugid(void);
char *mkdtemp(char *);
int mknod(const char *, mode_t, dev_t);
int mkpath_np(const char *path, mode_t omode) __attribute__((availability(macosx,introduced=10.8)));
int mkpathat_np(int dfd, const char *path, mode_t omode)
  __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0)))
  __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
int mkstemp(char *);
int mkstemps(char *, int);
char *mktemp(char *);
int mkostemp(char *path, int oflags)
  __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0)))
  __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
int mkostemps(char *path, int slen, int oflags)
  __attribute__((availability(macosx,introduced=10.12))) __attribute__((availability(ios,introduced=10.0)))
  __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));

int mkstemp_dprotected_np(char *path, int dpclass, int dpflags)
  __attribute__((availability(macosx,unavailable))) __attribute__((availability(ios,introduced=10.0)))
  __attribute__((availability(tvos,introduced=10.0))) __attribute__((availability(watchos,introduced=3.0)));
char *mkdtempat_np(int dfd, char *path)
  __attribute__((availability(macosx,introduced=10.13))) __attribute__((availability(ios,introduced=11.0)))
  __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
int mkstempsat_np(int dfd, char *path, int slen)
  __attribute__((availability(macosx,introduced=10.13))) __attribute__((availability(ios,introduced=11.0)))
  __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
int mkostempsat_np(int dfd, char *path, int slen, int oflags)
  __attribute__((availability(macosx,introduced=10.13))) __attribute__((availability(ios,introduced=11.0)))
  __attribute__((availability(tvos,introduced=11.0))) __attribute__((availability(watchos,introduced=4.0)));
int nfssvc(int, void *);
int profil(char *, size_t, unsigned long, unsigned int);

__attribute__((deprecated("Use of per-thread security contexts is error-prone and discouraged.")))
int pthread_setugid_np(uid_t, gid_t);
int pthread_getugid_np( uid_t *, gid_t *);

int reboot(int);
int revoke(const char *);

__attribute__((deprecated)) int rcmd(char **, int, const char *, const char *, const char *, int *);
__attribute__((deprecated)) int rcmd_af(char **, int, const char *, const char *, const char *, int *,
  int);
__attribute__((deprecated)) int rresvport(int *);
__attribute__((deprecated)) int rresvport_af(int *, int);
__attribute__((deprecated)) int iruserok(unsigned long, int, const char *, const char *);
__attribute__((deprecated)) int iruserok_sa(const void *, int, int, const char *, const char *);
__attribute__((deprecated)) int ruserok(const char *, int, const char *, const char *);

int setdomainname(const char *, int);
int setgroups(int, const gid_t *);
void sethostid(long);
int sethostname(const char *, int);

void setkey(const char *) __asm("_" "setkey" );



int setlogin(const char *);
void *setmode(const char *) __asm("_" "setmode" );
int setrgid(gid_t);
int setruid(uid_t);
int setsgroups_np(int, const uuid_t);
void setusershell(void);
int setwgroups_np(int, const uuid_t);
int strtofflags(char **, unsigned long *, unsigned long *);
int swapon(const char *);
int ttyslot(void);
int undelete(const char *);
int unwhiteout(const char *);
void *valloc(size_t);

__attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)))
__attribute__((availability(ios,deprecated=10.0,message="syscall(2) is unsupported; " "please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost().")))

__attribute__((availability(macosx,deprecated=10.12,message="syscall(2) is unsupported; " "please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost().")))

int syscall(int, ...);

extern char *suboptarg;
int getsubopt(char **, char * const *, char **);



int fgetattrlist(int,void*,void*,size_t,unsigned int) __attribute__((availability(macosx,introduced=10.6)));
int fsetattrlist(int,void*,void*,size_t,unsigned int) __attribute__((availability(macosx,introduced=10.6)));
int getattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "getattrlist" );
int setattrlist(const char*,void*,void*,size_t,unsigned int) __asm("_" "setattrlist" );
int exchangedata(const char*,const char*,unsigned int) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int getdirentriesattr(int,void*,void*,size_t,unsigned int*,unsigned int*,unsigned int*,unsigned int) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
# 772 "/usr/include/unistd.h" 3 4
struct fssearchblock;
struct searchstate;

int searchfs(const char *, struct fssearchblock *, unsigned long *, unsigned int, unsigned int, struct searchstate *) __attribute__((availability(watchos,unavailable))) __attribute__((availability(tvos,unavailable)));
int fsctl(const char *,unsigned long,void*,unsigned int);
int ffsctl(int,unsigned long,void*,unsigned int) __attribute__((availability(macosx,introduced=10.6)));




int fsync_volume_np(int, int) __attribute__((availability(macosx,introduced=10.8)));
int sync_volume_np(const char *, int) __attribute__((availability(macosx,introduced=10.8)));

extern int optreset;

}
# 43 "/usr/local/include/wx-3.0/wx/filefn.h" 2
# 1 "/usr/include/dirent.h" 1 3 4
# 65 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/sys/dirent.h" 1 3 4
# 86 "/usr/include/sys/dirent.h" 3 4
#pragma pack(4)
# 98 "/usr/include/sys/dirent.h" 3 4
#pragma pack()
# 112 "/usr/include/sys/dirent.h" 3 4
struct dirent { __uint64_t d_ino; __uint64_t d_seekoff; __uint16_t d_reclen; __uint16_t d_namlen; __uint8_t d_type; char d_name[1024]; };
# 66 "/usr/include/dirent.h" 2 3 4




struct _telldir;


typedef struct {
 int __dd_fd;
 long __dd_loc;
 long __dd_size;
 char *__dd_buf;
 int __dd_len;
 long __dd_seek;
 __attribute__((unused)) long __padding;
 int __dd_flags;
 __darwin_pthread_mutex_t __dd_lock;
 struct _telldir *__dd_td;
} DIR;
# 102 "/usr/include/dirent.h" 3 4
extern "C" {

int closedir(DIR *) __asm("_" "closedir" );

DIR *opendir(const char *) __asm("_" "opendir" "$INODE64" );

struct dirent *readdir(DIR *) __asm("_" "readdir" "$INODE64");
int readdir_r(DIR *, struct dirent *, struct dirent **) __asm("_" "readdir_r" "$INODE64");

void rewinddir(DIR *) __asm("_" "rewinddir" "$INODE64" );

void seekdir(DIR *, long) __asm("_" "seekdir" "$INODE64" );

long telldir(DIR *) __asm("_" "telldir" "$INODE64" );

}







extern "C" {

__attribute__((availability(macosx,introduced=10.10)))
DIR *fdopendir(int) __asm("_" "fdopendir" "$INODE64" );

int alphasort(const struct dirent **, const struct dirent **) __asm("_" "alphasort" "$INODE64");
# 145 "/usr/include/dirent.h" 3 4
int dirfd(DIR *dirp) __attribute__((availability(macosx,introduced=10.8)));


int scandir(const char *, struct dirent ***,
    int (*)(const struct dirent *), int (*)(const struct dirent **, const struct dirent **)) __asm("_" "scandir" "$INODE64");

int scandir_b(const char *, struct dirent ***,
    int (^)(const struct dirent *), int (^)(const struct dirent **, const struct dirent **)) __asm("_" "scandir_b" "$INODE64") __attribute__((availability(macosx,introduced=10.6)));


}




extern "C" {

int getdirentries(int, char *, int, long *)






      __asm("_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect")



;

DIR *__opendir2(const char *, int) __asm("_" "__opendir2" "$INODE64" );

}
# 44 "/usr/local/include/wx-3.0/wx/filefn.h" 2
# 73 "/usr/local/include/wx-3.0/wx/filefn.h"
# 1 "/usr/include/fcntl.h" 1 3 4
# 23 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/sys/fcntl.h" 1 3 4
# 83 "/usr/include/sys/fcntl.h" 3 4
# 1 "/usr/include/sys/_types/_size_t.h" 1 3 4
# 84 "/usr/include/sys/fcntl.h" 2 3 4
# 116 "/usr/include/sys/fcntl.h" 3 4
# 1 "/usr/include/sys/_types/_o_sync.h" 1 3 4
# 117 "/usr/include/sys/fcntl.h" 2 3 4
# 157 "/usr/include/sys/fcntl.h" 3 4
# 1 "/usr/include/sys/_types/_o_dsync.h" 1 3 4
# 158 "/usr/include/sys/fcntl.h" 2 3 4
# 310 "/usr/include/sys/fcntl.h" 3 4
# 1 "/usr/include/sys/_types/_seek_set.h" 1 3 4
# 311 "/usr/include/sys/fcntl.h" 2 3 4
# 335 "/usr/include/sys/fcntl.h" 3 4
struct flock {
 off_t l_start;
 off_t l_len;
 pid_t l_pid;
 short l_type;
 short l_whence;
};
# 350 "/usr/include/sys/fcntl.h" 3 4
struct flocktimeout {
 struct flock fl;
 struct timespec timeout;
};
# 363 "/usr/include/sys/fcntl.h" 3 4
struct radvisory {
       off_t ra_offset;
       int ra_count;
};



typedef struct fcodeblobs {
 void *f_cd_hash;
 size_t f_hash_size;
 void *f_cd_buffer;
 size_t f_cd_size;
 unsigned int *f_out_size;
 int f_arch;
 int __padding;
} fcodeblobs_t;
# 387 "/usr/include/sys/fcntl.h" 3 4
typedef struct fsignatures {
 off_t fs_file_start;
 void *fs_blob_start;
 size_t fs_blob_size;
} fsignatures_t;
# 403 "/usr/include/sys/fcntl.h" 3 4
typedef struct fchecklv {
 off_t lv_file_start;
 size_t lv_error_message_size;
 void *lv_error_message;
} fchecklv_t;
# 419 "/usr/include/sys/fcntl.h" 3 4
typedef struct fstore {
 unsigned int fst_flags;
 int fst_posmode;
 off_t fst_offset;
 off_t fst_length;
 off_t fst_bytesalloc;
} fstore_t;


typedef struct fpunchhole {
 unsigned int fp_flags;
 unsigned int reserved;
 off_t fp_offset;
 off_t fp_length;
} fpunchhole_t;


typedef struct ftrimactivefile {
 off_t fta_offset;
 off_t fta_length;
} ftrimactivefile_t;



typedef struct fbootstraptransfer {
  off_t fbt_offset;
  size_t fbt_length;
  void *fbt_buffer;
} fbootstraptransfer_t;
# 471 "/usr/include/sys/fcntl.h" 3 4
#pragma pack(4)

struct log2phys {
 unsigned int l2p_flags;
 off_t l2p_contigbytes;


 off_t l2p_devoffset;


};

#pragma pack()
# 496 "/usr/include/sys/fcntl.h" 3 4
typedef enum {
 FILESEC_OWNER = 1,
 FILESEC_GROUP = 2,
 FILESEC_UUID = 3,
 FILESEC_MODE = 4,
 FILESEC_ACL = 5,
 FILESEC_GRPUUID = 6,


 FILESEC_ACL_RAW = 100,
 FILESEC_ACL_ALLOCSIZE = 101
} filesec_property_t;





extern "C" {
int open(const char *, int, ...) __asm("_" "open" );

int openat(int, const char *, int, ...) __asm("_" "openat" ) __attribute__((availability(macosx,introduced=10.10)));

int creat(const char *, mode_t) __asm("_" "creat" );
int fcntl(int, int, ...) __asm("_" "fcntl" );


int openx_np(const char *, int, filesec_t);




int open_dprotected_np ( const char *, int, int, int, ...);
int flock(int, int);
filesec_t filesec_init(void);
filesec_t filesec_dup(filesec_t);
void filesec_free(filesec_t);
int filesec_get_property(filesec_t, filesec_property_t, void *);
int filesec_query_property(filesec_t, filesec_property_t, int *);
int filesec_set_property(filesec_t, filesec_property_t, const void *);
int filesec_unset_property(filesec_t, filesec_property_t) __attribute__((availability(macosx,introduced=10.6)));



}
# 24 "/usr/include/fcntl.h" 2 3 4
# 74 "/usr/local/include/wx-3.0/wx/filefn.h" 2
# 101 "/usr/local/include/wx-3.0/wx/filefn.h"
enum wxSeekMode
{
  wxFromStart,
  wxFromCurrent,
  wxFromEnd
};

enum wxFileKind
{
  wxFILE_KIND_UNKNOWN,
  wxFILE_KIND_DISK,
  wxFILE_KIND_TERMINAL,
  wxFILE_KIND_PIPE
};



enum wxPosixPermissions
{

    wxS_IRUSR = 00400,
    wxS_IWUSR = 00200,
    wxS_IXUSR = 00100,

    wxS_IRGRP = 00040,
    wxS_IWGRP = 00020,
    wxS_IXGRP = 00010,

    wxS_IROTH = 00004,
    wxS_IWOTH = 00002,
    wxS_IXOTH = 00001,


    wxPOSIX_USER_READ = wxS_IRUSR,
    wxPOSIX_USER_WRITE = wxS_IWUSR,
    wxPOSIX_USER_EXECUTE = wxS_IXUSR,

    wxPOSIX_GROUP_READ = wxS_IRGRP,
    wxPOSIX_GROUP_WRITE = wxS_IWGRP,
    wxPOSIX_GROUP_EXECUTE = wxS_IXGRP,

    wxPOSIX_OTHERS_READ = wxS_IROTH,
    wxPOSIX_OTHERS_WRITE = wxS_IWOTH,
    wxPOSIX_OTHERS_EXECUTE = wxS_IXOTH,




    wxS_DEFAULT = (wxPOSIX_USER_READ | wxPOSIX_USER_WRITE | wxPOSIX_GROUP_READ | wxPOSIX_GROUP_WRITE | wxPOSIX_OTHERS_READ | wxPOSIX_OTHERS_WRITE),






    wxS_DIR_DEFAULT = (wxPOSIX_USER_READ | wxPOSIX_USER_WRITE | wxPOSIX_USER_EXECUTE | wxPOSIX_GROUP_READ | wxPOSIX_GROUP_WRITE | wxPOSIX_GROUP_EXECUTE | wxPOSIX_OTHERS_READ | wxPOSIX_OTHERS_WRITE | wxPOSIX_OTHERS_EXECUTE)


};
# 468 "/usr/local/include/wx-3.0/wx/filefn.h"
    typedef off_t wxFileOffset;
# 527 "/usr/local/include/wx-3.0/wx/filefn.h"
inline int wxAccess(const wxString& path, mode_t mode)
    { return access(path.fn_str(), mode); }
inline int wxChmod(const wxString& path, mode_t mode)
    { return chmod(path.fn_str(), mode); }
inline int wxOpen(const wxString& path, int flags, mode_t mode)
    { return open(path.fn_str(), flags, mode); }



inline int wxStat(const wxString& path, struct stat *buf)
    { return stat(path.fn_str(), buf); }
inline int wxLstat(const wxString& path, struct stat *buf)
    { return lstat(path.fn_str(), buf); }
inline int wxRmDir(const wxString& path)
    { return rmdir(path.fn_str()); }





inline int wxMkDir(const wxString& path, mode_t mode)
    { return mkdir(path.fn_str(), mode); }
# 565 "/usr/local/include/wx-3.0/wx/filefn.h"
const int wxInvalidOffset = -1;





                 bool wxFileExists(const wxString& filename);


                 bool wxDirExists(const wxString& pathName);

                 bool wxIsAbsolutePath(const wxString& filename);


                 wxChar* wxFileNameFromPath(wxChar *path);
                 wxString wxFileNameFromPath(const wxString& path);


                 wxString wxPathOnly(const wxString& path);
# 636 "/usr/local/include/wx-3.0/wx/filefn.h"
                 wxString wxFindFirstFile(const wxString& spec, int flags = 1);
                 wxString wxFindNextFile();


                 bool wxIsWild(const wxString& pattern);




                 bool wxMatchWild(const wxString& pattern, const wxString& text, bool dot_special = true);


                 bool wxConcatFiles(const wxString& file1, const wxString& file2, const wxString& file3);


                 bool wxCopyFile(const wxString& file1, const wxString& file2,
                                 bool overwrite = true);


                 bool wxRemoveFile(const wxString& file);


                 bool wxRenameFile(const wxString& file1, const wxString& file2, bool overwrite = true);
# 670 "/usr/local/include/wx-3.0/wx/filefn.h"
                 wxString wxGetCwd();


                 bool wxSetWorkingDirectory(const wxString& d);


                 bool wxMkdir(const wxString& dir, int perm = wxS_DIR_DEFAULT);


                 bool wxRmdir(const wxString& dir, int flags = 0);


                 wxFileKind wxGetFileKind(int fd);
                 wxFileKind wxGetFileKind(FILE *fp);
# 695 "/usr/local/include/wx-3.0/wx/filefn.h"
                 bool wxIsWritable(const wxString &path);
                 bool wxIsReadable(const wxString &path);
                 bool wxIsExecutable(const wxString &path);
# 745 "/usr/local/include/wx-3.0/wx/filefn.h"
inline bool wxIsPathSeparator(wxChar c)
{


    return c == '/';



}


                 bool wxEndsWithPathSeparator(const wxString& filename);
# 769 "/usr/local/include/wx-3.0/wx/filefn.h"
                 bool wxFindFileInPath(wxString *pStr, const wxString& szPath, const wxString& szFile);



                 wxString wxGetOSDirectory();
# 787 "/usr/local/include/wx-3.0/wx/filefn.h"
                 int wxParseCommonDialogsFilter(const wxString& wildCard, wxArrayString& descriptions, wxArrayString& filters);
# 796 "/usr/local/include/wx-3.0/wx/filefn.h"
class wxUmaskChanger
{
public:



    wxUmaskChanger(int umaskNew)
    {
        m_umaskOld = umaskNew == -1 ? -1 : (int)umask((mode_t)umaskNew);
    }

    ~wxUmaskChanger()
    {
        if ( m_umaskOld != -1 )
            umask((mode_t)m_umaskOld);
    }

private:
    int m_umaskOld;
};
# 829 "/usr/local/include/wx-3.0/wx/filefn.h"
class wxPathList : public wxArrayString
{
public:
    wxPathList() {}
    wxPathList(const wxArrayString &arr)
        { Add(arr); }


    void AddEnvList(const wxString& envVariable);


    bool Add(const wxString& path);
    void Add(const wxArrayString &paths);


    wxString FindValidPath(const wxString& filename) const;



    wxString FindAbsoluteValidPath(const wxString& filename) const;


    bool EnsureFileAccessible(const wxString& path);





};
# 21 "/usr/local/include/wx-3.0/wx/utils.h" 2

# 1 "/usr/local/include/wx-3.0/wx/versioninfo.h" 1
# 19 "/usr/local/include/wx-3.0/wx/versioninfo.h"
class wxVersionInfo
{
public:
    wxVersionInfo(const wxString& name = wxString(),
                  int major = 0,
                  int minor = 0,
                  int micro = 0,
                  const wxString& description = wxString(),
                  const wxString& copyright = wxString())
    {
        m_name = name;
        m_major = major;
        m_minor = minor;
        m_micro = micro;
        m_description = description;
        m_copyright = copyright;
    }




    const wxString& GetName() const { return m_name; }

    int GetMajor() const { return m_major; }
    int GetMinor() const { return m_minor; }
    int GetMicro() const { return m_micro; }

    wxString ToString() const
    {
        return HasDescription() ? GetDescription() : GetVersionString();
    }

    wxString GetVersionString() const
    {
        wxString str;
        str << m_name << ' ' << GetMajor() << '.' << GetMinor();
        if ( GetMicro() )
            str << '.' << GetMicro();

        return str;
    }

    bool HasDescription() const { return !m_description.empty(); }
    const wxString& GetDescription() const { return m_description; }

    bool HasCopyright() const { return !m_copyright.empty(); }
    const wxString& GetCopyright() const { return m_copyright; }

private:
    wxString m_name,
             m_description,
             m_copyright;

    int m_major,
        m_minor,
        m_micro;
};
# 23 "/usr/local/include/wx-3.0/wx/utils.h" 2
# 1 "/usr/local/include/wx-3.0/wx/meta/implicitconversion.h" 1
# 29 "/usr/local/include/wx-3.0/wx/meta/implicitconversion.h"
namespace wxPrivate
{
# 42 "/usr/local/include/wx-3.0/wx/meta/implicitconversion.h"
template<typename T>
struct TypeHierarchy
{


    static const int level = 9999;
};







template<> struct TypeHierarchy<char> { static const int level = 1; };
template<> struct TypeHierarchy<unsigned char> { static const int level = 2; };
template<> struct TypeHierarchy<short> { static const int level = 3; };
template<> struct TypeHierarchy<unsigned short> { static const int level = 4; };
template<> struct TypeHierarchy<int> { static const int level = 5; };
template<> struct TypeHierarchy<unsigned int> { static const int level = 6; };
template<> struct TypeHierarchy<long> { static const int level = 7; };
template<> struct TypeHierarchy<unsigned long> { static const int level = 8; };

template<> struct TypeHierarchy<long long> { static const int level = 9; };
template<> struct TypeHierarchy<unsigned long long> { static const int level = 10; };

template<> struct TypeHierarchy<float> { static const int level = 11; };
template<> struct TypeHierarchy<double> { static const int level = 12; };
template<> struct TypeHierarchy<long double> { static const int level = 13; };





      template<> struct TypeHierarchy<wchar_t> : public TypeHierarchy<int> {};
# 86 "/usr/local/include/wx-3.0/wx/meta/implicitconversion.h"
}



template<typename T1, typename T2>
struct wxImplicitConversionType
{
    typedef typename wxIf
            <

                (int)(wxPrivate::TypeHierarchy<T1>::level) < (int)(wxPrivate::TypeHierarchy<T2>::level),
                T2,

                T1
            >::value
            value;
};


template<typename T1, typename T2, typename T3>
struct wxImplicitConversionType3 : public wxImplicitConversionType<
                        T1,
                        typename wxImplicitConversionType<T2,T3>::value>
{
};
# 24 "/usr/local/include/wx-3.0/wx/utils.h" 2






class wxArrayString;
class wxArrayInt;




# 1 "/usr/local/include/wx-3.0/wx/longlong.h" 1
# 36 "/usr/local/include/wx-3.0/wx/utils.h" 2


# 1 "/usr/local/include/wx-3.0/wx/platinfo.h" 1
# 25 "/usr/local/include/wx-3.0/wx/platinfo.h"
enum wxOperatingSystemId
{
    wxOS_UNKNOWN = 0,

    wxOS_MAC_OS = 1 << 0,
    wxOS_MAC_OSX_DARWIN = 1 << 1,
    wxOS_MAC = wxOS_MAC_OS|wxOS_MAC_OSX_DARWIN,

    wxOS_WINDOWS_9X = 1 << 2,
    wxOS_WINDOWS_NT = 1 << 3,
    wxOS_WINDOWS_MICRO = 1 << 4,
    wxOS_WINDOWS_CE = 1 << 5,
    wxOS_WINDOWS = wxOS_WINDOWS_9X |
                   wxOS_WINDOWS_NT |
                   wxOS_WINDOWS_MICRO |
                   wxOS_WINDOWS_CE,

    wxOS_UNIX_LINUX = 1 << 6,
    wxOS_UNIX_FREEBSD = 1 << 7,
    wxOS_UNIX_OPENBSD = 1 << 8,
    wxOS_UNIX_NETBSD = 1 << 9,
    wxOS_UNIX_SOLARIS = 1 << 10,
    wxOS_UNIX_AIX = 1 << 11,
    wxOS_UNIX_HPUX = 1 << 12,
    wxOS_UNIX = wxOS_UNIX_LINUX |
                wxOS_UNIX_FREEBSD |
                wxOS_UNIX_OPENBSD |
                wxOS_UNIX_NETBSD |
                wxOS_UNIX_SOLARIS |
                wxOS_UNIX_AIX |
                wxOS_UNIX_HPUX,



    wxOS_DOS = 1 << 15,
    wxOS_OS2 = 1 << 16
};



enum wxPortId
{
    wxPORT_UNKNOWN = 0,

    wxPORT_BASE = 1 << 0,

    wxPORT_MSW = 1 << 1,
    wxPORT_MOTIF = 1 << 2,
    wxPORT_GTK = 1 << 3,
    wxPORT_DFB = 1 << 4,
    wxPORT_X11 = 1 << 5,
    wxPORT_PM = 1 << 6,
    wxPORT_OS2 = wxPORT_PM,
    wxPORT_MAC = 1 << 7,
    wxPORT_OSX = wxPORT_MAC,
    wxPORT_COCOA = 1 << 8,
    wxPORT_WINCE = 1 << 9
};




enum wxArchitecture
{
    wxARCH_INVALID = -1,

    wxARCH_32,
    wxARCH_64,

    wxARCH_MAX
};



enum wxEndianness
{
    wxENDIAN_INVALID = -1,

    wxENDIAN_BIG,
    wxENDIAN_LITTLE,
    wxENDIAN_PDP,

    wxENDIAN_MAX
};


struct wxLinuxDistributionInfo
{
    wxString Id;
    wxString Release;
    wxString CodeName;
    wxString Description;

    bool operator==(const wxLinuxDistributionInfo& ldi) const
    {
        return Id == ldi.Id &&
               Release == ldi.Release &&
               CodeName == ldi.CodeName &&
               Description == ldi.Description;
    }

    bool operator!=(const wxLinuxDistributionInfo& ldi) const
    { return !(*this == ldi); }
};
# 137 "/usr/local/include/wx-3.0/wx/platinfo.h"
class wxPlatformInfo
{
public:
    wxPlatformInfo();
    wxPlatformInfo(wxPortId pid,
                   int tkMajor = -1, int tkMinor = -1,
                   wxOperatingSystemId id = wxOS_UNKNOWN,
                   int osMajor = -1, int osMinor = -1,
                   wxArchitecture arch = wxARCH_INVALID,
                   wxEndianness endian = wxENDIAN_INVALID,
                   bool usingUniversal = false);



    bool operator==(const wxPlatformInfo &t) const;

    bool operator!=(const wxPlatformInfo &t) const
        { return !(*this == t); }



    static const wxPlatformInfo& Get();






    static wxOperatingSystemId GetOperatingSystemId(const wxString &name);
    static wxPortId GetPortId(const wxString &portname);

    static wxArchitecture GetArch(const wxString &arch);
    static wxEndianness GetEndianness(const wxString &end);




    static wxString GetOperatingSystemFamilyName(wxOperatingSystemId os);
    static wxString GetOperatingSystemIdName(wxOperatingSystemId os);
    static wxString GetPortIdName(wxPortId port, bool usingUniversal);
    static wxString GetPortIdShortName(wxPortId port, bool usingUniversal);

    static wxString GetArchName(wxArchitecture arch);
    static wxString GetEndiannessName(wxEndianness end);





    int GetOSMajorVersion() const
        { return m_osVersionMajor; }
    int GetOSMinorVersion() const
        { return m_osVersionMinor; }


    bool CheckOSVersion(int major, int minor) const
    {
        return DoCheckVersion(GetOSMajorVersion(),
                              GetOSMinorVersion(),
                              major,
                              minor);
    }

    int GetToolkitMajorVersion() const
        { return m_tkVersionMajor; }
    int GetToolkitMinorVersion() const
        { return m_tkVersionMinor; }

    bool CheckToolkitVersion(int major, int minor) const
    {
        return DoCheckVersion(GetToolkitMajorVersion(),
                              GetToolkitMinorVersion(),
                              major,
                              minor);
    }

    bool IsUsingUniversalWidgets() const
        { return m_usingUniversal; }

    wxOperatingSystemId GetOperatingSystemId() const
        { return m_os; }
    wxLinuxDistributionInfo GetLinuxDistributionInfo() const
        { return m_ldi; }
    wxPortId GetPortId() const
        { return m_port; }
    wxArchitecture GetArchitecture() const
        { return m_arch; }
    wxEndianness GetEndianness() const
        { return m_endian; }





    wxString GetOperatingSystemFamilyName() const
        { return GetOperatingSystemFamilyName(m_os); }
    wxString GetOperatingSystemIdName() const
        { return GetOperatingSystemIdName(m_os); }
    wxString GetPortIdName() const
        { return GetPortIdName(m_port, m_usingUniversal); }
    wxString GetPortIdShortName() const
        { return GetPortIdShortName(m_port, m_usingUniversal); }
    wxString GetArchName() const
        { return GetArchName(m_arch); }
    wxString GetEndiannessName() const
        { return GetEndiannessName(m_endian); }
    wxString GetOperatingSystemDescription() const
        { return m_osDesc; }
    wxString GetDesktopEnvironment() const
        { return m_desktopEnv; }

    static wxString GetOperatingSystemDirectory();
# 257 "/usr/local/include/wx-3.0/wx/platinfo.h"
    void SetOSVersion(int major, int minor)
        { m_osVersionMajor=major; m_osVersionMinor=minor; }
    void SetToolkitVersion(int major, int minor)
        { m_tkVersionMajor=major; m_tkVersionMinor=minor; }

    void SetOperatingSystemId(wxOperatingSystemId n)
        { m_os = n; }
    void SetOperatingSystemDescription(const wxString& desc)
        { m_osDesc = desc; }
    void SetPortId(wxPortId n)
        { m_port = n; }
    void SetArchitecture(wxArchitecture n)
        { m_arch = n; }
    void SetEndianness(wxEndianness n)
        { m_endian = n; }

    void SetDesktopEnvironment(const wxString& de)
        { m_desktopEnv = de; }
    void SetLinuxDistributionInfo(const wxLinuxDistributionInfo& di)
        { m_ldi = di; }





    bool IsOk() const
    {
        return m_osVersionMajor != -1 && m_osVersionMinor != -1 &&
               m_os != wxOS_UNKNOWN &&
               !m_osDesc.IsEmpty() &&
               m_tkVersionMajor != -1 && m_tkVersionMinor != -1 &&
               m_port != wxPORT_UNKNOWN &&
               m_arch != wxARCH_INVALID &&
               m_endian != wxENDIAN_INVALID;


    }


protected:
    static bool DoCheckVersion(int majorCur, int minorCur, int major, int minor)
    {
        return majorCur > major || (majorCur == major && minorCur >= minor);
    }

    void InitForCurrentPlatform();







    int m_osVersionMajor,
        m_osVersionMinor;


    wxOperatingSystemId m_os;


    wxString m_osDesc;





    wxString m_desktopEnv;
    wxLinuxDistributionInfo m_ldi;







    int m_tkVersionMajor, m_tkVersionMinor;


    wxPortId m_port;


    bool m_usingUniversal;






    wxArchitecture m_arch;


    wxEndianness m_endian;
};
# 39 "/usr/local/include/wx-3.0/wx/utils.h" 2








# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/stdio.h" 1 3
# 48 "/usr/local/include/wx-3.0/wx/utils.h" 2





class wxProcess;
class wxFrame;
class wxWindow;
class wxWindowList;
class wxEventLoop;





template<typename T1, typename T2>
inline typename wxImplicitConversionType<T1,T2>::value
wxMax(T1 a, T2 b)
{
    typedef typename wxImplicitConversionType<T1,T2>::value ResultType;



    return static_cast<ResultType>(a) > static_cast<ResultType>(b) ? a : b;
}

template<typename T1, typename T2>
inline typename wxImplicitConversionType<T1,T2>::value
wxMin(T1 a, T2 b)
{
    typedef typename wxImplicitConversionType<T1,T2>::value ResultType;

    return static_cast<ResultType>(a) < static_cast<ResultType>(b) ? a : b;
}

template<typename T1, typename T2, typename T3>
inline typename wxImplicitConversionType3<T1,T2,T3>::value
wxClip(T1 a, T2 b, T3 c)
{
    typedef typename wxImplicitConversionType3<T1,T2,T3>::value ResultType;

    if ( static_cast<ResultType>(a) < static_cast<ResultType>(b) )
        return b;

    if ( static_cast<ResultType>(a) > static_cast<ResultType>(c) )
        return c;

    return a;
}
# 108 "/usr/local/include/wx-3.0/wx/utils.h"
    typedef long wxMemorySize;
# 132 "/usr/local/include/wx-3.0/wx/utils.h"
                 void wxBell();






                 wxVersionInfo wxGetLibraryVersionInfo();


                 wxString wxGetOsDescription();


                 wxOperatingSystemId wxGetOsVersion(int *majorVsn = __null,
                                                    int *minorVsn = __null);


                 bool wxIsPlatformLittleEndian();


                 bool wxIsPlatform64Bit();







                 wxString wxNow();


                 const wxChar *wxGetInstallPrefix();

                 wxString wxGetDataDir();
# 206 "/usr/local/include/wx-3.0/wx/utils.h"
class wxPlatform
{
public:
    wxPlatform() { Init(); }
    wxPlatform(const wxPlatform& platform) { Copy(platform); }
    void operator = (const wxPlatform& platform) { if (&platform != this) Copy(platform); }
    void Copy(const wxPlatform& platform);


    wxPlatform(int defValue) { Init(); m_longValue = (long)defValue; }
    wxPlatform(long defValue) { Init(); m_longValue = defValue; }
    wxPlatform(const wxString& defValue) { Init(); m_stringValue = defValue; }
    wxPlatform(double defValue) { Init(); m_doubleValue = defValue; }

    static wxPlatform If(int platform, long value);
    static wxPlatform IfNot(int platform, long value);
    wxPlatform& ElseIf(int platform, long value);
    wxPlatform& ElseIfNot(int platform, long value);
    wxPlatform& Else(long value);

    static wxPlatform If(int platform, int value) { return If(platform, (long)value); }
    static wxPlatform IfNot(int platform, int value) { return IfNot(platform, (long)value); }
    wxPlatform& ElseIf(int platform, int value) { return ElseIf(platform, (long) value); }
    wxPlatform& ElseIfNot(int platform, int value) { return ElseIfNot(platform, (long) value); }
    wxPlatform& Else(int value) { return Else((long) value); }

    static wxPlatform If(int platform, double value);
    static wxPlatform IfNot(int platform, double value);
    wxPlatform& ElseIf(int platform, double value);
    wxPlatform& ElseIfNot(int platform, double value);
    wxPlatform& Else(double value);

    static wxPlatform If(int platform, const wxString& value);
    static wxPlatform IfNot(int platform, const wxString& value);
    wxPlatform& ElseIf(int platform, const wxString& value);
    wxPlatform& ElseIfNot(int platform, const wxString& value);
    wxPlatform& Else(const wxString& value);

    long GetInteger() const { return m_longValue; }
    const wxString& GetString() const { return m_stringValue; }
    double GetDouble() const { return m_doubleValue; }

    operator int() const { return (int) GetInteger(); }
    operator long() const { return GetInteger(); }
    operator double() const { return GetDouble(); }
    operator const wxString&() const { return GetString(); }

    static void AddPlatform(int platform);
    static bool Is(int platform);
    static void ClearPlatforms();

private:

    void Init() { m_longValue = 0; m_doubleValue = 0.0; }

    long m_longValue;
    double m_doubleValue;
    wxString m_stringValue;
    static wxArrayInt* sm_customPlatforms;
};


inline bool wxPlatformIs(int platform) { return wxPlatform::Is(platform); }






                 void wxRegisterId(int id);


                 int wxGetCurrentId();


                 int wxNewId();






                 int wxHexToDec(const wxString& buf);


inline int wxHexToDec(const char* buf)
{
    int firstDigit, secondDigit;

    if (buf[0] >= 'A')
        firstDigit = buf[0] - 'A' + 10;
    else
        firstDigit = buf[0] - '0';

    if (buf[1] >= 'A')
        secondDigit = buf[1] - 'A' + 10;
    else
        secondDigit = buf[1] - '0';

    return (firstDigit & 0xF) * 16 + (secondDigit & 0xF );
}



                 void wxDecToHex(int dec, wxChar *buf);
                 void wxDecToHex(int dec, char* ch1, char* ch2);
                 wxString wxDecToHex(int dec);
# 321 "/usr/local/include/wx-3.0/wx/utils.h"
enum
{

    wxEXEC_ASYNC = 0,


    wxEXEC_SYNC = 1,



    wxEXEC_SHOW_CONSOLE = 2,



    wxEXEC_NOHIDE = wxEXEC_SHOW_CONSOLE,






    wxEXEC_MAKE_GROUP_LEADER = 4,




    wxEXEC_NODISABLE = 8,




    wxEXEC_NOEVENTS = 16,



    wxEXEC_HIDE_CONSOLE = 32,


    wxEXEC_BLOCK = wxEXEC_SYNC | wxEXEC_NOEVENTS
};


typedef wxStringToStringHashMap wxEnvVariableHashMap;



struct wxExecuteEnv
{
    wxString cwd;
    wxEnvVariableHashMap env;
};






                 long wxExecute(const wxString& command,
                                int flags = wxEXEC_ASYNC,
                                wxProcess *process = __null,
                                const wxExecuteEnv *env = __null);
                 long wxExecute(char **argv,
                                int flags = wxEXEC_ASYNC,
                                wxProcess *process = __null,
                                const wxExecuteEnv *env = __null);
# 395 "/usr/local/include/wx-3.0/wx/utils.h"
                 long wxExecute(const wxString& command,
                                wxArrayString& output,
                                int flags = 0,
                                const wxExecuteEnv *env = __null);


                 long wxExecute(const wxString& command,
                                wxArrayString& output,
                                wxArrayString& error,
                                int flags = 0,
                                const wxExecuteEnv *env = __null);
# 414 "/usr/local/include/wx-3.0/wx/utils.h"
enum wxSignal
{
    wxSIGNONE = 0,
    wxSIGHUP,
    wxSIGINT,
    wxSIGQUIT,
    wxSIGILL,
    wxSIGTRAP,
    wxSIGABRT,
    wxSIGIOT = wxSIGABRT,
    wxSIGEMT,
    wxSIGFPE,
    wxSIGKILL,
    wxSIGBUS,
    wxSIGSEGV,
    wxSIGSYS,
    wxSIGPIPE,
    wxSIGALRM,
    wxSIGTERM


};

enum wxKillError
{
    wxKILL_OK,
    wxKILL_BAD_SIGNAL,
    wxKILL_ACCESS_DENIED,
    wxKILL_NO_PROCESS,
    wxKILL_ERROR
};

enum wxKillFlags
{
    wxKILL_NOCHILDREN = 0,
    wxKILL_CHILDREN = 1
};

enum wxShutdownFlags
{
    wxSHUTDOWN_FORCE = 1,
    wxSHUTDOWN_POWEROFF = 2,
    wxSHUTDOWN_REBOOT = 4,
    wxSHUTDOWN_LOGOFF = 8
};


                 bool wxShutdown(int flags = wxSHUTDOWN_POWEROFF);





                 int wxKill(long pid,
                       wxSignal sig = wxSIGTERM,
                       wxKillError *rc = __null,
                       int flags = wxKILL_NOCHILDREN);



                 bool wxShell(const wxString& command = wxEmptyString);



                 bool wxShell(const wxString& command, wxArrayString& output);


                 void wxSleep(int nSecs);


                 void wxMilliSleep(unsigned long milliseconds);


                 void wxMicroSleep(unsigned long microseconds);







                 unsigned long wxGetProcessId();


                 wxMemorySize wxGetFreeMemory();
# 513 "/usr/local/include/wx-3.0/wx/utils.h"
                 bool wxGetEnv(const wxString& var, wxString *value);


                 bool wxSetEnv(const wxString& var, const wxString& value);


                 bool wxUnsetEnv(const wxString& var);
# 546 "/usr/local/include/wx-3.0/wx/utils.h"
                 bool wxGetEnvMap(wxEnvVariableHashMap *map);
# 555 "/usr/local/include/wx-3.0/wx/utils.h"
                 bool wxGetEmailAddress(wxChar *buf, int maxSize);
                 wxString wxGetEmailAddress();


                 bool wxGetHostName(wxChar *buf, int maxSize);
                 wxString wxGetHostName();


                 wxString wxGetFullHostName();
                 bool wxGetFullHostName(wxChar *buf, int maxSize);


                 bool wxGetUserId(wxChar *buf, int maxSize);
                 wxString wxGetUserId();


                 bool wxGetUserName(wxChar *buf, int maxSize);
                 wxString wxGetUserName();


                 wxString wxGetHomeDir();
                 const wxChar* wxGetHomeDir(wxString *pstr);



                 wxString wxGetUserHome(const wxString& user = wxEmptyString);





    typedef long wxDiskspaceSize_t;



                 bool wxGetDiskSpace(const wxString& path,
                                     wxDiskspaceSize_t *pTotal = __null,
                                     wxDiskspaceSize_t *pFree = __null);



typedef int (*wxSortCallback)(const void* pItem1,
                              const void* pItem2,
                              const void* user_data);


                 void wxQsort(void* pbase, size_t total_elems,
                              size_t size, wxSortCallback cmp,
                              const void* user_data);
# 802 "/usr/local/include/wx-3.0/wx/utils.h"
                 bool wxYieldIfNeeded();
# 27 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 1 "/usr/local/include/wx-3.0/wx/stream.h" 1
# 28 "/usr/local/include/wx-3.0/wx/wx.h" 2

# 1 "/usr/local/include/wx-3.0/wx/math.h" 1
# 29 "/usr/local/include/wx-3.0/wx/math.h"
# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/math.h" 1 3
# 299 "/Library/Developer/CommandLineTools/usr/include/c++/v1/math.h" 3


# 1 "/usr/include/math.h" 1 3 4
# 33 "/usr/include/math.h" 3 4
extern "C" {
# 44 "/usr/include/math.h" 3 4
    typedef float float_t;
    typedef double double_t;
# 111 "/usr/include/math.h" 3 4
extern int __math_errhandling(void);
# 144 "/usr/include/math.h" 3 4
extern int __fpclassifyf(float);
extern int __fpclassifyd(double);
extern int __fpclassifyl(long double);
# 188 "/usr/include/math.h" 3 4
inline __attribute__ ((__always_inline__)) int __inline_isfinitef(float);
inline __attribute__ ((__always_inline__)) int __inline_isfinited(double);
inline __attribute__ ((__always_inline__)) int __inline_isfinitel(long double);
inline __attribute__ ((__always_inline__)) int __inline_isinff(float);
inline __attribute__ ((__always_inline__)) int __inline_isinfd(double);
inline __attribute__ ((__always_inline__)) int __inline_isinfl(long double);
inline __attribute__ ((__always_inline__)) int __inline_isnanf(float);
inline __attribute__ ((__always_inline__)) int __inline_isnand(double);
inline __attribute__ ((__always_inline__)) int __inline_isnanl(long double);
inline __attribute__ ((__always_inline__)) int __inline_isnormalf(float);
inline __attribute__ ((__always_inline__)) int __inline_isnormald(double);
inline __attribute__ ((__always_inline__)) int __inline_isnormall(long double);
inline __attribute__ ((__always_inline__)) int __inline_signbitf(float);
inline __attribute__ ((__always_inline__)) int __inline_signbitd(double);
inline __attribute__ ((__always_inline__)) int __inline_signbitl(long double);

inline __attribute__ ((__always_inline__)) int __inline_isfinitef(float __x) {
    return __x == __x && __builtin_fabsf(__x) != __builtin_inff();
}
inline __attribute__ ((__always_inline__)) int __inline_isfinited(double __x) {
    return __x == __x && __builtin_fabs(__x) != __builtin_inf();
}
inline __attribute__ ((__always_inline__)) int __inline_isfinitel(long double __x) {
    return __x == __x && __builtin_fabsl(__x) != __builtin_infl();
}
inline __attribute__ ((__always_inline__)) int __inline_isinff(float __x) {
    return __builtin_fabsf(__x) == __builtin_inff();
}
inline __attribute__ ((__always_inline__)) int __inline_isinfd(double __x) {
    return __builtin_fabs(__x) == __builtin_inf();
}
inline __attribute__ ((__always_inline__)) int __inline_isinfl(long double __x) {
    return __builtin_fabsl(__x) == __builtin_infl();
}
inline __attribute__ ((__always_inline__)) int __inline_isnanf(float __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_isnand(double __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_isnanl(long double __x) {
    return __x != __x;
}
inline __attribute__ ((__always_inline__)) int __inline_signbitf(float __x) {
    union { float __f; unsigned int __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 31);
}
inline __attribute__ ((__always_inline__)) int __inline_signbitd(double __x) {
    union { double __f; unsigned long long __u; } __u;
    __u.__f = __x;
    return (int)(__u.__u >> 63);
}

inline __attribute__ ((__always_inline__)) int __inline_signbitl(long double __x) {
    union {
        long double __ld;
        struct{ unsigned long long __m; unsigned short __sexp; } __p;
    } __u;
    __u.__ld = __x;
    return (int)(__u.__p.__sexp >> 15);
}







inline __attribute__ ((__always_inline__)) int __inline_isnormalf(float __x) {
    return __inline_isfinitef(__x) && __builtin_fabsf(__x) >= 1.17549435e-38F;
}
inline __attribute__ ((__always_inline__)) int __inline_isnormald(double __x) {
    return __inline_isfinited(__x) && __builtin_fabs(__x) >= 2.2250738585072014e-308;
}
inline __attribute__ ((__always_inline__)) int __inline_isnormall(long double __x) {
    return __inline_isfinitel(__x) && __builtin_fabsl(__x) >= 3.36210314311209350626e-4932L;
}
# 322 "/usr/include/math.h" 3 4
extern float acosf(float);
extern double acos(double);
extern long double acosl(long double);

extern float asinf(float);
extern double asin(double);
extern long double asinl(long double);

extern float atanf(float);
extern double atan(double);
extern long double atanl(long double);

extern float atan2f(float, float);
extern double atan2(double, double);
extern long double atan2l(long double, long double);

extern float cosf(float);
extern double cos(double);
extern long double cosl(long double);

extern float sinf(float);
extern double sin(double);
extern long double sinl(long double);

extern float tanf(float);
extern double tan(double);
extern long double tanl(long double);

extern float acoshf(float);
extern double acosh(double);
extern long double acoshl(long double);

extern float asinhf(float);
extern double asinh(double);
extern long double asinhl(long double);

extern float atanhf(float);
extern double atanh(double);
extern long double atanhl(long double);

extern float coshf(float);
extern double cosh(double);
extern long double coshl(long double);

extern float sinhf(float);
extern double sinh(double);
extern long double sinhl(long double);

extern float tanhf(float);
extern double tanh(double);
extern long double tanhl(long double);

extern float expf(float);
extern double exp(double);
extern long double expl(long double);

extern float exp2f(float);
extern double exp2(double);
extern long double exp2l(long double);

extern float expm1f(float);
extern double expm1(double);
extern long double expm1l(long double);

extern float logf(float);
extern double log(double);
extern long double logl(long double);

extern float log10f(float);
extern double log10(double);
extern long double log10l(long double);

extern float log2f(float);
extern double log2(double);
extern long double log2l(long double);

extern float log1pf(float);
extern double log1p(double);
extern long double log1pl(long double);

extern float logbf(float);
extern double logb(double);
extern long double logbl(long double);

extern float modff(float, float *);
extern double modf(double, double *);
extern long double modfl(long double, long double *);

extern float ldexpf(float, int);
extern double ldexp(double, int);
extern long double ldexpl(long double, int);

extern float frexpf(float, int *);
extern double frexp(double, int *);
extern long double frexpl(long double, int *);

extern int ilogbf(float);
extern int ilogb(double);
extern int ilogbl(long double);

extern float scalbnf(float, int);
extern double scalbn(double, int);
extern long double scalbnl(long double, int);

extern float scalblnf(float, long int);
extern double scalbln(double, long int);
extern long double scalblnl(long double, long int);

extern float fabsf(float);
extern double fabs(double);
extern long double fabsl(long double);

extern float cbrtf(float);
extern double cbrt(double);
extern long double cbrtl(long double);

extern float hypotf(float, float);
extern double hypot(double, double);
extern long double hypotl(long double, long double);

extern float powf(float, float);
extern double pow(double, double);
extern long double powl(long double, long double);

extern float sqrtf(float);
extern double sqrt(double);
extern long double sqrtl(long double);

extern float erff(float);
extern double erf(double);
extern long double erfl(long double);

extern float erfcf(float);
extern double erfc(double);
extern long double erfcl(long double);




extern float lgammaf(float);
extern double lgamma(double);
extern long double lgammal(long double);

extern float tgammaf(float);
extern double tgamma(double);
extern long double tgammal(long double);

extern float ceilf(float);
extern double ceil(double);
extern long double ceill(long double);

extern float floorf(float);
extern double floor(double);
extern long double floorl(long double);

extern float nearbyintf(float);
extern double nearbyint(double);
extern long double nearbyintl(long double);

extern float rintf(float);
extern double rint(double);
extern long double rintl(long double);

extern long int lrintf(float);
extern long int lrint(double);
extern long int lrintl(long double);

extern float roundf(float);
extern double round(double);
extern long double roundl(long double);

extern long int lroundf(float);
extern long int lround(double);
extern long int lroundl(long double);




extern long long int llrintf(float);
extern long long int llrint(double);
extern long long int llrintl(long double);

extern long long int llroundf(float);
extern long long int llround(double);
extern long long int llroundl(long double);


extern float truncf(float);
extern double trunc(double);
extern long double truncl(long double);

extern float fmodf(float, float);
extern double fmod(double, double);
extern long double fmodl(long double, long double);

extern float remainderf(float, float);
extern double remainder(double, double);
extern long double remainderl(long double, long double);

extern float remquof(float, float, int *);
extern double remquo(double, double, int *);
extern long double remquol(long double, long double, int *);

extern float copysignf(float, float);
extern double copysign(double, double);
extern long double copysignl(long double, long double);

extern float nanf(const char *);
extern double nan(const char *);
extern long double nanl(const char *);

extern float nextafterf(float, float);
extern double nextafter(double, double);
extern long double nextafterl(long double, long double);

extern double nexttoward(double, long double);
extern float nexttowardf(float, long double);
extern long double nexttowardl(long double, long double);

extern float fdimf(float, float);
extern double fdim(double, double);
extern long double fdiml(long double, long double);

extern float fmaxf(float, float);
extern double fmax(double, double);
extern long double fmaxl(long double, long double);

extern float fminf(float, float);
extern double fmin(double, double);
extern long double fminl(long double, long double);

extern float fmaf(float, float, float);
extern double fma(double, double, double);
extern long double fmal(long double, long double, long double);
# 565 "/usr/include/math.h" 3 4
extern float __inff(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
extern double __inf(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
extern long double __infl(void) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));

extern float __nan(void) __attribute__((availability(macosx,introduced=10.0)));
# 597 "/usr/include/math.h" 3 4
extern float __exp10f(float) __attribute__((availability(macosx,introduced=10.9)));
extern double __exp10(double) __attribute__((availability(macosx,introduced=10.9)));





inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp);
inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp);
# 614 "/usr/include/math.h" 3 4
extern float __cospif(float) __attribute__((availability(macosx,introduced=10.9)));
extern double __cospi(double) __attribute__((availability(macosx,introduced=10.9)));
extern float __sinpif(float) __attribute__((availability(macosx,introduced=10.9)));
extern double __sinpi(double) __attribute__((availability(macosx,introduced=10.9)));
extern float __tanpif(float) __attribute__((availability(macosx,introduced=10.9)));
extern double __tanpi(double) __attribute__((availability(macosx,introduced=10.9)));
# 645 "/usr/include/math.h" 3 4
inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp);
inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp);






struct __float2 { float __sinval; float __cosval; };
struct __double2 { double __sinval; double __cosval; };

extern struct __float2 __sincosf_stret(float);
extern struct __double2 __sincos_stret(double);
extern struct __float2 __sincospif_stret(float);
extern struct __double2 __sincospi_stret(double);

inline __attribute__ ((__always_inline__)) void __sincosf(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincosf_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincos(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincos_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincospif(float __x, float *__sinp, float *__cosp) {
    const struct __float2 __stret = __sincospif_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}

inline __attribute__ ((__always_inline__)) void __sincospi(double __x, double *__sinp, double *__cosp) {
    const struct __double2 __stret = __sincospi_stret(__x);
    *__sinp = __stret.__sinval; *__cosp = __stret.__cosval;
}







extern double j0(double) __attribute__((availability(macosx,introduced=10.0)));
extern double j1(double) __attribute__((availability(macosx,introduced=10.0)));
extern double jn(int, double) __attribute__((availability(macosx,introduced=10.0)));
extern double y0(double) __attribute__((availability(macosx,introduced=10.0)));
extern double y1(double) __attribute__((availability(macosx,introduced=10.0)));
extern double yn(int, double) __attribute__((availability(macosx,introduced=10.0)));
extern double scalb(double, double);
extern int signgam;
# 751 "/usr/include/math.h" 3 4
extern long int rinttol(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));

extern long int roundtol(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));

extern double drem(double, double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));

extern int finite(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));

extern double gamma(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));

extern double significand(double) __attribute__((availability(macosx,introduced=10.0,deprecated=10.9)));
# 776 "/usr/include/math.h" 3 4
}
# 302 "/Library/Developer/CommandLineTools/usr/include/c++/v1/math.h" 2 3





extern "C++" {



# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/limits" 1 3
# 117 "/Library/Developer/CommandLineTools/usr/include/c++/v1/limits" 3



# 1 "/Library/Developer/CommandLineTools/usr/include/c++/v1/__undef_macros" 1 3
# 121 "/Library/Developer/CommandLineTools/usr/include/c++/v1/limits" 2 3


namespace std {inline namespace __1 {

enum float_round_style
{
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
};

enum float_denorm_style
{
    denorm_indeterminate = -1,
    denorm_absent = 0,
    denorm_present = 1
};

template <class _Tp, bool = is_arithmetic<_Tp>::value>
class __libcpp_numeric_limits
{
protected:
    typedef _Tp type;

    static const bool is_specialized = false;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type min() throw() {return type();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type max() throw() {return type();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type lowest() throw() {return type();}

    static const int digits = 0;
    static const int digits10 = 0;
    static const int max_digits10 = 0;
    static const bool is_signed = false;
    static const bool is_integer = false;
    static const bool is_exact = false;
    static const int radix = 0;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type epsilon() throw() {return type();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type round_error() throw() {return type();}

    static const int min_exponent = 0;
    static const int min_exponent10 = 0;
    static const int max_exponent = 0;
    static const int max_exponent10 = 0;

    static const bool has_infinity = false;
    static const bool has_quiet_NaN = false;
    static const bool has_signaling_NaN = false;
    static const float_denorm_style has_denorm = denorm_absent;
    static const bool has_denorm_loss = false;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type infinity() throw() {return type();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type quiet_NaN() throw() {return type();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type signaling_NaN() throw() {return type();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type denorm_min() throw() {return type();}

    static const bool is_iec559 = false;
    static const bool is_bounded = false;
    static const bool is_modulo = false;

    static const bool traps = false;
    static const bool tinyness_before = false;
    static const float_round_style round_style = round_toward_zero;
};

template <class _Tp, int __digits, bool _IsSigned>
struct __libcpp_compute_min
{
    static const _Tp value = _Tp(_Tp(1) << __digits);
};

template <class _Tp, int __digits>
struct __libcpp_compute_min<_Tp, __digits, false>
{
    static const _Tp value = _Tp(0);
};

template <class _Tp>
class __libcpp_numeric_limits<_Tp, true>
{
protected:
    typedef _Tp type;

    static const bool is_specialized = true;

    static const bool is_signed = type(-1) < type(0);
    static const int digits = static_cast<int>(sizeof(type) * 8 - is_signed);
    static const int digits10 = digits * 3 / 10;
    static const int max_digits10 = 0;
    static const type __min = __libcpp_compute_min<type, digits, is_signed>::value;
    static const type __max = is_signed ? type(type(~0) ^ __min) : type(~0);
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type min() throw() {return __min;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type max() throw() {return __max;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type lowest() throw() {return min();}

    static const bool is_integer = true;
    static const bool is_exact = true;
    static const int radix = 2;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type epsilon() throw() {return type(0);}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type round_error() throw() {return type(0);}

    static const int min_exponent = 0;
    static const int min_exponent10 = 0;
    static const int max_exponent = 0;
    static const int max_exponent10 = 0;

    static const bool has_infinity = false;
    static const bool has_quiet_NaN = false;
    static const bool has_signaling_NaN = false;
    static const float_denorm_style has_denorm = denorm_absent;
    static const bool has_denorm_loss = false;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type infinity() throw() {return type(0);}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type quiet_NaN() throw() {return type(0);}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type signaling_NaN() throw() {return type(0);}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type denorm_min() throw() {return type(0);}

    static const bool is_iec559 = false;
    static const bool is_bounded = true;
    static const bool is_modulo = !std::__1::is_signed<_Tp>::value;



    static const bool traps = true;



    static const bool tinyness_before = false;
    static const float_round_style round_style = round_toward_zero;
};

template <>
class __libcpp_numeric_limits<bool, true>
{
protected:
    typedef bool type;

    static const bool is_specialized = true;

    static const bool is_signed = false;
    static const int digits = 1;
    static const int digits10 = 0;
    static const int max_digits10 = 0;
    static const type __min = false;
    static const type __max = true;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type min() throw() {return __min;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type max() throw() {return __max;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type lowest() throw() {return min();}

    static const bool is_integer = true;
    static const bool is_exact = true;
    static const int radix = 2;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type epsilon() throw() {return type(0);}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type round_error() throw() {return type(0);}

    static const int min_exponent = 0;
    static const int min_exponent10 = 0;
    static const int max_exponent = 0;
    static const int max_exponent10 = 0;

    static const bool has_infinity = false;
    static const bool has_quiet_NaN = false;
    static const bool has_signaling_NaN = false;
    static const float_denorm_style has_denorm = denorm_absent;
    static const bool has_denorm_loss = false;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type infinity() throw() {return type(0);}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type quiet_NaN() throw() {return type(0);}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type signaling_NaN() throw() {return type(0);}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type denorm_min() throw() {return type(0);}

    static const bool is_iec559 = false;
    static const bool is_bounded = true;
    static const bool is_modulo = false;

    static const bool traps = false;
    static const bool tinyness_before = false;
    static const float_round_style round_style = round_toward_zero;
};

template <>
class __libcpp_numeric_limits<float, true>
{
protected:
    typedef float type;

    static const bool is_specialized = true;

    static const bool is_signed = true;
    static const int digits = 24;
    static const int digits10 = 6;
    static const int max_digits10 = 2+(digits * 30103l)/100000l;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type min() throw() {return 1.17549435e-38F;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type max() throw() {return 3.40282347e+38F;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type lowest() throw() {return -max();}

    static const bool is_integer = false;
    static const bool is_exact = false;
    static const int radix = 2;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type epsilon() throw() {return 1.19209290e-7F;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type round_error() throw() {return 0.5F;}

    static const int min_exponent = (-125);
    static const int min_exponent10 = (-37);
    static const int max_exponent = 128;
    static const int max_exponent10 = 38;

    static const bool has_infinity = true;
    static const bool has_quiet_NaN = true;
    static const bool has_signaling_NaN = true;
    static const float_denorm_style has_denorm = denorm_present;
    static const bool has_denorm_loss = false;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type infinity() throw() {return __builtin_huge_valf();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type quiet_NaN() throw() {return __builtin_nanf("");}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type signaling_NaN() throw() {return __builtin_nansf("");}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type denorm_min() throw() {return 1.40129846e-45F;}

    static const bool is_iec559 = true;
    static const bool is_bounded = true;
    static const bool is_modulo = false;

    static const bool traps = false;
    static const bool tinyness_before = false;
    static const float_round_style round_style = round_to_nearest;
};

template <>
class __libcpp_numeric_limits<double, true>
{
protected:
    typedef double type;

    static const bool is_specialized = true;

    static const bool is_signed = true;
    static const int digits = 53;
    static const int digits10 = 15;
    static const int max_digits10 = 2+(digits * 30103l)/100000l;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type min() throw() {return 2.2250738585072014e-308;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type max() throw() {return 1.7976931348623157e+308;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type lowest() throw() {return -max();}

    static const bool is_integer = false;
    static const bool is_exact = false;
    static const int radix = 2;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type epsilon() throw() {return 2.2204460492503131e-16;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type round_error() throw() {return 0.5;}

    static const int min_exponent = (-1021);
    static const int min_exponent10 = (-307);
    static const int max_exponent = 1024;
    static const int max_exponent10 = 308;

    static const bool has_infinity = true;
    static const bool has_quiet_NaN = true;
    static const bool has_signaling_NaN = true;
    static const float_denorm_style has_denorm = denorm_present;
    static const bool has_denorm_loss = false;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type infinity() throw() {return __builtin_huge_val();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type quiet_NaN() throw() {return __builtin_nan("");}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type signaling_NaN() throw() {return __builtin_nans("");}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type denorm_min() throw() {return 4.9406564584124654e-324;}

    static const bool is_iec559 = true;
    static const bool is_bounded = true;
    static const bool is_modulo = false;

    static const bool traps = false;
    static const bool tinyness_before = false;
    static const float_round_style round_style = round_to_nearest;
};

template <>
class __libcpp_numeric_limits<long double, true>
{
protected:
    typedef long double type;

    static const bool is_specialized = true;

    static const bool is_signed = true;
    static const int digits = 64;
    static const int digits10 = 18;
    static const int max_digits10 = 2+(digits * 30103l)/100000l;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type min() throw() {return 3.36210314311209350626e-4932L;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type max() throw() {return 1.18973149535723176502e+4932L;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type lowest() throw() {return -max();}

    static const bool is_integer = false;
    static const bool is_exact = false;
    static const int radix = 2;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type epsilon() throw() {return 1.08420217248550443401e-19L;}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type round_error() throw() {return 0.5;}

    static const int min_exponent = (-16381);
    static const int min_exponent10 = (-4931);
    static const int max_exponent = 16384;
    static const int max_exponent10 = 4932;

    static const bool has_infinity = true;
    static const bool has_quiet_NaN = true;
    static const bool has_signaling_NaN = true;
    static const float_denorm_style has_denorm = denorm_present;
    static const bool has_denorm_loss = false;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type infinity() throw() {return __builtin_huge_vall();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type quiet_NaN() throw() {return __builtin_nanl("");}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type signaling_NaN() throw() {return __builtin_nansl("");}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type denorm_min() throw() {return 3.64519953188247460253e-4951L;}




    static const bool is_iec559 = true;

    static const bool is_bounded = true;
    static const bool is_modulo = false;

    static const bool traps = false;
    static const bool tinyness_before = false;
    static const float_round_style round_style = round_to_nearest;
};

template <class _Tp>
class __attribute__ ((__type_visibility__("default"))) numeric_limits
    : private __libcpp_numeric_limits<typename remove_cv<_Tp>::type>
{
    typedef __libcpp_numeric_limits<typename remove_cv<_Tp>::type> __base;
    typedef typename __base::type type;
public:
    static const bool is_specialized = __base::is_specialized;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type min() throw() {return __base::min();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type max() throw() {return __base::max();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type lowest() throw() {return __base::lowest();}

    static const int digits = __base::digits;
    static const int digits10 = __base::digits10;
    static const int max_digits10 = __base::max_digits10;
    static const bool is_signed = __base::is_signed;
    static const bool is_integer = __base::is_integer;
    static const bool is_exact = __base::is_exact;
    static const int radix = __base::radix;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type epsilon() throw() {return __base::epsilon();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type round_error() throw() {return __base::round_error();}

    static const int min_exponent = __base::min_exponent;
    static const int min_exponent10 = __base::min_exponent10;
    static const int max_exponent = __base::max_exponent;
    static const int max_exponent10 = __base::max_exponent10;

    static const bool has_infinity = __base::has_infinity;
    static const bool has_quiet_NaN = __base::has_quiet_NaN;
    static const bool has_signaling_NaN = __base::has_signaling_NaN;
    static const float_denorm_style has_denorm = __base::has_denorm;
    static const bool has_denorm_loss = __base::has_denorm_loss;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type infinity() throw() {return __base::infinity();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type quiet_NaN() throw() {return __base::quiet_NaN();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type signaling_NaN() throw() {return __base::signaling_NaN();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type denorm_min() throw() {return __base::denorm_min();}

    static const bool is_iec559 = __base::is_iec559;
    static const bool is_bounded = __base::is_bounded;
    static const bool is_modulo = __base::is_modulo;

    static const bool traps = __base::traps;
    static const bool tinyness_before = __base::tinyness_before;
    static const float_round_style round_style = __base::round_style;
};

template <class _Tp>
                      const bool numeric_limits<_Tp>::is_specialized;
template <class _Tp>
                      const int numeric_limits<_Tp>::digits;
template <class _Tp>
                      const int numeric_limits<_Tp>::digits10;
template <class _Tp>
                      const int numeric_limits<_Tp>::max_digits10;
template <class _Tp>
                      const bool numeric_limits<_Tp>::is_signed;
template <class _Tp>
                      const bool numeric_limits<_Tp>::is_integer;
template <class _Tp>
                      const bool numeric_limits<_Tp>::is_exact;
template <class _Tp>
                      const int numeric_limits<_Tp>::radix;
template <class _Tp>
                      const int numeric_limits<_Tp>::min_exponent;
template <class _Tp>
                      const int numeric_limits<_Tp>::min_exponent10;
template <class _Tp>
                      const int numeric_limits<_Tp>::max_exponent;
template <class _Tp>
                      const int numeric_limits<_Tp>::max_exponent10;
template <class _Tp>
                      const bool numeric_limits<_Tp>::has_infinity;
template <class _Tp>
                      const bool numeric_limits<_Tp>::has_quiet_NaN;
template <class _Tp>
                      const bool numeric_limits<_Tp>::has_signaling_NaN;
template <class _Tp>
                      const float_denorm_style numeric_limits<_Tp>::has_denorm;
template <class _Tp>
                      const bool numeric_limits<_Tp>::has_denorm_loss;
template <class _Tp>
                      const bool numeric_limits<_Tp>::is_iec559;
template <class _Tp>
                      const bool numeric_limits<_Tp>::is_bounded;
template <class _Tp>
                      const bool numeric_limits<_Tp>::is_modulo;
template <class _Tp>
                      const bool numeric_limits<_Tp>::traps;
template <class _Tp>
                      const bool numeric_limits<_Tp>::tinyness_before;
template <class _Tp>
                      const float_round_style numeric_limits<_Tp>::round_style;

template <class _Tp>
class __attribute__ ((__type_visibility__("default"))) numeric_limits<const _Tp>
    : private numeric_limits<_Tp>
{
    typedef numeric_limits<_Tp> __base;
    typedef _Tp type;
public:
    static const bool is_specialized = __base::is_specialized;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type min() throw() {return __base::min();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type max() throw() {return __base::max();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type lowest() throw() {return __base::lowest();}

    static const int digits = __base::digits;
    static const int digits10 = __base::digits10;
    static const int max_digits10 = __base::max_digits10;
    static const bool is_signed = __base::is_signed;
    static const bool is_integer = __base::is_integer;
    static const bool is_exact = __base::is_exact;
    static const int radix = __base::radix;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type epsilon() throw() {return __base::epsilon();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type round_error() throw() {return __base::round_error();}

    static const int min_exponent = __base::min_exponent;
    static const int min_exponent10 = __base::min_exponent10;
    static const int max_exponent = __base::max_exponent;
    static const int max_exponent10 = __base::max_exponent10;

    static const bool has_infinity = __base::has_infinity;
    static const bool has_quiet_NaN = __base::has_quiet_NaN;
    static const bool has_signaling_NaN = __base::has_signaling_NaN;
    static const float_denorm_style has_denorm = __base::has_denorm;
    static const bool has_denorm_loss = __base::has_denorm_loss;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type infinity() throw() {return __base::infinity();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type quiet_NaN() throw() {return __base::quiet_NaN();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type signaling_NaN() throw() {return __base::signaling_NaN();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type denorm_min() throw() {return __base::denorm_min();}

    static const bool is_iec559 = __base::is_iec559;
    static const bool is_bounded = __base::is_bounded;
    static const bool is_modulo = __base::is_modulo;

    static const bool traps = __base::traps;
    static const bool tinyness_before = __base::tinyness_before;
    static const float_round_style round_style = __base::round_style;
};

template <class _Tp>
                      const bool numeric_limits<const _Tp>::is_specialized;
template <class _Tp>
                      const int numeric_limits<const _Tp>::digits;
template <class _Tp>
                      const int numeric_limits<const _Tp>::digits10;
template <class _Tp>
                      const int numeric_limits<const _Tp>::max_digits10;
template <class _Tp>
                      const bool numeric_limits<const _Tp>::is_signed;
template <class _Tp>
                      const bool numeric_limits<const _Tp>::is_integer;
template <class _Tp>
                      const bool numeric_limits<const _Tp>::is_exact;
template <class _Tp>
                      const int numeric_limits<const _Tp>::radix;
template <class _Tp>
                      const int numeric_limits<const _Tp>::min_exponent;
template <class _Tp>
                      const int numeric_limits<const _Tp>::min_exponent10;
template <class _Tp>
                      const int numeric_limits<const _Tp>::max_exponent;
template <class _Tp>
                      const int numeric_limits<const _Tp>::max_exponent10;
template <class _Tp>
                      const bool numeric_limits<const _Tp>::has_infinity;
template <class _Tp>
                      const bool numeric_limits<const _Tp>::has_quiet_NaN;
template <class _Tp>
                      const bool numeric_limits<const _Tp>::has_signaling_NaN;
template <class _Tp>
                      const float_denorm_style numeric_limits<const _Tp>::has_denorm;
template <class _Tp>
                      const bool numeric_limits<const _Tp>::has_denorm_loss;
template <class _Tp>
                      const bool numeric_limits<const _Tp>::is_iec559;
template <class _Tp>
                      const bool numeric_limits<const _Tp>::is_bounded;
template <class _Tp>
                      const bool numeric_limits<const _Tp>::is_modulo;
template <class _Tp>
                      const bool numeric_limits<const _Tp>::traps;
template <class _Tp>
                      const bool numeric_limits<const _Tp>::tinyness_before;
template <class _Tp>
                      const float_round_style numeric_limits<const _Tp>::round_style;

template <class _Tp>
class __attribute__ ((__type_visibility__("default"))) numeric_limits<volatile _Tp>
    : private numeric_limits<_Tp>
{
    typedef numeric_limits<_Tp> __base;
    typedef _Tp type;
public:
    static const bool is_specialized = __base::is_specialized;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type min() throw() {return __base::min();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type max() throw() {return __base::max();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type lowest() throw() {return __base::lowest();}

    static const int digits = __base::digits;
    static const int digits10 = __base::digits10;
    static const int max_digits10 = __base::max_digits10;
    static const bool is_signed = __base::is_signed;
    static const bool is_integer = __base::is_integer;
    static const bool is_exact = __base::is_exact;
    static const int radix = __base::radix;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type epsilon() throw() {return __base::epsilon();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type round_error() throw() {return __base::round_error();}

    static const int min_exponent = __base::min_exponent;
    static const int min_exponent10 = __base::min_exponent10;
    static const int max_exponent = __base::max_exponent;
    static const int max_exponent10 = __base::max_exponent10;

    static const bool has_infinity = __base::has_infinity;
    static const bool has_quiet_NaN = __base::has_quiet_NaN;
    static const bool has_signaling_NaN = __base::has_signaling_NaN;
    static const float_denorm_style has_denorm = __base::has_denorm;
    static const bool has_denorm_loss = __base::has_denorm_loss;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type infinity() throw() {return __base::infinity();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type quiet_NaN() throw() {return __base::quiet_NaN();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type signaling_NaN() throw() {return __base::signaling_NaN();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type denorm_min() throw() {return __base::denorm_min();}

    static const bool is_iec559 = __base::is_iec559;
    static const bool is_bounded = __base::is_bounded;
    static const bool is_modulo = __base::is_modulo;

    static const bool traps = __base::traps;
    static const bool tinyness_before = __base::tinyness_before;
    static const float_round_style round_style = __base::round_style;
};

template <class _Tp>
                      const bool numeric_limits<volatile _Tp>::is_specialized;
template <class _Tp>
                      const int numeric_limits<volatile _Tp>::digits;
template <class _Tp>
                      const int numeric_limits<volatile _Tp>::digits10;
template <class _Tp>
                      const int numeric_limits<volatile _Tp>::max_digits10;
template <class _Tp>
                      const bool numeric_limits<volatile _Tp>::is_signed;
template <class _Tp>
                      const bool numeric_limits<volatile _Tp>::is_integer;
template <class _Tp>
                      const bool numeric_limits<volatile _Tp>::is_exact;
template <class _Tp>
                      const int numeric_limits<volatile _Tp>::radix;
template <class _Tp>
                      const int numeric_limits<volatile _Tp>::min_exponent;
template <class _Tp>
                      const int numeric_limits<volatile _Tp>::min_exponent10;
template <class _Tp>
                      const int numeric_limits<volatile _Tp>::max_exponent;
template <class _Tp>
                      const int numeric_limits<volatile _Tp>::max_exponent10;
template <class _Tp>
                      const bool numeric_limits<volatile _Tp>::has_infinity;
template <class _Tp>
                      const bool numeric_limits<volatile _Tp>::has_quiet_NaN;
template <class _Tp>
                      const bool numeric_limits<volatile _Tp>::has_signaling_NaN;
template <class _Tp>
                      const float_denorm_style numeric_limits<volatile _Tp>::has_denorm;
template <class _Tp>
                      const bool numeric_limits<volatile _Tp>::has_denorm_loss;
template <class _Tp>
                      const bool numeric_limits<volatile _Tp>::is_iec559;
template <class _Tp>
                      const bool numeric_limits<volatile _Tp>::is_bounded;
template <class _Tp>
                      const bool numeric_limits<volatile _Tp>::is_modulo;
template <class _Tp>
                      const bool numeric_limits<volatile _Tp>::traps;
template <class _Tp>
                      const bool numeric_limits<volatile _Tp>::tinyness_before;
template <class _Tp>
                      const float_round_style numeric_limits<volatile _Tp>::round_style;

template <class _Tp>
class __attribute__ ((__type_visibility__("default"))) numeric_limits<const volatile _Tp>
    : private numeric_limits<_Tp>
{
    typedef numeric_limits<_Tp> __base;
    typedef _Tp type;
public:
    static const bool is_specialized = __base::is_specialized;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type min() throw() {return __base::min();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type max() throw() {return __base::max();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type lowest() throw() {return __base::lowest();}

    static const int digits = __base::digits;
    static const int digits10 = __base::digits10;
    static const int max_digits10 = __base::max_digits10;
    static const bool is_signed = __base::is_signed;
    static const bool is_integer = __base::is_integer;
    static const bool is_exact = __base::is_exact;
    static const int radix = __base::radix;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type epsilon() throw() {return __base::epsilon();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type round_error() throw() {return __base::round_error();}

    static const int min_exponent = __base::min_exponent;
    static const int min_exponent10 = __base::min_exponent10;
    static const int max_exponent = __base::max_exponent;
    static const int max_exponent10 = __base::max_exponent10;

    static const bool has_infinity = __base::has_infinity;
    static const bool has_quiet_NaN = __base::has_quiet_NaN;
    static const bool has_signaling_NaN = __base::has_signaling_NaN;
    static const float_denorm_style has_denorm = __base::has_denorm;
    static const bool has_denorm_loss = __base::has_denorm_loss;
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type infinity() throw() {return __base::infinity();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type quiet_NaN() throw() {return __base::quiet_NaN();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type signaling_NaN() throw() {return __base::signaling_NaN();}
    __attribute__ ((__visibility__("hidden"), __always_inline__)) static type denorm_min() throw() {return __base::denorm_min();}

    static const bool is_iec559 = __base::is_iec559;
    static const bool is_bounded = __base::is_bounded;
    static const bool is_modulo = __base::is_modulo;

    static const bool traps = __base::traps;
    static const bool tinyness_before = __base::tinyness_before;
    static const float_round_style round_style = __base::round_style;
};

template <class _Tp>
                      const bool numeric_limits<const volatile _Tp>::is_specialized;
template <class _Tp>
                      const int numeric_limits<const volatile _Tp>::digits;
template <class _Tp>
                      const int numeric_limits<const volatile _Tp>::digits10;
template <class _Tp>
                      const int numeric_limits<const volatile _Tp>::max_digits10;
template <class _Tp>
                      const bool numeric_limits<const volatile _Tp>::is_signed;
template <class _Tp>
                      const bool numeric_limits<const volatile _Tp>::is_integer;
template <class _Tp>
                      const bool numeric_limits<const volatile _Tp>::is_exact;
template <class _Tp>
                      const int numeric_limits<const volatile _Tp>::radix;
template <class _Tp>
                      const int numeric_limits<const volatile _Tp>::min_exponent;
template <class _Tp>
                      const int numeric_limits<const volatile _Tp>::min_exponent10;
template <class _Tp>
                      const int numeric_limits<const volatile _Tp>::max_exponent;
template <class _Tp>
                      const int numeric_limits<const volatile _Tp>::max_exponent10;
template <class _Tp>
                      const bool numeric_limits<const volatile _Tp>::has_infinity;
template <class _Tp>
                      const bool numeric_limits<const volatile _Tp>::has_quiet_NaN;
template <class _Tp>
                      const bool numeric_limits<const volatile _Tp>::has_signaling_NaN;
template <class _Tp>
                      const float_denorm_style numeric_limits<const volatile _Tp>::has_denorm;
template <class _Tp>
                      const bool numeric_limits<const volatile _Tp>::has_denorm_loss;
template <class _Tp>
                      const bool numeric_limits<const volatile _Tp>::is_iec559;
template <class _Tp>
                      const bool numeric_limits<const volatile _Tp>::is_bounded;
template <class _Tp>
                      const bool numeric_limits<const volatile _Tp>::is_modulo;
template <class _Tp>
                      const bool numeric_limits<const volatile _Tp>::traps;
template <class _Tp>
                      const bool numeric_limits<const volatile _Tp>::tinyness_before;
template <class _Tp>
                      const float_round_style numeric_limits<const volatile _Tp>::round_style;

} }
# 311 "/Library/Developer/CommandLineTools/usr/include/c++/v1/math.h" 2 3





template <class _A1>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
__libcpp_signbit(_A1 __lcpp_x) throw()
{
    return ( sizeof(__lcpp_x) == sizeof(float) ? __inline_signbitf((float)(__lcpp_x)) : sizeof(__lcpp_x) == sizeof(double) ? __inline_signbitd((double)(__lcpp_x)) : __inline_signbitl((long double)(__lcpp_x)));
}



template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_floating_point<_A1>::value, bool>::type
signbit(_A1 __lcpp_x) throw()
{
    return __libcpp_signbit((typename std::__promote<_A1>::type)__lcpp_x);
}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<
    std::is_integral<_A1>::value && std::is_signed<_A1>::value, bool>::type
signbit(_A1 __lcpp_x) throw()
{ return __lcpp_x < 0; }

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<
    std::is_integral<_A1>::value && !std::is_signed<_A1>::value, bool>::type
signbit(_A1) throw()
{ return false; }
# 378 "/Library/Developer/CommandLineTools/usr/include/c++/v1/math.h" 3
template <class _A1>
__attribute__ ((__visibility__("hidden"), __always_inline__))
int
__libcpp_fpclassify(_A1 __lcpp_x) throw()
{
    return ( sizeof(__lcpp_x) == sizeof(float) ? __fpclassifyf((float)(__lcpp_x)) : sizeof(__lcpp_x) == sizeof(double) ? __fpclassifyd((double)(__lcpp_x)) : __fpclassifyl((long double)(__lcpp_x)));
}



template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_floating_point<_A1>::value, int>::type
fpclassify(_A1 __lcpp_x) throw()
{
    return __libcpp_fpclassify((typename std::__promote<_A1>::type)__lcpp_x);
}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, int>::type
fpclassify(_A1 __lcpp_x) throw()
{ return __lcpp_x == 0 ? 3 : 4; }
# 424 "/Library/Developer/CommandLineTools/usr/include/c++/v1/math.h" 3
template <class _A1>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
__libcpp_isfinite(_A1 __lcpp_x) throw()
{
    return ( sizeof(__lcpp_x) == sizeof(float) ? __inline_isfinitef((float)(__lcpp_x)) : sizeof(__lcpp_x) == sizeof(double) ? __inline_isfinited((double)(__lcpp_x)) : __inline_isfinitel((long double)(__lcpp_x)));
}



template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<
    std::is_arithmetic<_A1>::value && std::numeric_limits<_A1>::has_infinity,
    bool>::type
isfinite(_A1 __lcpp_x) throw()
{
    return __libcpp_isfinite((typename std::__promote<_A1>::type)__lcpp_x);
}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<
    std::is_arithmetic<_A1>::value && !std::numeric_limits<_A1>::has_infinity,
    bool>::type
isfinite(_A1) throw()
{ return true; }







template <class _A1>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
__libcpp_isinf(_A1 __lcpp_x) throw()
{
    return ( sizeof(__lcpp_x) == sizeof(float) ? __inline_isinff((float)(__lcpp_x)) : sizeof(__lcpp_x) == sizeof(double) ? __inline_isinfd((double)(__lcpp_x)) : __inline_isinfl((long double)(__lcpp_x)));
}



template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<
    std::is_arithmetic<_A1>::value && std::numeric_limits<_A1>::has_infinity,
    bool>::type
isinf(_A1 __lcpp_x) throw()
{
    return __libcpp_isinf((typename std::__promote<_A1>::type)__lcpp_x);
}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<
    std::is_arithmetic<_A1>::value && !std::numeric_limits<_A1>::has_infinity,
    bool>::type
isinf(_A1) throw()
{ return false; }







template <class _A1>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
__libcpp_isnan(_A1 __lcpp_x) throw()
{
    return ( sizeof(__lcpp_x) == sizeof(float) ? __inline_isnanf((float)(__lcpp_x)) : sizeof(__lcpp_x) == sizeof(double) ? __inline_isnand((double)(__lcpp_x)) : __inline_isnanl((long double)(__lcpp_x)));
}



template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_floating_point<_A1>::value, bool>::type
isnan(_A1 __lcpp_x) throw()
{
    return __libcpp_isnan((typename std::__promote<_A1>::type)__lcpp_x);
}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, bool>::type
isnan(_A1) throw()
{ return false; }







template <class _A1>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
__libcpp_isnormal(_A1 __lcpp_x) throw()
{
    return ( sizeof(__lcpp_x) == sizeof(float) ? __inline_isnormalf((float)(__lcpp_x)) : sizeof(__lcpp_x) == sizeof(double) ? __inline_isnormald((double)(__lcpp_x)) : __inline_isnormall((long double)(__lcpp_x)));
}



template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_floating_point<_A1>::value, bool>::type
isnormal(_A1 __lcpp_x) throw()
{
    return __libcpp_isnormal((typename std::__promote<_A1>::type)__lcpp_x);
}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, bool>::type
isnormal(_A1 __lcpp_x) throw()
{ return __lcpp_x != 0; }







template <class _A1, class _A2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
__libcpp_isgreater(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    return __builtin_isgreater((__lcpp_x),(__lcpp_y));
}



template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    bool
>::type
isgreater(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type type;
    return __libcpp_isgreater((type)__lcpp_x, (type)__lcpp_y);
}







template <class _A1, class _A2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
__libcpp_isgreaterequal(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    return __builtin_isgreaterequal((__lcpp_x),(__lcpp_y));
}



template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    bool
>::type
isgreaterequal(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type type;
    return __libcpp_isgreaterequal((type)__lcpp_x, (type)__lcpp_y);
}







template <class _A1, class _A2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
__libcpp_isless(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    return __builtin_isless((__lcpp_x),(__lcpp_y));
}



template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    bool
>::type
isless(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type type;
    return __libcpp_isless((type)__lcpp_x, (type)__lcpp_y);
}







template <class _A1, class _A2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
__libcpp_islessequal(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    return __builtin_islessequal((__lcpp_x),(__lcpp_y));
}



template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    bool
>::type
islessequal(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type type;
    return __libcpp_islessequal((type)__lcpp_x, (type)__lcpp_y);
}







template <class _A1, class _A2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
__libcpp_islessgreater(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    return __builtin_islessgreater((__lcpp_x),(__lcpp_y));
}



template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    bool
>::type
islessgreater(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type type;
    return __libcpp_islessgreater((type)__lcpp_x, (type)__lcpp_y);
}







template <class _A1, class _A2>
__attribute__ ((__visibility__("hidden"), __always_inline__))
bool
__libcpp_isunordered(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    return __builtin_isunordered((__lcpp_x),(__lcpp_y));
}



template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    bool
>::type
isunordered(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type type;
    return __libcpp_isunordered((type)__lcpp_x, (type)__lcpp_y);
}






inline __attribute__ ((__visibility__("hidden"), __always_inline__))
float
abs(float __lcpp_x) throw() {return ::fabsf(__lcpp_x);}

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
double
abs(double __lcpp_x) throw() {return ::fabs(__lcpp_x);}

inline __attribute__ ((__visibility__("hidden"), __always_inline__))
long double
abs(long double __lcpp_x) throw() {return ::fabsl(__lcpp_x);}





inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float acos(float __lcpp_x) throw() {return ::acosf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double acos(long double __lcpp_x) throw() {return ::acosl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
acos(_A1 __lcpp_x) throw() {return ::acos((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float asin(float __lcpp_x) throw() {return ::asinf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double asin(long double __lcpp_x) throw() {return ::asinl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
asin(_A1 __lcpp_x) throw() {return ::asin((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float atan(float __lcpp_x) throw() {return ::atanf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double atan(long double __lcpp_x) throw() {return ::atanl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
atan(_A1 __lcpp_x) throw() {return ::atan((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float atan2(float __lcpp_y, float __lcpp_x) throw() {return ::atan2f(__lcpp_y, __lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double atan2(long double __lcpp_y, long double __lcpp_x) throw() {return ::atan2l(__lcpp_y, __lcpp_x);}


template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::__lazy_enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    std::__promote<_A1, _A2>
>::type
atan2(_A1 __lcpp_y, _A2 __lcpp_x) throw()
{
    typedef typename std::__promote<_A1, _A2>::type __result_type;
    _Static_assert((!(std::is_same<_A1, __result_type>::value && std::is_same<_A2, __result_type>::value)), "");

    return ::atan2((__result_type)__lcpp_y, (__result_type)__lcpp_x);
}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float ceil(float __lcpp_x) throw() {return ::ceilf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double ceil(long double __lcpp_x) throw() {return ::ceill(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
ceil(_A1 __lcpp_x) throw() {return ::ceil((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float cos(float __lcpp_x) throw() {return ::cosf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double cos(long double __lcpp_x) throw() {return ::cosl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
cos(_A1 __lcpp_x) throw() {return ::cos((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float cosh(float __lcpp_x) throw() {return ::coshf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double cosh(long double __lcpp_x) throw() {return ::coshl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
cosh(_A1 __lcpp_x) throw() {return ::cosh((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float exp(float __lcpp_x) throw() {return ::expf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double exp(long double __lcpp_x) throw() {return ::expl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
exp(_A1 __lcpp_x) throw() {return ::exp((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float fabs(float __lcpp_x) throw() {return ::fabsf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double fabs(long double __lcpp_x) throw() {return ::fabsl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
fabs(_A1 __lcpp_x) throw() {return ::fabs((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float floor(float __lcpp_x) throw() {return ::floorf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double floor(long double __lcpp_x) throw() {return ::floorl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
floor(_A1 __lcpp_x) throw() {return ::floor((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float fmod(float __lcpp_x, float __lcpp_y) throw() {return ::fmodf(__lcpp_x, __lcpp_y);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double fmod(long double __lcpp_x, long double __lcpp_y) throw() {return ::fmodl(__lcpp_x, __lcpp_y);}


template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::__lazy_enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    std::__promote<_A1, _A2>
>::type
fmod(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type __result_type;
    _Static_assert((!(std::is_same<_A1, __result_type>::value && std::is_same<_A2, __result_type>::value)), "");

    return ::fmod((__result_type)__lcpp_x, (__result_type)__lcpp_y);
}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float frexp(float __lcpp_x, int* __lcpp_e) throw() {return ::frexpf(__lcpp_x, __lcpp_e);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double frexp(long double __lcpp_x, int* __lcpp_e) throw() {return ::frexpl(__lcpp_x, __lcpp_e);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
frexp(_A1 __lcpp_x, int* __lcpp_e) throw() {return ::frexp((double)__lcpp_x, __lcpp_e);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float ldexp(float __lcpp_x, int __lcpp_e) throw() {return ::ldexpf(__lcpp_x, __lcpp_e);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double ldexp(long double __lcpp_x, int __lcpp_e) throw() {return ::ldexpl(__lcpp_x, __lcpp_e);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
ldexp(_A1 __lcpp_x, int __lcpp_e) throw() {return ::ldexp((double)__lcpp_x, __lcpp_e);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float log(float __lcpp_x) throw() {return ::logf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double log(long double __lcpp_x) throw() {return ::logl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
log(_A1 __lcpp_x) throw() {return ::log((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float log10(float __lcpp_x) throw() {return ::log10f(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double log10(long double __lcpp_x) throw() {return ::log10l(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
log10(_A1 __lcpp_x) throw() {return ::log10((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float modf(float __lcpp_x, float* __lcpp_y) throw() {return ::modff(__lcpp_x, __lcpp_y);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double modf(long double __lcpp_x, long double* __lcpp_y) throw() {return ::modfl(__lcpp_x, __lcpp_y);}





inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float pow(float __lcpp_x, float __lcpp_y) throw() {return ::powf(__lcpp_x, __lcpp_y);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double pow(long double __lcpp_x, long double __lcpp_y) throw() {return ::powl(__lcpp_x, __lcpp_y);}


template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::__lazy_enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    std::__promote<_A1, _A2>
>::type
pow(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type __result_type;
    _Static_assert((!(std::is_same<_A1, __result_type>::value && std::is_same<_A2, __result_type>::value)), "");

    return ::pow((__result_type)__lcpp_x, (__result_type)__lcpp_y);
}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float sin(float __lcpp_x) throw() {return ::sinf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double sin(long double __lcpp_x) throw() {return ::sinl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
sin(_A1 __lcpp_x) throw() {return ::sin((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float sinh(float __lcpp_x) throw() {return ::sinhf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double sinh(long double __lcpp_x) throw() {return ::sinhl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
sinh(_A1 __lcpp_x) throw() {return ::sinh((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float sqrt(float __lcpp_x) throw() {return ::sqrtf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double sqrt(long double __lcpp_x) throw() {return ::sqrtl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
sqrt(_A1 __lcpp_x) throw() {return ::sqrt((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float tan(float __lcpp_x) throw() {return ::tanf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double tan(long double __lcpp_x) throw() {return ::tanl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
tan(_A1 __lcpp_x) throw() {return ::tan((double)__lcpp_x);}




inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float tanh(float __lcpp_x) throw() {return ::tanhf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double tanh(long double __lcpp_x) throw() {return ::tanhl(__lcpp_x);}


template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
tanh(_A1 __lcpp_x) throw() {return ::tanh((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float acosh(float __lcpp_x) throw() {return ::acoshf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double acosh(long double __lcpp_x) throw() {return ::acoshl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
acosh(_A1 __lcpp_x) throw() {return ::acosh((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float asinh(float __lcpp_x) throw() {return ::asinhf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double asinh(long double __lcpp_x) throw() {return ::asinhl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
asinh(_A1 __lcpp_x) throw() {return ::asinh((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float atanh(float __lcpp_x) throw() {return ::atanhf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double atanh(long double __lcpp_x) throw() {return ::atanhl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
atanh(_A1 __lcpp_x) throw() {return ::atanh((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float cbrt(float __lcpp_x) throw() {return ::cbrtf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double cbrt(long double __lcpp_x) throw() {return ::cbrtl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
cbrt(_A1 __lcpp_x) throw() {return ::cbrt((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float copysign(float __lcpp_x,
                                                float __lcpp_y) throw() {
  return ::copysignf(__lcpp_x, __lcpp_y);
}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double
copysign(long double __lcpp_x, long double __lcpp_y) throw() {
  return ::copysignl(__lcpp_x, __lcpp_y);
}

template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::__lazy_enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    std::__promote<_A1, _A2>
>::type
copysign(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type __result_type;
    _Static_assert((!(std::is_same<_A1, __result_type>::value && std::is_same<_A2, __result_type>::value)), "");

    return ::copysign((__result_type)__lcpp_x, (__result_type)__lcpp_y);
}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float erf(float __lcpp_x) throw() {return ::erff(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double erf(long double __lcpp_x) throw() {return ::erfl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
erf(_A1 __lcpp_x) throw() {return ::erf((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float erfc(float __lcpp_x) throw() {return ::erfcf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double erfc(long double __lcpp_x) throw() {return ::erfcl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
erfc(_A1 __lcpp_x) throw() {return ::erfc((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float exp2(float __lcpp_x) throw() {return ::exp2f(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double exp2(long double __lcpp_x) throw() {return ::exp2l(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
exp2(_A1 __lcpp_x) throw() {return ::exp2((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float expm1(float __lcpp_x) throw() {return ::expm1f(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double expm1(long double __lcpp_x) throw() {return ::expm1l(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
expm1(_A1 __lcpp_x) throw() {return ::expm1((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float fdim(float __lcpp_x, float __lcpp_y) throw() {return ::fdimf(__lcpp_x, __lcpp_y);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double fdim(long double __lcpp_x, long double __lcpp_y) throw() {return ::fdiml(__lcpp_x, __lcpp_y);}

template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::__lazy_enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    std::__promote<_A1, _A2>
>::type
fdim(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type __result_type;
    _Static_assert((!(std::is_same<_A1, __result_type>::value && std::is_same<_A2, __result_type>::value)), "");

    return ::fdim((__result_type)__lcpp_x, (__result_type)__lcpp_y);
}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float fma(float __lcpp_x, float __lcpp_y, float __lcpp_z) throw() {return ::fmaf(__lcpp_x, __lcpp_y, __lcpp_z);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double fma(long double __lcpp_x, long double __lcpp_y, long double __lcpp_z) throw() {return ::fmal(__lcpp_x, __lcpp_y, __lcpp_z);}

template <class _A1, class _A2, class _A3>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::__lazy_enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value &&
    std::is_arithmetic<_A3>::value,
    std::__promote<_A1, _A2, _A3>
>::type
fma(_A1 __lcpp_x, _A2 __lcpp_y, _A3 __lcpp_z) throw()
{
    typedef typename std::__promote<_A1, _A2, _A3>::type __result_type;
    _Static_assert((!(std::is_same<_A1, __result_type>::value && std::is_same<_A2, __result_type>::value && std::is_same<_A3, __result_type>::value)), "");


    return ::fma((__result_type)__lcpp_x, (__result_type)__lcpp_y, (__result_type)__lcpp_z);
}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float fmax(float __lcpp_x, float __lcpp_y) throw() {return ::fmaxf(__lcpp_x, __lcpp_y);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double fmax(long double __lcpp_x, long double __lcpp_y) throw() {return ::fmaxl(__lcpp_x, __lcpp_y);}

template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::__lazy_enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    std::__promote<_A1, _A2>
>::type
fmax(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type __result_type;
    _Static_assert((!(std::is_same<_A1, __result_type>::value && std::is_same<_A2, __result_type>::value)), "");

    return ::fmax((__result_type)__lcpp_x, (__result_type)__lcpp_y);
}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float fmin(float __lcpp_x, float __lcpp_y) throw() {return ::fminf(__lcpp_x, __lcpp_y);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double fmin(long double __lcpp_x, long double __lcpp_y) throw() {return ::fminl(__lcpp_x, __lcpp_y);}

template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::__lazy_enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    std::__promote<_A1, _A2>
>::type
fmin(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type __result_type;
    _Static_assert((!(std::is_same<_A1, __result_type>::value && std::is_same<_A2, __result_type>::value)), "");

    return ::fmin((__result_type)__lcpp_x, (__result_type)__lcpp_y);
}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float hypot(float __lcpp_x, float __lcpp_y) throw() {return ::hypotf(__lcpp_x, __lcpp_y);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double hypot(long double __lcpp_x, long double __lcpp_y) throw() {return ::hypotl(__lcpp_x, __lcpp_y);}

template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::__lazy_enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    std::__promote<_A1, _A2>
>::type
hypot(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type __result_type;
    _Static_assert((!(std::is_same<_A1, __result_type>::value && std::is_same<_A2, __result_type>::value)), "");

    return ::hypot((__result_type)__lcpp_x, (__result_type)__lcpp_y);
}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) int ilogb(float __lcpp_x) throw() {return ::ilogbf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) int ilogb(long double __lcpp_x) throw() {return ::ilogbl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, int>::type
ilogb(_A1 __lcpp_x) throw() {return ::ilogb((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float lgamma(float __lcpp_x) throw() {return ::lgammaf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double lgamma(long double __lcpp_x) throw() {return ::lgammal(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
lgamma(_A1 __lcpp_x) throw() {return ::lgamma((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long long llrint(float __lcpp_x) throw() {return ::llrintf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long long llrint(long double __lcpp_x) throw() {return ::llrintl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, long long>::type
llrint(_A1 __lcpp_x) throw() {return ::llrint((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long long llround(float __lcpp_x) throw() {return ::llroundf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long long llround(long double __lcpp_x) throw() {return ::llroundl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, long long>::type
llround(_A1 __lcpp_x) throw() {return ::llround((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float log1p(float __lcpp_x) throw() {return ::log1pf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double log1p(long double __lcpp_x) throw() {return ::log1pl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
log1p(_A1 __lcpp_x) throw() {return ::log1p((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float log2(float __lcpp_x) throw() {return ::log2f(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double log2(long double __lcpp_x) throw() {return ::log2l(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
log2(_A1 __lcpp_x) throw() {return ::log2((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float logb(float __lcpp_x) throw() {return ::logbf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double logb(long double __lcpp_x) throw() {return ::logbl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
logb(_A1 __lcpp_x) throw() {return ::logb((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long lrint(float __lcpp_x) throw() {return ::lrintf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long lrint(long double __lcpp_x) throw() {return ::lrintl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, long>::type
lrint(_A1 __lcpp_x) throw() {return ::lrint((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long lround(float __lcpp_x) throw() {return ::lroundf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long lround(long double __lcpp_x) throw() {return ::lroundl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, long>::type
lround(_A1 __lcpp_x) throw() {return ::lround((double)__lcpp_x);}





inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float nearbyint(float __lcpp_x) throw() {return ::nearbyintf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double nearbyint(long double __lcpp_x) throw() {return ::nearbyintl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
nearbyint(_A1 __lcpp_x) throw() {return ::nearbyint((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float nextafter(float __lcpp_x, float __lcpp_y) throw() {return ::nextafterf(__lcpp_x, __lcpp_y);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double nextafter(long double __lcpp_x, long double __lcpp_y) throw() {return ::nextafterl(__lcpp_x, __lcpp_y);}

template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::__lazy_enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    std::__promote<_A1, _A2>
>::type
nextafter(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type __result_type;
    _Static_assert((!(std::is_same<_A1, __result_type>::value && std::is_same<_A2, __result_type>::value)), "");

    return ::nextafter((__result_type)__lcpp_x, (__result_type)__lcpp_y);
}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float nexttoward(float __lcpp_x, long double __lcpp_y) throw() {return ::nexttowardf(__lcpp_x, __lcpp_y);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double nexttoward(long double __lcpp_x, long double __lcpp_y) throw() {return ::nexttowardl(__lcpp_x, __lcpp_y);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
nexttoward(_A1 __lcpp_x, long double __lcpp_y) throw() {return ::nexttoward((double)__lcpp_x, __lcpp_y);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float remainder(float __lcpp_x, float __lcpp_y) throw() {return ::remainderf(__lcpp_x, __lcpp_y);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double remainder(long double __lcpp_x, long double __lcpp_y) throw() {return ::remainderl(__lcpp_x, __lcpp_y);}

template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::__lazy_enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    std::__promote<_A1, _A2>
>::type
remainder(_A1 __lcpp_x, _A2 __lcpp_y) throw()
{
    typedef typename std::__promote<_A1, _A2>::type __result_type;
    _Static_assert((!(std::is_same<_A1, __result_type>::value && std::is_same<_A2, __result_type>::value)), "");

    return ::remainder((__result_type)__lcpp_x, (__result_type)__lcpp_y);
}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float remquo(float __lcpp_x, float __lcpp_y, int* __lcpp_z) throw() {return ::remquof(__lcpp_x, __lcpp_y, __lcpp_z);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double remquo(long double __lcpp_x, long double __lcpp_y, int* __lcpp_z) throw() {return ::remquol(__lcpp_x, __lcpp_y, __lcpp_z);}

template <class _A1, class _A2>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::__lazy_enable_if
<
    std::is_arithmetic<_A1>::value &&
    std::is_arithmetic<_A2>::value,
    std::__promote<_A1, _A2>
>::type
remquo(_A1 __lcpp_x, _A2 __lcpp_y, int* __lcpp_z) throw()
{
    typedef typename std::__promote<_A1, _A2>::type __result_type;
    _Static_assert((!(std::is_same<_A1, __result_type>::value && std::is_same<_A2, __result_type>::value)), "");

    return ::remquo((__result_type)__lcpp_x, (__result_type)__lcpp_y, __lcpp_z);
}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float rint(float __lcpp_x) throw() {return ::rintf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double rint(long double __lcpp_x) throw() {return ::rintl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
rint(_A1 __lcpp_x) throw() {return ::rint((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float round(float __lcpp_x) throw() {return ::roundf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double round(long double __lcpp_x) throw() {return ::roundl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
round(_A1 __lcpp_x) throw() {return ::round((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float scalbln(float __lcpp_x, long __lcpp_y) throw() {return ::scalblnf(__lcpp_x, __lcpp_y);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double scalbln(long double __lcpp_x, long __lcpp_y) throw() {return ::scalblnl(__lcpp_x, __lcpp_y);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
scalbln(_A1 __lcpp_x, long __lcpp_y) throw() {return ::scalbln((double)__lcpp_x, __lcpp_y);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float scalbn(float __lcpp_x, int __lcpp_y) throw() {return ::scalbnf(__lcpp_x, __lcpp_y);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double scalbn(long double __lcpp_x, int __lcpp_y) throw() {return ::scalbnl(__lcpp_x, __lcpp_y);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
scalbn(_A1 __lcpp_x, int __lcpp_y) throw() {return ::scalbn((double)__lcpp_x, __lcpp_y);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float tgamma(float __lcpp_x) throw() {return ::tgammaf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double tgamma(long double __lcpp_x) throw() {return ::tgammal(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
tgamma(_A1 __lcpp_x) throw() {return ::tgamma((double)__lcpp_x);}



inline __attribute__ ((__visibility__("hidden"), __always_inline__)) float trunc(float __lcpp_x) throw() {return ::truncf(__lcpp_x);}
inline __attribute__ ((__visibility__("hidden"), __always_inline__)) long double trunc(long double __lcpp_x) throw() {return ::truncl(__lcpp_x);}

template <class _A1>
inline __attribute__ ((__visibility__("hidden"), __always_inline__))
typename std::enable_if<std::is_integral<_A1>::value, double>::type
trunc(_A1 __lcpp_x) throw() {return ::trunc((double)__lcpp_x);}

}
# 30 "/usr/local/include/wx-3.0/wx/math.h" 2
# 141 "/usr/local/include/wx-3.0/wx/math.h"
    inline bool wxIsSameDouble(double x, double y) { return x == y; }




inline bool wxIsNullDouble(double x) { return wxIsSameDouble(x, 0.); }

inline int wxRound(double x)
{
    do { if ( wxTheAssertHandler && !(x > (-2147483647 -1) - 0.5 && x < 2147483647 + 0.5) && (wxOnAssert("/usr/local/include/wx-3.0/wx/math.h", 151, __FUNCTION__, "x > INT_MIN - 0.5 && x < INT_MAX + 0.5", "argument out of supported range"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 );





        return (int)(x < 0 ? x - 0.5 : x + 0.5);

}
# 30 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 1 "/usr/local/include/wx-3.0/wx/stopwatch.h" 1
# 21 "/usr/local/include/wx-3.0/wx/stopwatch.h"
# 1 "/usr/local/include/wx-3.0/wx/time.h" 1
# 16 "/usr/local/include/wx-3.0/wx/time.h"
                 int wxGetTimeZone();


extern long wxGetLocalTime();


extern long wxGetUTCTime();





    typedef double wxMilliClock_t;
    inline long wxMilliClockToLong(double d) { return ((long)(d)); }



extern wxMilliClock_t wxGetLocalTimeMillis();
# 59 "/usr/local/include/wx-3.0/wx/time.h"
                 struct tm *wxLocaltime_r(const time_t*, struct tm*);
# 69 "/usr/local/include/wx-3.0/wx/time.h"
                 struct tm *wxGmtime_r(const time_t*, struct tm*);
# 22 "/usr/local/include/wx-3.0/wx/stopwatch.h" 2
# 31 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 1 "/usr/local/include/wx-3.0/wx/timer.h" 1
# 32 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 1 "/usr/local/include/wx-3.0/wx/module.h" 1
# 20 "/usr/local/include/wx-3.0/wx/module.h"
class wxModule;
typedef wxModule _WX_LIST_ITEM_TYPE_wxModuleList; typedef int (*wxSortFuncFor_wxModuleList)(const wxModule **, const wxModule **); class wxwxModuleListNode : public wxNodeBase { public: wxwxModuleListNode(wxListBase *list = __null, wxwxModuleListNode *previous = __null, wxwxModuleListNode *next = __null, wxModule *data = __null, const wxListKey& key = wxDefaultListKey) : wxNodeBase(list, previous, next, data, key) { } wxwxModuleListNode *GetNext() const { return (wxwxModuleListNode *)wxNodeBase::GetNext(); } wxwxModuleListNode *GetPrevious() const { return (wxwxModuleListNode *)wxNodeBase::GetPrevious(); } wxModule *GetData() const { return (wxModule *)wxNodeBase::GetData(); } void SetData(wxModule *data) { wxNodeBase::SetData(data); } protected: virtual void DeleteData(); private: wxwxModuleListNode(const wxwxModuleListNode&); wxwxModuleListNode& operator=(const wxwxModuleListNode&); }; class wxModuleList : public wxListBase { public: typedef wxwxModuleListNode Node; class compatibility_iterator { public: compatibility_iterator(Node *ptr = __null) : m_ptr(ptr) { } Node *operator->() const { return m_ptr; } operator Node *() const { return m_ptr; } private: Node *m_ptr; }; wxModuleList(wxKeyType keyType = wxKEY_NONE) : wxListBase(keyType) { } wxModuleList(const wxModuleList& list) : wxListBase(list.GetKeyType()) { Assign(list); } wxModuleList(size_t count, wxModule *elements[]) : wxListBase(count, (void **)elements) { } wxModuleList& operator=(const wxModuleList& list) { if (&list != this) Assign(list); return *this; } wxwxModuleListNode *GetFirst() const { return (wxwxModuleListNode *)wxListBase::GetFirst(); } wxwxModuleListNode *GetLast() const { return (wxwxModuleListNode *)wxListBase::GetLast(); } wxwxModuleListNode *Item(size_t index) const { return (wxwxModuleListNode *)wxListBase::Item(index); } wxModule *operator[](size_t index) const { wxwxModuleListNode *node = Item(index); return node ? (wxModule*)(node->GetData()) : __null; } wxwxModuleListNode *Append(wxModule *object) { return (wxwxModuleListNode *)wxListBase::Append(object); } wxwxModuleListNode *Insert(wxModule *object) { return (wxwxModuleListNode *)Insert(static_cast<wxwxModuleListNode *>(__null), object); } wxwxModuleListNode *Insert(size_t pos, wxModule *object) { return (wxwxModuleListNode *)wxListBase::Insert(pos, object); } wxwxModuleListNode *Insert(wxwxModuleListNode *prev, wxModule *object) { return (wxwxModuleListNode *)wxListBase::Insert(prev, object); } wxwxModuleListNode *Append(long key, void *object) { return (wxwxModuleListNode *)wxListBase::Append(key, object); } wxwxModuleListNode *Append(const wxChar *key, void *object) { return (wxwxModuleListNode *)wxListBase::Append(key, object); } wxwxModuleListNode *DetachNode(wxwxModuleListNode *node) { return (wxwxModuleListNode *)wxListBase::DetachNode(node); } bool DeleteNode(wxwxModuleListNode *node) { return wxListBase::DeleteNode(node); } bool DeleteObject(wxModule *object) { return wxListBase::DeleteObject(object); } void Erase(wxwxModuleListNode *it) { DeleteNode(it); } wxwxModuleListNode *Find(const wxModule *object) const { return (wxwxModuleListNode *)wxListBase::Find(object); } virtual wxwxModuleListNode *Find(const wxListKey& key) const { return (wxwxModuleListNode *)wxListBase::Find(key); } bool Member(const wxModule *object) const { return Find(object) != __null; } int IndexOf(wxModule *object) const { return wxListBase::IndexOf(object); } void Sort(wxSortCompareFunction func) { wxListBase::Sort(func); } void Sort(wxSortFuncFor_wxModuleList func) { Sort((wxSortCompareFunction)func); } protected: virtual wxNodeBase *CreateNode(wxNodeBase *prev, wxNodeBase *next, void *data, const wxListKey& key = wxDefaultListKey) { return new wxwxModuleListNode(this, (wxwxModuleListNode *)prev, (wxwxModuleListNode *)next, (wxModule *)data, key); } public: typedef size_t size_type; typedef int difference_type; typedef wxModule* value_type; typedef wxModule* base_value_type; typedef value_type& reference; typedef const value_type& const_reference; typedef base_value_type& base_reference; typedef const base_value_type& const_base_reference; class iterator { typedef wxModuleList list; public: typedef wxwxModuleListNode Node; typedef iterator itor; typedef wxModule* value_type; typedef value_type* ptr_type; typedef value_type& reference; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef ptr_type pointer_type; iterator(Node* node, Node* init) : m_node(node), m_init(init) {} iterator() : m_node(__null), m_init(__null) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( wxTheAssertHandler && !(m_node) && (wxOnAssert("/usr/local/include/wx-3.0/wx/module.h", 21, __FUNCTION__, "m_node", "uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( wxTheAssertHandler && !(m_node) && (wxOnAssert("/usr/local/include/wx-3.0/wx/module.h", 21, __FUNCTION__, "m_node", "uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class const_iterator { typedef wxModuleList list; public: typedef wxwxModuleListNode Node; typedef wxModule* value_type; typedef const value_type& const_reference; typedef const_iterator itor; typedef value_type* ptr_type; Node* m_node; Node* m_init; public: typedef const_reference reference_type; typedef const ptr_type pointer_type; const_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_iterator() : m_node(__null), m_init(__null) { } const_iterator(const iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { do { if ( wxTheAssertHandler && !(m_node) && (wxOnAssert("/usr/local/include/wx-3.0/wx/module.h", 21, __FUNCTION__, "m_node", "uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return *this; } const itor operator++(int) { itor tmp = *this; do { if ( wxTheAssertHandler && !(m_node) && (wxOnAssert("/usr/local/include/wx-3.0/wx/module.h", 21, __FUNCTION__, "m_node", "uninitialized iterator"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); m_node = m_node->GetNext(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetPrevious() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetPrevious() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class reverse_iterator { typedef wxModuleList list; public: typedef wxwxModuleListNode Node; typedef wxModule* value_type; typedef reverse_iterator itor; typedef value_type* ptr_type; typedef value_type& reference; Node* m_node; Node* m_init; public: typedef reference reference_type; typedef ptr_type pointer_type; reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } reverse_iterator() : m_node(__null), m_init(__null) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this; } const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; class const_reverse_iterator { typedef wxModuleList list; public: typedef wxwxModuleListNode Node; typedef wxModule* value_type; typedef const_reverse_iterator itor; typedef value_type* ptr_type; typedef const value_type& const_reference; Node* m_node; Node* m_init; public: typedef const_reference reference_type; typedef const ptr_type pointer_type; const_reverse_iterator(Node* node, Node* init) : m_node(node), m_init(init) { } const_reverse_iterator() : m_node(__null), m_init(__null) { } const_reverse_iterator(const reverse_iterator& it) : m_node(it.m_node), m_init(it.m_init) { } reference_type operator*() const { return *(pointer_type)m_node->GetDataPtr(); } itor& operator++() { m_node = m_node->GetPrevious(); return *this; } const itor operator++(int) { itor tmp = *this; m_node = m_node->GetPrevious(); return tmp; } itor& operator--() { m_node = m_node ? m_node->GetNext() : m_init; return *this;} const itor operator--(int) { itor tmp = *this; m_node = m_node ? m_node->GetNext() : m_init; return tmp; } bool operator!=(const itor& it) const { return it.m_node != m_node; } bool operator==(const itor& it) const { return it.m_node == m_node; } }; wxModuleList(size_type n, const_reference v = value_type()) { assign(n, v); } wxModuleList(const const_iterator& first, const const_iterator& last) { assign(first, last); } iterator begin() { return iterator(GetFirst(), GetLast()); } const_iterator begin() const { return const_iterator(GetFirst(), GetLast()); } iterator end() { return iterator(__null, GetLast()); } const_iterator end() const { return const_iterator(__null, GetLast()); } reverse_iterator rbegin() { return reverse_iterator(GetLast(), GetFirst()); } const_reverse_iterator rbegin() const { return const_reverse_iterator(GetLast(), GetFirst()); } reverse_iterator rend() { return reverse_iterator(__null, GetFirst()); } const_reverse_iterator rend() const { return const_reverse_iterator(__null, GetFirst()); } void resize(size_type n, value_type v = value_type()) { while (n < size()) pop_back(); while (n > size()) push_back(v); } size_type size() const { return GetCount(); } size_type max_size() const { return 2147483647; } bool empty() const { return IsEmpty(); } reference front() { return *begin(); } const_reference front() const { return *begin(); } reference back() { iterator tmp = end(); return *--tmp; } const_reference back() const { const_iterator tmp = end(); return *--tmp; } void push_front(const_reference v = value_type()) { Insert(GetFirst(), (const_base_reference)v); } void pop_front() { DeleteNode(GetFirst()); } void push_back(const_reference v = value_type()) { Append((const_base_reference)v); } void pop_back() { DeleteNode(GetLast()); } void assign(const_iterator first, const const_iterator& last) { clear(); for(; first != last; ++first) Append((const_base_reference)*first); } void assign(size_type n, const_reference v = value_type()) { clear(); for(size_type i = 0; i < n; ++i) Append((const_base_reference)v); } iterator insert(const iterator& it, const_reference v) { if ( it == end() ) { Append((const_base_reference)v); iterator itins(end()); return --itins; } else { Insert(it.m_node, (const_base_reference)v); iterator itins(it); return --itins; } } void insert(const iterator& it, size_type n, const_reference v) { for(size_type i = 0; i < n; ++i) insert(it, v); } void insert(const iterator& it, const_iterator first, const const_iterator& last) { for(; first != last; ++first) insert(it, *first); } iterator erase(const iterator& it) { iterator next = iterator(it.m_node->GetNext(), GetLast()); DeleteNode(it.m_node); return next; } iterator erase(const iterator& first, const iterator& last) { iterator next = last; if ( next != end() ) ++next; DeleteNodes(first.m_node, last.m_node); return next; } void clear() { Clear(); } void splice(const iterator& it, wxModuleList& l, const iterator& first, const iterator& last) { insert(it, first, last); l.erase(first, last); } void splice(const iterator& it, wxModuleList& l) { splice(it, l, l.begin(), l.end() ); } void splice(const iterator& it, wxModuleList& l, const iterator& first) { if ( it != first ) { insert(it, *first); l.erase(first); } } void remove(const_reference v) { DeleteObject((const_base_reference)v); } void reverse() { Reverse(); } };


typedef wxClassInfo * _wxArraywxArrayClassInfo; struct wxAssert_wxArrayClassInfo { unsigned int TypeTooBigToBeStoredInwxBaseArrayPtrVoid: sizeof(_wxArraywxArrayClassInfo) <= sizeof(wxBaseArrayPtrVoid::base_type); }; typedef int ( *CMPFUNC_wxArraywxArrayClassInfo)(_wxArraywxArrayClassInfo *pItem1, _wxArraywxArrayClassInfo *pItem2); class wxArrayClassInfo : public wxBaseArrayPtrVoid { public: wxArrayClassInfo() { } ~wxArrayClassInfo() { } _wxArraywxArrayClassInfo& operator[](size_t uiIndex) const { return (_wxArraywxArrayClassInfo&)(wxBaseArrayPtrVoid::operator[](uiIndex)); } _wxArraywxArrayClassInfo& Item(size_t uiIndex) const { return (_wxArraywxArrayClassInfo&)(wxBaseArrayPtrVoid::operator[](uiIndex)); } _wxArraywxArrayClassInfo& Last() const { return (_wxArraywxArrayClassInfo&)(wxBaseArrayPtrVoid::operator[](GetCount() - 1)); } int Index(_wxArraywxArrayClassInfo lItem, bool bFromEnd = false) const { return wxBaseArrayPtrVoid::Index((base_type)lItem, bFromEnd); } void Add(_wxArraywxArrayClassInfo lItem, size_t nInsert = 1) { wxBaseArrayPtrVoid::Add((base_type)lItem, nInsert); } void Insert(_wxArraywxArrayClassInfo lItem, size_t uiIndex, size_t nInsert = 1) { wxBaseArrayPtrVoid::Insert((base_type)lItem, uiIndex, nInsert) ; } void RemoveAt(size_t uiIndex, size_t nRemove = 1) { wxBaseArrayPtrVoid::RemoveAt(uiIndex, nRemove); } void Remove(_wxArraywxArrayClassInfo lItem) { int iIndex = Index(lItem); if ( iIndex != (-1) ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/module.h", 25, __FUNCTION__, "iIndex != (-1)", "removing inexistent element in wxArray::Remove"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct; wxBaseArrayPtrVoid::RemoveAt((size_t)iIndex); } void Sort(CMPFUNC_wxArraywxArrayClassInfo fCmp) { wxBaseArrayPtrVoid::Sort((CMPFUNC)fCmp); } private: typedef wxBaseArrayPtrVoid::iterator biterator; typedef wxBaseArrayPtrVoid::const_iterator bconst_iterator; typedef wxBaseArrayPtrVoid::value_type bvalue_type; typedef wxBaseArrayPtrVoid::const_reference bconst_reference; public: typedef _wxArraywxArrayClassInfo value_type; typedef value_type* pointer; typedef const value_type* const_pointer; typedef value_type* iterator; typedef const value_type* const_iterator; typedef value_type& reference; typedef const value_type& const_reference; typedef wxBaseArrayPtrVoid::difference_type difference_type; typedef wxBaseArrayPtrVoid::size_type size_type; class reverse_iterator { typedef _wxArraywxArrayClassInfo value_type; typedef value_type& reference; typedef value_type* pointer; typedef reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; reverse_iterator() : m_ptr(__null) { } reverse_iterator(pointer ptr) : m_ptr(ptr) { } reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { reverse_iterator tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; class const_reverse_iterator { typedef _wxArraywxArrayClassInfo value_type; typedef const value_type& reference; typedef const value_type* pointer; typedef const_reverse_iterator itor; friend inline itor operator+(int o, const itor& it) { return it.m_ptr - o; } friend inline itor operator+(const itor& it, int o) { return it.m_ptr - o; } friend inline itor operator-(const itor& it, int o) { return it.m_ptr + o; } friend inline difference_type operator-(const itor& i1, const itor& i2) { return i1.m_ptr - i2.m_ptr; } public: pointer m_ptr; const_reverse_iterator() : m_ptr(__null) { } const_reverse_iterator(pointer ptr) : m_ptr(ptr) { } const_reverse_iterator(const itor& it) : m_ptr(it.m_ptr) { } const_reverse_iterator(const reverse_iterator& it) : m_ptr(it.m_ptr) { } reference operator*() const { return *m_ptr; } itor& operator++() { --m_ptr; return *this; } const itor operator++(int) { itor tmp = *this; --m_ptr; return tmp; } itor& operator--() { ++m_ptr; return *this; } const itor operator--(int) { itor tmp = *this; ++m_ptr; return tmp; } bool operator ==(const itor& it) const { return m_ptr == it.m_ptr; } bool operator !=(const itor& it) const { return m_ptr != it.m_ptr; } }; wxArrayClassInfo(size_type n) { assign(n, value_type()); } wxArrayClassInfo(size_type n, const_reference v) { assign(n, v); } wxArrayClassInfo(const_iterator first, const_iterator last) { assign(first, last); } void assign(const_iterator first, const_iterator last) { wxBaseArrayPtrVoid::assign((bconst_iterator)first, (bconst_iterator)last); } void assign(size_type n, const_reference v) { wxBaseArrayPtrVoid::assign(n, (bconst_reference)v); } reference back() { return *(end() - 1); } const_reference back() const { return *(end() - 1); } iterator begin() { return (iterator)wxBaseArrayPtrVoid::begin(); } const_iterator begin() const { return (const_iterator)wxBaseArrayPtrVoid::begin(); } size_type capacity() const { return wxBaseArrayPtrVoid::capacity(); } iterator end() { return (iterator)wxBaseArrayPtrVoid::end(); } const_iterator end() const { return (const_iterator)wxBaseArrayPtrVoid::end(); } iterator erase(iterator first, iterator last) { return (iterator)wxBaseArrayPtrVoid::erase((biterator)first, (biterator)last); } iterator erase(iterator it) { return (iterator)wxBaseArrayPtrVoid::erase((biterator)it); } reference front() { return *begin(); } const_reference front() const { return *begin(); } void insert(iterator it, size_type n, const_reference v) { wxBaseArrayPtrVoid::insert((biterator)it, n, (bconst_reference)v); } iterator insert(iterator it, const_reference v = value_type()) { return (iterator)wxBaseArrayPtrVoid::insert((biterator)it, (bconst_reference)v); } void insert(iterator it, const_iterator first, const_iterator last) { wxBaseArrayPtrVoid::insert((biterator)it, (bconst_iterator)first, (bconst_iterator)last); } void pop_back() { wxBaseArrayPtrVoid::pop_back(); } void push_back(const_reference v) { wxBaseArrayPtrVoid::push_back((bconst_reference)v); } reverse_iterator rbegin() { return reverse_iterator(end() - 1); } const_reverse_iterator rbegin() const; reverse_iterator rend() { return reverse_iterator(begin() - 1); } const_reverse_iterator rend() const; void reserve(size_type n) { wxBaseArrayPtrVoid::reserve(n); } void resize(size_type n, value_type v = value_type()) { wxBaseArrayPtrVoid::resize(n, v); } void swap(wxArrayClassInfo& other) { wxBaseArrayPtrVoid::swap(other); } };






class wxModule : public wxObject
{
public:
    wxModule() {}
    virtual ~wxModule() {}




    bool Init() { return OnInit(); }
    void Exit() { OnExit(); }





    virtual bool OnInit() = 0;




    virtual void OnExit() = 0;

    static void RegisterModule(wxModule *module);
    static void RegisterModules();
    static bool InitializeModules();
    static void CleanUpModules() { DoCleanUpModules(m_modules); }



    static void UnregisterModule(wxModule *module);

protected:
    static wxModuleList m_modules;




    void AddDependency(wxClassInfo *dep)
    {
        if ( dep ) {} else { do { if ( wxTheAssertHandler && (wxOnAssert("/usr/local/include/wx-3.0/wx/module.h", 71, __FUNCTION__, "dep", "NULL module dependency"), wxTrapInAssert) ) { wxTrapInAssert = false; wxTrap(); } } while ( (void)0, 0 ); return; } struct wxDummyCheckStruct;

        m_dependencies.Add(dep);
    }



    void AddDependency(const char *className)
    {
        m_namedDependencies.Add(className);
    }


private:


    static bool
    DoInitializeModule(wxModule *module, wxModuleList &initializedModules);




    static void DoCleanUpModules(const wxModuleList& modules);


    bool ResolveNamedDependencies();




    wxArrayClassInfo m_dependencies;



    wxArrayString m_namedDependencies;


    enum
    {
        State_Registered,
        State_Initializing,
        State_Initialized
    } m_state;


    public: static wxClassInfo ms_classInfo; virtual wxClassInfo *GetClassInfo() const;
};
# 33 "/usr/local/include/wx-3.0/wx/wx.h" 2

# 1 "/usr/local/include/wx-3.0/wx/wxcrtvararg.h" 1
# 59 "/usr/local/include/wx-3.0/wx/wxcrtvararg.h"
    extern "C"



    int vsscanf(const char *str, const char *format, va_list ap);
# 165 "/usr/local/include/wx-3.0/wx/wxcrtvararg.h"
                     int
    wxCRT_VsnprintfW(wchar_t *buf, size_t len, const wchar_t *format, va_list argptr);







                         int
        wxCRT_VsnprintfA(char *buf, size_t len, const char *format, va_list argptr);
# 219 "/usr/local/include/wx-3.0/wx/wxcrtvararg.h"
    int wxCRT_PrintfW( const wchar_t *format, ... );
    int wxCRT_FprintfW( FILE *stream, const wchar_t *format, ... );
    int wxCRT_VfprintfW( FILE *stream, const wchar_t *format, va_list ap );
    int wxCRT_VprintfW( const wchar_t *format, va_list ap );
    int wxCRT_VsprintfW( wchar_t *str, const wchar_t *format, va_list ap );
# 254 "/usr/local/include/wx-3.0/wx/wxcrtvararg.h"
    int wxCRT_ScanfW(const wchar_t *format, ...);
    int wxCRT_SscanfW(const wchar_t *str, const wchar_t *format, ...);
    int wxCRT_FscanfW(FILE *stream, const wchar_t *format, ...);






    int wxCRT_VsscanfW(const wchar_t *str, const wchar_t *format, va_list ap);
# 290 "/usr/local/include/wx-3.0/wx/wxcrtvararg.h"
template<typename T1> int wxPrintf(const wxFormatString& f1, T1 a1) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxPrintf(const wxFormatString& f1, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef const wxFormatString& TF1; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1))); return printf(f1, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }

inline int wxPrintf(const wxFormatString& s)
{
    return wxPrintf("%s", s.InputAsString());
}

template<typename T1> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxFprintf(FILE* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef FILE* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return fprintf(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }

inline int wxFprintf(FILE *f, const wxFormatString& s)
{
    return wxFprintf(f, "%s", s.InputAsString());
}
# 324 "/usr/local/include/wx-3.0/wx/wxcrtvararg.h"
inline int
wxVprintf(const wxString& format, va_list ap)
{
    return vprintf (wxFormatString(format), ap);

}

inline int
wxVfprintf(FILE *f, const wxString& format, va_list ap)
{
    return vfprintf (f, wxFormatString(format), ap);

}
# 345 "/usr/local/include/wx-3.0/wx/wxcrtvararg.h"
int wxDoSprintfWchar(char *str, const wxChar *format, ...);




inline int wxSprintf(char* f1, const wxFormatString& f2) { return wxDoSprintfWchar(f1, f2); } template<typename T1> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSprintf(char* f1, const wxFormatString& f2, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef char* TF1; typedef const wxFormatString& TF2; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2))); return wxDoSprintfWchar(f1, f2, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }


int
wxVsprintf(char *str, const wxString& format, va_list argptr);


int wxDoSnprintfWchar(char *str, size_t size, const wxChar *format, ...);




inline int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3) { return wxDoSnprintfWchar(f1, f2, f3); } template<typename T1> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get()); } template<typename T1, typename T2> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get()); } template<typename T1, typename T2, typename T3> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get()); } template<typename T1, typename T2, typename T3, typename T4> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get()); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSnprintf(char* f1, size_t f2, const wxFormatString& f3, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { typedef char* TF1; typedef size_t TF2; typedef const wxFormatString& TF3; const wxFormatString *fmt = ((wxFormatStringArgumentFinder<TF1>::find(f1)), (wxFormatStringArgumentFinder<TF2>::find(f2)), (wxFormatStringArgumentFinder<TF3>::find(f3))); return wxDoSnprintfWchar(f1, f2, f3, wxArgNormalizerWchar<T1>(a1, fmt, 1).get(), wxArgNormalizerWchar<T2>(a2, fmt, 2).get(), wxArgNormalizerWchar<T3>(a3, fmt, 3).get(), wxArgNormalizerWchar<T4>(a4, fmt, 4).get(), wxArgNormalizerWchar<T5>(a5, fmt, 5).get(), wxArgNormalizerWchar<T6>(a6, fmt, 6).get(), wxArgNormalizerWchar<T7>(a7, fmt, 7).get(), wxArgNormalizerWchar<T8>(a8, fmt, 8).get(), wxArgNormalizerWchar<T9>(a9, fmt, 9).get(), wxArgNormalizerWchar<T10>(a10, fmt, 10).get(), wxArgNormalizerWchar<T11>(a11, fmt, 11).get(), wxArgNormalizerWchar<T12>(a12, fmt, 12).get(), wxArgNormalizerWchar<T13>(a13, fmt, 13).get(), wxArgNormalizerWchar<T14>(a14, fmt, 14).get(), wxArgNormalizerWchar<T15>(a15, fmt, 15).get(), wxArgNormalizerWchar<T16>(a16, fmt, 16).get(), wxArgNormalizerWchar<T17>(a17, fmt, 17).get(), wxArgNormalizerWchar<T18>(a18, fmt, 18).get(), wxArgNormalizerWchar<T19>(a19, fmt, 19).get(), wxArgNormalizerWchar<T20>(a20, fmt, 20).get(), wxArgNormalizerWchar<T21>(a21, fmt, 21).get(), wxArgNormalizerWchar<T22>(a22, fmt, 22).get(), wxArgNormalizerWchar<T23>(a23, fmt, 23).get(), wxArgNormalizerWchar<T24>(a24, fmt, 24).get(), wxArgNormalizerWchar<T25>(a25, fmt, 25).get(), wxArgNormalizerWchar<T26>(a26, fmt, 26).get(), wxArgNormalizerWchar<T27>(a27, fmt, 27).get(), wxArgNormalizerWchar<T28>(a28, fmt, 28).get(), wxArgNormalizerWchar<T29>(a29, fmt, 29).get(), wxArgNormalizerWchar<T30>(a30, fmt, 30).get()); }


int
wxVsnprintf(char *str, size_t size, const wxString& format, va_list argptr);
# 453 "/usr/local/include/wx-3.0/wx/wxcrtvararg.h"
    const wxScopedWCharBuffer
                     wxScanfConvertFormatW(const wchar_t *format);


template<typename T1> int wxScanf(const char *format, T1 a1) { return scanf(format, a1); } template<typename T1, typename T2> int wxScanf(const char *format, T1 a1, T2 a2) { return scanf(format, a1, a2); } template<typename T1, typename T2, typename T3> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3) { return scanf(format, a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4) { return scanf(format, a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return scanf(format, a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return scanf(format, a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return scanf(format, a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxScanf(const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return scanf(format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxScanf(const wchar_t *format, T1 a1) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1); } template<typename T1, typename T2> int wxScanf(const wchar_t *format, T1 a1, T2 a2) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2); } template<typename T1, typename T2, typename T3> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxScanf(const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return wxCRT_ScanfW(wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }


template<typename T1> int wxFscanf(FILE *stream, const char *format, T1 a1) { return fscanf(stream, format, a1); } template<typename T1, typename T2> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2) { return fscanf(stream, format, a1, a2); } template<typename T1, typename T2, typename T3> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3) { return fscanf(stream, format, a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4) { return fscanf(stream, format, a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return fscanf(stream, format, a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxFscanf(FILE *stream, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return fscanf(stream, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1); } template<typename T1, typename T2> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2); } template<typename T1, typename T2, typename T3> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxFscanf(FILE *stream, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return wxCRT_FscanfW(stream, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }


template<typename T1> int wxSscanf(const char *str, const char *format, T1 a1) { return sscanf(str, format, a1); } template<typename T1, typename T2> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2) { return sscanf(str, format, a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3) { return sscanf(str, format, a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4) { return sscanf(str, format, a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return sscanf(str, format, a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return sscanf(str, format, a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const char *str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return sscanf(str, format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1); } template<typename T1, typename T2> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wchar_t *str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return wxCRT_SscanfW(str, wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1) { return sscanf(str.data(), format, a1); } template<typename T1, typename T2> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2) { return sscanf(str.data(), format, a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3) { return sscanf(str.data(), format, a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4) { return sscanf(str.data(), format, a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return sscanf(str.data(), format, a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wxScopedCharBuffer& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return sscanf(str.data(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1); } template<typename T1, typename T2> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wxScopedWCharBuffer& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return wxCRT_SscanfW(str.data(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxSscanf(const wxString& str, const char *format, T1 a1) { return sscanf(str.mb_str(), format, a1); } template<typename T1, typename T2> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2) { return sscanf(str.mb_str(), format, a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3) { return sscanf(str.mb_str(), format, a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4) { return sscanf(str.mb_str(), format, a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wxString& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return sscanf(str.mb_str(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1); } template<typename T1, typename T2> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wxString& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return wxCRT_SscanfW(str.wc_str(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxSscanf(const wxCStrData& str, const char *format, T1 a1) { return sscanf(str.AsCharBuf(), format, a1); } template<typename T1, typename T2> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2) { return sscanf(str.AsCharBuf(), format, a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3) { return sscanf(str.AsCharBuf(), format, a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wxCStrData& str, const char *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return sscanf(str.AsCharBuf(), format, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }

template<typename T1> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1); } template<typename T1, typename T2> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2); } template<typename T1, typename T2, typename T3> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3); } template<typename T1, typename T2, typename T3, typename T4> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4); } template<typename T1, typename T2, typename T3, typename T4, typename T5> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29); } template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13, typename T14, typename T15, typename T16, typename T17, typename T18, typename T19, typename T20, typename T21, typename T22, typename T23, typename T24, typename T25, typename T26, typename T27, typename T28, typename T29, typename T30> int wxSscanf(const wxCStrData& str, const wchar_t *format, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9, T10 a10, T11 a11, T12 a12, T13 a13, T14 a14, T15 a15, T16 a16, T17 a17, T18 a18, T19 a19, T20 a20, T21 a21, T22 a22, T23 a23, T24 a24, T25 a25, T26 a26, T27 a27, T28 a28, T29 a29, T30 a30) { return wxCRT_SscanfW(str.AsWCharBuf(), wxScanfConvertFormatW(format), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30); }




int wxVsscanf(const char *str, const char *format, va_list ap);
int wxVsscanf(const wchar_t *str, const wchar_t *format, va_list ap);
int wxVsscanf(const wxScopedCharBuffer& str, const char *format, va_list ap);
int wxVsscanf(const wxScopedWCharBuffer& str, const wchar_t *format, va_list ap);
int wxVsscanf(const wxString& str, const char *format, va_list ap);
int wxVsscanf(const wxString& str, const wchar_t *format, va_list ap);
int wxVsscanf(const wxCStrData& str, const char *format, va_list ap);
int wxVsscanf(const wxCStrData& str, const wchar_t *format, va_list ap);
# 35 "/usr/local/include/wx-3.0/wx/wx.h" 2
# 6 "./common.h" 2

# 1 "/usr/local/include/wx-3.0/wx/xrc/xmlres.h" 1
# 8 "./common.h" 2

using std::cout;
using std::endl;
# 4 "./main-ui.h" 2

class ICPApp: public wxAppConsole {
protected:
 wxWindow *theWindow;
 wxFrame *theFrame;
 bool LoadUI(wxString path);
public:
 bool OnInit();
 void PreExit();
 void OnClose(wxCloseEvent& );
 void OnInitCmdLine(wxCmdLineParser& parser);
 bool OnCmdLineParsed(wxCmdLineParser& parser);
 ICPApp();
 ~ICPApp();
};

extern "C" {
 void start_app();
}
# 2 "main-ui.cpp" 2
# 1 "/usr/local/include/wx-3.0/wx/filename.h" 1
# 16 "/usr/local/include/wx-3.0/wx/filename.h"
# 1 "/usr/local/include/wx-3.0/wx/datetime.h" 1
# 17 "/usr/local/include/wx-3.0/wx/filename.h" 2


# 1 "/usr/local/include/wx-3.0/wx/file.h" 1
# 20 "/usr/local/include/wx-3.0/wx/filename.h" 2
# 42 "/usr/local/include/wx-3.0/wx/filename.h"
enum wxPathFormat
{
    wxPATH_NATIVE = 0,
    wxPATH_UNIX,
    wxPATH_BEOS = wxPATH_UNIX,
    wxPATH_MAC,
    wxPATH_DOS,
    wxPATH_WIN = wxPATH_DOS,
    wxPATH_OS2 = wxPATH_DOS,
    wxPATH_VMS,

    wxPATH_MAX
};


enum wxSizeConvention
{
    wxSIZE_CONV_TRADITIONAL,
    wxSIZE_CONV_IEC,
    wxSIZE_CONV_SI
};



enum wxPathNormalize
{
    wxPATH_NORM_ENV_VARS = 0x0001,
    wxPATH_NORM_DOTS = 0x0002,
    wxPATH_NORM_TILDE = 0x0004,
    wxPATH_NORM_CASE = 0x0008,
    wxPATH_NORM_ABSOLUTE = 0x0010,
    wxPATH_NORM_LONG = 0x0020,
    wxPATH_NORM_SHORTCUT = 0x0040,
    wxPATH_NORM_ALL = 0x00ff & ~wxPATH_NORM_CASE
};


enum
{
    wxPATH_NO_SEPARATOR = 0x0000,
    wxPATH_GET_VOLUME = 0x0001,
    wxPATH_GET_SEPARATOR = 0x0002
};


enum
{
    wxPATH_MKDIR_FULL = 0x0001
};


enum
{
    wxPATH_RMDIR_FULL = 0x0001,
    wxPATH_RMDIR_RECURSIVE = 0x0002
};


enum
{
    wxFILE_EXISTS_REGULAR = 0x0001,
    wxFILE_EXISTS_DIR = 0x0002,
    wxFILE_EXISTS_SYMLINK = 0x1004,


    wxFILE_EXISTS_DEVICE = 0x0008,
    wxFILE_EXISTS_FIFO = 0x0016,
    wxFILE_EXISTS_SOCKET = 0x0032,

    wxFILE_EXISTS_NO_FOLLOW = 0x1000,
    wxFILE_EXISTS_ANY = 0x1FFF
};
# 126 "/usr/local/include/wx-3.0/wx/filename.h"
class wxFileName
{
public:



    wxFileName() { Clear(); }
    wxFileName(const wxFileName& filepath) { Assign(filepath); }




    wxFileName( const wxString& fullpath, wxPathFormat format = wxPATH_NATIVE )
        { Assign( fullpath, format ); m_dontFollowLinks = false; }


    wxFileName(const wxString& path,
               const wxString& name,
               wxPathFormat format = wxPATH_NATIVE)
        { Assign(path, name, format); m_dontFollowLinks = false; }


    wxFileName(const wxString& volume,
               const wxString& path,
               const wxString& name,
               const wxString& ext,
               wxPathFormat format = wxPATH_NATIVE)
        { Assign(volume, path, name, ext, format); m_dontFollowLinks = false; }


    wxFileName(const wxString& path,
               const wxString& name,
               const wxString& ext,
               wxPathFormat format = wxPATH_NATIVE)
        { Assign(path, name, ext, format); m_dontFollowLinks = false; }



    void Assign(const wxFileName& filepath);

    void Assign(const wxString& fullpath,
                wxPathFormat format = wxPATH_NATIVE);

    void Assign(const wxString& volume,
                const wxString& path,
                const wxString& name,
                const wxString& ext,
                bool hasExt,
                wxPathFormat format = wxPATH_NATIVE);

    void Assign(const wxString& volume,
                const wxString& path,
                const wxString& name,
                const wxString& ext,
                wxPathFormat format = wxPATH_NATIVE)
        { Assign(volume, path, name, ext, !ext.empty(), format); }

    void Assign(const wxString& path,
                const wxString& name,
                wxPathFormat format = wxPATH_NATIVE);

    void Assign(const wxString& path,
                const wxString& name,
                const wxString& ext,
                wxPathFormat format = wxPATH_NATIVE);

    void AssignDir(const wxString& dir, wxPathFormat format = wxPATH_NATIVE);



    wxFileName& operator=(const wxFileName& filename)
        { if (this != &filename) Assign(filename); return *this; }

    wxFileName& operator=(const wxString& filename)
        { Assign(filename); return *this; }


    void Clear();


    static wxFileName FileName(const wxString& file,
                               wxPathFormat format = wxPATH_NATIVE);
    static wxFileName DirName(const wxString& dir,
                              wxPathFormat format = wxPATH_NATIVE);




    bool IsOk() const
    {

        return m_dirs.size() != 0 || !m_name.empty() || !m_relative ||
                !m_ext.empty() || m_hasExt;
    }


    bool FileExists() const;
    static bool FileExists( const wxString &file );


    bool DirExists() const;
    static bool DirExists( const wxString &dir );



    bool Exists(int flags = wxFILE_EXISTS_ANY) const;
    static bool Exists(const wxString& path, int flags = wxFILE_EXISTS_ANY);






    bool IsDirWritable() const { return wxIsWritable(GetPath()); }
    static bool IsDirWritable(const wxString &path) { return wxDirExists(path) && wxIsWritable(path); }

    bool IsDirReadable() const { return wxIsReadable(GetPath()); }
    static bool IsDirReadable(const wxString &path) { return wxDirExists(path) && wxIsReadable(path); }




    bool IsFileWritable() const { return wxIsWritable(GetFullPath()); }
    static bool IsFileWritable(const wxString &path) { return wxFileExists(path) && wxIsWritable(path); }

    bool IsFileReadable() const { return wxIsReadable(GetFullPath()); }
    static bool IsFileReadable(const wxString &path) { return wxFileExists(path) && wxIsReadable(path); }

    bool IsFileExecutable() const { return wxIsExecutable(GetFullPath()); }
    static bool IsFileExecutable(const wxString &path) { return wxFileExists(path) && wxIsExecutable(path); }



    bool SetPermissions(int permissions);
# 302 "/usr/local/include/wx-3.0/wx/filename.h"
    void AssignCwd(const wxString& volume = wxEmptyString);
    static wxString GetCwd(const wxString& volume = wxEmptyString);


    bool SetCwd() const;
    static bool SetCwd( const wxString &cwd );


    void AssignHomeDir();
    static wxString GetHomeDir();


    static wxString GetTempDir();
# 341 "/usr/local/include/wx-3.0/wx/filename.h"
    bool Mkdir(int perm = wxS_DIR_DEFAULT, int flags = 0) const;
    static bool Mkdir(const wxString &dir, int perm = wxS_DIR_DEFAULT,
                      int flags = 0);

    bool Rmdir(int flags = 0) const;
    static bool Rmdir(const wxString &dir, int flags = 0);
# 355 "/usr/local/include/wx-3.0/wx/filename.h"
    bool Normalize(int flags = wxPATH_NORM_ALL,
                   const wxString& cwd = wxEmptyString,
                   wxPathFormat format = wxPATH_NATIVE);
# 367 "/usr/local/include/wx-3.0/wx/filename.h"
    bool MakeRelativeTo(const wxString& pathBase = wxEmptyString,
                        wxPathFormat format = wxPATH_NATIVE);




    bool MakeAbsolute(const wxString& cwd = wxEmptyString,
                      wxPathFormat format = wxPATH_NATIVE)
        { return Normalize(wxPATH_NORM_DOTS | wxPATH_NORM_ABSOLUTE |
                           wxPATH_NORM_TILDE, cwd, format); }







    void DontFollowLink()
    {
        m_dontFollowLinks = true;
    }





    bool ShouldFollowLink() const
    {
        return !m_dontFollowLinks;
    }
# 415 "/usr/local/include/wx-3.0/wx/filename.h"
    bool ReplaceEnvVariable(const wxString& envname,
                            const wxString& replacementFmtString = "$%s",
                            wxPathFormat format = wxPATH_NATIVE);




    bool ReplaceHomeDir(wxPathFormat format = wxPATH_NATIVE);





    bool SameAs(const wxFileName& filepath,
                wxPathFormat format = wxPATH_NATIVE) const;


    bool operator==(const wxFileName& filename) const
        { return SameAs(filename); }
    bool operator!=(const wxFileName& filename) const
        { return !SameAs(filename); }


    bool operator==(const wxString& filename) const
        { return SameAs(wxFileName(filename)); }
    bool operator!=(const wxString& filename) const
        { return !SameAs(wxFileName(filename)); }


    static bool IsCaseSensitive( wxPathFormat format = wxPATH_NATIVE );


    bool IsAbsolute(wxPathFormat format = wxPATH_NATIVE) const;


    bool IsRelative(wxPathFormat format = wxPATH_NATIVE) const
        { return !IsAbsolute(format); }



    static wxString GetForbiddenChars(wxPathFormat format = wxPATH_NATIVE);






    static wxString GetVolumeSeparator(wxPathFormat format = wxPATH_NATIVE);


    static wxString GetPathSeparators(wxPathFormat format = wxPATH_NATIVE);



    static wxString GetPathTerminators(wxPathFormat format = wxPATH_NATIVE);


    static wxUniChar GetPathSeparator(wxPathFormat format = wxPATH_NATIVE)
        { return GetPathSeparators(format)[0u]; }


    static bool IsPathSeparator(wxChar ch, wxPathFormat format = wxPATH_NATIVE);



    static bool IsMSWUniqueVolumeNamePath(const wxString& path,
                                          wxPathFormat format = wxPATH_NATIVE);


    size_t GetDirCount() const { return m_dirs.size(); }
    bool AppendDir(const wxString& dir);
    void PrependDir(const wxString& dir);
    bool InsertDir(size_t before, const wxString& dir);
    void RemoveDir(size_t pos);
    void RemoveLastDir() { RemoveDir(GetDirCount() - 1); }


    void SetExt( const wxString &ext ) { m_ext = ext; m_hasExt = !m_ext.empty(); }
    void ClearExt() { m_ext.clear(); m_hasExt = false; }
    void SetEmptyExt() { m_ext.clear(); m_hasExt = true; }
    wxString GetExt() const { return m_ext; }
    bool HasExt() const { return m_hasExt; }

    void SetName( const wxString &name ) { m_name = name; }
    wxString GetName() const { return m_name; }
    bool HasName() const { return !m_name.empty(); }

    void SetVolume( const wxString &volume ) { m_volume = volume; }
    wxString GetVolume() const { return m_volume; }
    bool HasVolume() const { return !m_volume.empty(); }


    void SetFullName(const wxString& fullname);
    wxString GetFullName() const;

    const wxArrayString& GetDirs() const { return m_dirs; }


    wxString GetPath(int flags = wxPATH_GET_VOLUME,
                     wxPathFormat format = wxPATH_NATIVE) const;


    void SetPath( const wxString &path, wxPathFormat format = wxPATH_NATIVE );


    wxString GetFullPath( wxPathFormat format = wxPATH_NATIVE ) const;


    wxString GetShortPath() const;


    wxString GetLongPath() const;


    bool IsDir() const { return m_name.empty() && m_ext.empty(); }




    static wxPathFormat GetFormat( wxPathFormat format = wxPATH_NATIVE );



    static void SplitPath(const wxString& fullpath,
                          wxString *volume,
                          wxString *path,
                          wxString *name,
                          wxString *ext,
                          bool *hasExt = __null,
                          wxPathFormat format = wxPATH_NATIVE);

    static void SplitPath(const wxString& fullpath,
                          wxString *volume,
                          wxString *path,
                          wxString *name,
                          wxString *ext,
                          wxPathFormat format)
    {
        SplitPath(fullpath, volume, path, name, ext, __null, format);
    }


    static void SplitPath(const wxString& fullpath,
                          wxString *path,
                          wxString *name,
                          wxString *ext,
                          wxPathFormat format = wxPATH_NATIVE);


    static void SplitVolume(const wxString& fullpathWithVolume,
                            wxString *volume,
                            wxString *path,
                            wxPathFormat format = wxPATH_NATIVE);


    static wxString StripExtension(const wxString& fullpath);
# 601 "/usr/local/include/wx-3.0/wx/filename.h"
    wxString GetPath( bool withSep, wxPathFormat format = wxPATH_NATIVE ) const
        { return GetPath(withSep ? wxPATH_GET_SEPARATOR : 0, format); }

    wxString GetPathWithSep(wxPathFormat format = wxPATH_NATIVE ) const
        { return GetPath(wxPATH_GET_VOLUME | wxPATH_GET_SEPARATOR, format); }

private:

    static bool IsValidDirComponent(const wxString& dir);


    wxString m_volume;


    wxArrayString m_dirs;


    wxString m_name,
                    m_ext;
# 629 "/usr/local/include/wx-3.0/wx/filename.h"
    bool m_relative;






    bool m_hasExt;




    bool m_dontFollowLinks;
};
# 3 "main-ui.cpp" 2
# 1 "/usr/local/include/wx-3.0/wx/stdpaths.h" 1
# 19 "/usr/local/include/wx-3.0/wx/stdpaths.h"
class wxStandardPaths;







class wxStandardPathsBase
{
public:

    enum ResourceCat
    {

        ResourceCat_None,


        ResourceCat_Messages,


        ResourceCat_Max
    };



    enum
    {
        AppInfo_None = 0,
        AppInfo_AppName = 1,
        AppInfo_VendorName = 2
    };



    static wxStandardPaths& Get();





    virtual wxString GetExecutablePath() const;




    virtual wxString GetConfigDir() const = 0;







    virtual wxString GetUserConfigDir() const = 0;






    virtual wxString GetDataDir() const = 0;




    virtual wxString GetLocalDataDir() const;






    virtual wxString GetUserDataDir() const = 0;






    virtual wxString GetUserLocalDataDir() const;





    virtual wxString GetPluginsDir() const = 0;






    virtual wxString GetResourcesDir() const { return GetDataDir(); }
# 121 "/usr/local/include/wx-3.0/wx/stdpaths.h"
    virtual wxString
    GetLocalizedResourcesDir(const wxString& lang,
                             ResourceCat
                                = ResourceCat_None) const
    {
        return GetResourcesDir() + '/' + lang;
    }





    virtual wxString GetDocumentsDir() const;




    virtual wxString GetAppDocumentsDir() const;


    virtual wxString GetTempDir() const;



    virtual ~wxStandardPathsBase();


    void UseAppInfo(int info)
    {
        m_usedAppInfo = info;
    }

    bool UsesAppInfo(int info) const { return (m_usedAppInfo & info) != 0; }


protected:


    wxStandardPathsBase();



    static wxString AppendPathComponent(const wxString& dir, const wxString& component);


    wxString AppendAppInfo(const wxString& dir) const;



    int m_usedAppInfo;
};
# 200 "/usr/local/include/wx-3.0/wx/stdpaths.h"
class wxStandardPaths : public wxStandardPathsBase
{
public:
    void SetInstallPrefix(const wxString& prefix) { m_prefix = prefix; }
    wxString GetInstallPrefix() const { return m_prefix; }

    virtual wxString GetExecutablePath() const { return m_prefix; }
    virtual wxString GetConfigDir() const { return m_prefix; }
    virtual wxString GetUserConfigDir() const { return m_prefix; }
    virtual wxString GetDataDir() const { return m_prefix; }
    virtual wxString GetLocalDataDir() const { return m_prefix; }
    virtual wxString GetUserDataDir() const { return m_prefix; }
    virtual wxString GetPluginsDir() const { return m_prefix; }
    virtual wxString GetDocumentsDir() const { return m_prefix; }

protected:



    wxStandardPaths() { }

private:
    wxString m_prefix;
};
# 4 "main-ui.cpp" 2

# 1 "/usr/local/include/wx-3.0/wx/cmdline.h" 1
# 22 "/usr/local/include/wx-3.0/wx/cmdline.h"
enum wxCmdLineSplitType
{
    wxCMD_LINE_SPLIT_DOS,
    wxCMD_LINE_SPLIT_UNIX
};
# 287 "/usr/local/include/wx-3.0/wx/cmdline.h"
class wxCmdLineParser
{
public:
    static wxArrayString
    ConvertStringToArgs(const wxString& cmdline,
                        wxCmdLineSplitType type = wxCMD_LINE_SPLIT_DOS);
};
# 6 "main-ui.cpp" 2
# 1 "/usr/local/include/wx-3.0/wx/colour.h" 1
# 15 "/usr/local/include/wx-3.0/wx/colour.h"
# 1 "/usr/local/include/wx-3.0/wx/gdiobj.h" 1
# 22 "/usr/local/include/wx-3.0/wx/gdiobj.h"
class wxGDIRefData : public wxObjectRefData
{
public:


    wxGDIRefData() { }



    virtual bool IsOk() const { return true; }

private:
    private: wxGDIRefData(const wxGDIRefData&); wxGDIRefData& operator=(const wxGDIRefData&);
};





class wxGDIObject : public wxObject
{
public:

    virtual bool IsOk() const
    {


        return m_refData && static_cast<wxGDIRefData *>(m_refData)->IsOk();
    }


    bool IsNull() const { return m_refData == __null; }



    bool Ok() const { return IsOk(); }
# 72 "/usr/local/include/wx-3.0/wx/gdiobj.h"
protected:



    virtual wxObjectRefData *CreateRefData() const
    {
        return CreateGDIRefData();
    }

    virtual wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
    {
        return CloneGDIRefData(static_cast<const wxGDIRefData *>(data));
    }

    virtual wxGDIRefData *CreateGDIRefData() const = 0;
    virtual wxGDIRefData *CloneGDIRefData(const wxGDIRefData *data) const = 0;

    public: static wxClassInfo ms_classInfo; virtual wxClassInfo *GetClassInfo() const; static wxObject* wxCreateObject();
};
# 16 "/usr/local/include/wx-3.0/wx/colour.h" 2

class wxColour;
# 37 "/usr/local/include/wx-3.0/wx/colour.h"
enum {
    wxC2S_NAME = 1,
    wxC2S_CSS_SYNTAX = 2,
    wxC2S_HTML_SYNTAX = 4
};

const unsigned char wxALPHA_TRANSPARENT = 0;
const unsigned char wxALPHA_OPAQUE = 0xff;
# 74 "/usr/local/include/wx-3.0/wx/colour.h"
class wxColourBase : public



    wxObject

{
public:

    typedef unsigned char ChannelType;

    wxColourBase() {}
    virtual ~wxColourBase() {}





    void Set(ChannelType red,
             ChannelType green,
             ChannelType blue,
             ChannelType alpha = wxALPHA_OPAQUE)
        { InitRGBA(red, green, blue, alpha); }


    bool Set(const wxString &str)
        { return FromString(str); }

    void Set(unsigned long colRGB)
    {


        Set((ChannelType)(0xFF & colRGB),
            (ChannelType)(0xFF & (colRGB >> 8)),
            (ChannelType)(0xFF & (colRGB >> 16)));
    }






    virtual ChannelType Red() const = 0;
    virtual ChannelType Green() const = 0;
    virtual ChannelType Blue() const = 0;
    virtual ChannelType Alpha() const
        { return wxALPHA_OPAQUE ; }


    virtual wxString GetAsString(long flags = wxC2S_NAME | wxC2S_CSS_SYNTAX) const;

    void SetRGB(wxUint32 colRGB)
    {
        Set((ChannelType)(0xFF & colRGB),
            (ChannelType)(0xFF & (colRGB >> 8)),
            (ChannelType)(0xFF & (colRGB >> 16)));
    }

    void SetRGBA(wxUint32 colRGBA)
    {
        Set((ChannelType)(0xFF & colRGBA),
            (ChannelType)(0xFF & (colRGBA >> 8)),
            (ChannelType)(0xFF & (colRGBA >> 16)),
            (ChannelType)(0xFF & (colRGBA >> 24)));
    }

    wxUint32 GetRGB() const
        { return Red() | (Green() << 8) | (Blue() << 16); }

    wxUint32 GetRGBA() const
        { return Red() | (Green() << 8) | (Blue() << 16) | (Alpha() << 24); }


    virtual bool IsOk() const= 0;



    bool Ok() const { return IsOk(); }
# 160 "/usr/local/include/wx-3.0/wx/colour.h"
    static void MakeMono (unsigned char* r, unsigned char* g, unsigned char* b, bool on);
    static void MakeDisabled(unsigned char* r, unsigned char* g, unsigned char* b, unsigned char brightness = 255);
    static void MakeGrey (unsigned char* r, unsigned char* g, unsigned char* b);
    static void MakeGrey (unsigned char* r, unsigned char* g, unsigned char* b,
                                      double weight_r, double weight_g, double weight_b);
    static unsigned char AlphaBlend (unsigned char fg, unsigned char bg, double alpha);
    static void ChangeLightness(unsigned char* r, unsigned char* g, unsigned char* b, int ialpha);

    wxColour ChangeLightness(int ialpha) const;
    wxColour& MakeDisabled(unsigned char brightness = 255);
# 179 "/usr/local/include/wx-3.0/wx/colour.h"
protected:


    void Init() { }

    virtual void
    InitRGBA(ChannelType r, ChannelType g, ChannelType b, ChannelType a) = 0;

    virtual bool FromString(const wxString& s);
# 207 "/usr/local/include/wx-3.0/wx/colour.h"
};



                 wxString wxToString(const wxColourBase& col);
                 bool wxFromString(const wxString& str, wxColourBase* col);
# 229 "/usr/local/include/wx-3.0/wx/colour.h"
# 1 "/usr/local/include/wx-3.0/wx/osx/colour.h" 1
# 1 "/usr/local/include/wx-3.0/wx/osx/core/colour.h" 1
# 17 "/usr/local/include/wx-3.0/wx/osx/core/colour.h"
# 1 "/usr/local/include/wx-3.0/wx/osx/core/cfref.h" 1
# 30 "/usr/local/include/wx-3.0/wx/osx/core/cfref.h"
typedef const void *CFTypeRef;
extern "C" {
extern
CFTypeRef CFRetain(CFTypeRef cf);
extern
void CFRelease(CFTypeRef cf);
}







template <class Type>
inline void wxCFRelease(Type *r)
{
    if ( r != __null )
        ::CFRelease((CFTypeRef)r);
}




template <class Type>
inline Type* wxCFRetain(Type *r)
{



    if ( r != __null )
        r = (Type*)::CFRetain((CFTypeRef)r);
    return r;
}

template <class refType>
class wxCFRef;
# 78 "/usr/local/include/wx-3.0/wx/osx/core/cfref.h"
template <class refType>
class wxCFWeakRef
{
    template <class refTypeA, class otherRefType>
    friend wxCFWeakRef<refTypeA> static_cfref_cast(const wxCFRef<otherRefType> &otherRef);
public:



    wxCFWeakRef()
    : m_ptr(__null)
    {}



    ~wxCFWeakRef()
    { m_ptr = __null; }
# 104 "/usr/local/include/wx-3.0/wx/osx/core/cfref.h"
    template <class otherRefType>
    wxCFWeakRef(const wxCFWeakRef<otherRefType>& otherRef)
    : m_ptr(otherRef.get())
    {}







    template <class otherRefType>
    wxCFWeakRef(const wxCFRef<otherRefType>& otherRef)
    : m_ptr(otherRef.get())
    {}





    refType get() const
    { return m_ptr; }





    operator refType() const
    { return m_ptr; }

protected:






    template <class otherType>
    explicit wxCFWeakRef(otherType *p)
    : m_ptr(p)
    {}



    refType m_ptr;
};







template <class refType>
class wxCFRef
{
public:



    wxCFRef()
    : m_ptr(__null)
    {}
# 180 "/usr/local/include/wx-3.0/wx/osx/core/cfref.h"
    template <class otherType>
    explicit wxCFRef(otherType *p)
    : m_ptr(p)
    {}







    wxCFRef(const wxCFRef& otherRef)
    : m_ptr(wxCFRetain(otherRef.m_ptr))
    {}
# 202 "/usr/local/include/wx-3.0/wx/osx/core/cfref.h"
    template <class otherRefType>
    wxCFRef(const wxCFRef<otherRefType>& otherRef)
    : m_ptr(wxCFRetain(otherRef.get()))
    {}
# 215 "/usr/local/include/wx-3.0/wx/osx/core/cfref.h"
    template <class otherRefType>
    wxCFRef(const wxCFWeakRef<otherRefType>& otherRef)
    : m_ptr(wxCFRetain(otherRef.get()))
    {}






    ~wxCFRef()
    { reset(); }







    wxCFRef& operator=(const wxCFRef& otherRef)
    {
        if (this != &otherRef)
        {
            wxCFRetain(otherRef.m_ptr);
            wxCFRelease(m_ptr);
            m_ptr = otherRef.m_ptr;
        }
        return *this;
    }
# 252 "/usr/local/include/wx-3.0/wx/osx/core/cfref.h"
    template <class otherRefType>
    wxCFRef& operator=(const wxCFRef<otherRefType>& otherRef)
    {
        wxCFRetain(otherRef.get());
        wxCFRelease(m_ptr);
        m_ptr = otherRef.get();
        return *this;
    }





    refType get() const
    { return m_ptr; }





    operator refType() const
    { return m_ptr; }
# 284 "/usr/local/include/wx-3.0/wx/osx/core/cfref.h"
    refType operator-> () const
    { return m_ptr; }





    void reset()
    {
        wxCFRelease(m_ptr);
        m_ptr = __null;
    }
# 307 "/usr/local/include/wx-3.0/wx/osx/core/cfref.h"
    template <class otherType>
    void reset(otherType* p)
    {
        wxCFRelease(m_ptr);
        m_ptr = p;
    }


    refType release()
    {
        refType p = m_ptr;
        m_ptr = __null;
        return p;
    }

protected:


    refType m_ptr;
};
# 336 "/usr/local/include/wx-3.0/wx/osx/core/cfref.h"
template <typename Type>
inline wxCFRef<Type*> wxCFRefFromGet(Type *p)
{
    return wxCFRef<Type*>(wxCFRetain(p));
}
# 356 "/usr/local/include/wx-3.0/wx/osx/core/cfref.h"
template <class refType, class otherRefType>
inline wxCFWeakRef<refType> static_cfref_cast(const wxCFRef<otherRefType> &otherRef);

template <class refType, class otherRefType>
inline wxCFWeakRef<refType> static_cfref_cast(const wxCFRef<otherRefType> &otherRef)
{
    return wxCFWeakRef<refType>(static_cast<refType>(otherRef.get()));
}







template <class T>
inline void CFRelease(const wxCFRef<T*> & cfref) __attribute__((deprecated));







template <class T>
inline void CFRetain(const wxCFRef<T*>& cfref) __attribute__((deprecated));
# 18 "/usr/local/include/wx-3.0/wx/osx/core/colour.h" 2

struct RGBColor;


class wxColour: public wxColourBase
{
public:


    wxColour() { Init(); } wxColour(ChannelType red, ChannelType green, ChannelType blue, ChannelType alpha = wxALPHA_OPAQUE) { Init(); Set(red, green, blue, alpha); } wxColour(unsigned long colRGB) { Init(); Set(colRGB ); } wxColour(const wxString& colourName) { Init(); Set(colourName); } wxColour(const char *colourName) { Init(); Set(colourName); } wxColour(const wchar_t *colourName) { Init(); Set(colourName); }




    virtual bool IsOk() const { return m_cgColour != __null; }

    virtual ChannelType Red() const { return m_red; }
    virtual ChannelType Green() const { return m_green; }
    virtual ChannelType Blue() const { return m_blue; }
    virtual ChannelType Alpha() const { return m_alpha; }


    bool operator == (const wxColour& colour) const;

    bool operator != (const wxColour& colour) const { return !(*this == colour); }

    CGColorRef GetPixel() const { return m_cgColour; }

    CGColorRef GetCGColor() const { return m_cgColour; }
    CGColorRef CreateCGColor() const { return wxCFRetain( (CGColorRef)m_cgColour ); }


    void GetRGBColor( RGBColor *col ) const;




    wxColour( CGColorRef col );

    wxColour(const RGBColor& col);
    wxColour& operator=(const RGBColor& col);


    wxColour(WX_NSColor color);
    WX_NSColor OSXGetNSColor() const;

    wxColour& operator=(CGColorRef col);
    wxColour& operator=(const wxColour& col);

protected :
    virtual void
    InitRGBA(ChannelType r, ChannelType g, ChannelType b, ChannelType a);

    void InitRGBColor( const RGBColor& col );

    void InitCGColorRef( CGColorRef col );
    void InitFromComponents(const CGFloat* components, size_t numComponents );
private:
    wxCFRef<CGColorRef> m_cgColour;

    ChannelType m_red;
    ChannelType m_blue;
    ChannelType m_green;
    ChannelType m_alpha;

    public: static wxClassInfo ms_classInfo; virtual wxClassInfo *GetClassInfo() const; static wxObject* wxCreateObject();
};
# 2 "/usr/local/include/wx-3.0/wx/osx/colour.h" 2
# 230 "/usr/local/include/wx-3.0/wx/colour.h" 2
# 7 "main-ui.cpp" 2

 int main(int argc, char **argv) { ; ; return wxEntry(argc, argv); } ICPApp& wxGetApp() { return *static_cast<ICPApp*>(wxAppConsole::GetInstance()); } wxAppConsole *wxCreateApp() { wxAppConsole::CheckBuildOptions("3" "." "0" " (" "ANSI" ",compiler with C++ ABI " "1002" ",wx containers" ")", "your program"); return new ICPApp; } wxAppInitializer wxTheAppInitializer((wxAppInitializerFunction) wxCreateApp);

bool ICPApp::OnInit() {
 wxString ui_path;
 wxString executable_dir = wxStandardPaths::Get().GetExecutablePath().BeforeLast(wxFileName::GetPathSeparator()) + wxFileName::GetPathSeparator();
 wxLogNop();


 wxXmlResource::Get()->InitAllHandlers();
 LoadUI(executable_dir + "../Resources/ui.xrc");
 LoadUI(wxGetCwd()+"/res/ui.xrc");
 LoadUI("/usr/share/openicpbr/ui.xrc");
 LoadUI("/usr/local/openicpbr/ui.xrc");
 LoadUI("/usr/local/share/openicpbr/ui.xrc");


 theWindow = this->GetTopWindow();
 theFrame = wxXmlResource::Get()->LoadFrame(theWindow, "MainFrame");
 theFrame->SetIcon(wxIcon(xpm_icon_32));
 if (theFrame != __null) {

  theFrame->Bind(wxEVT_CLOSE_WINDOW, &ICPApp::OnClose, this);

  theFrame->Show(true);
 }

 return wxAppConsole::OnInit();
}

bool ICPApp::LoadUI(wxString path) {
 wxLogNop();
 if (wxFileExists(path)) {
  wxLogNop();
  wxXmlResource::Get()->Load(path);
  return true;
 }
 return false;
}

ICPApp::ICPApp () {
}

void ICPApp::PreExit () {
 printf("ICPApp::PreExit\n");
}

void ICPApp::OnClose(wxCloseEvent& ) {
 PreExit();
 theFrame->Destroy();
}

void ICPApp::OnInitCmdLine(wxCmdLineParser& parser) {
 parser.AddSwitch("V", "version", "Prints the OpenICP current version");

 parser.SetSwitchChars("-");
}

bool ICPApp::OnCmdLineParsed(wxCmdLineParser& parser) {
 bool print_version = parser.Found("V");
 if (print_version) {
  printf("OpenICP version: %s\n", OpenICP_Version);
  ExitMainLoop();
 }
 return true;
}

ICPApp::~ICPApp () {
 printf("~ICPApp\n");
 free(sign_panel);
 free(verify_panel);
 free(certs_panel);
}
